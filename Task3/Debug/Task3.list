
Task3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043d0  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080044e0  080044e0  000054e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045bc  080045bc  00006060  2**0
                  CONTENTS
  4 .ARM          00000000  080045bc  080045bc  00006060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080045bc  080045bc  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045bc  080045bc  000055bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080045c0  080045c0  000055c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080045c4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b94  20000060  08004624  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001bf4  08004624  00006bf4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012940  00000000  00000000  00006089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c21  00000000  00000000  000189c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a8  00000000  00000000  0001b5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cdc  00000000  00000000  0001c698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002796  00000000  00000000  0001d374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001249d  00000000  00000000  0001fb0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091510  00000000  00000000  00031fa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c34b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004820  00000000  00000000  000c34fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000c7d1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	080044c8 	.word	0x080044c8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	080044c8 	.word	0x080044c8

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fa32 	bl	80005bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f832 	bl	80001c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f876 	bl	800024c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000160:	f001 fb8e 	bl	8001880 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000164:	4a0d      	ldr	r2, [pc, #52]	@ (800019c <main+0x4c>)
 8000166:	2100      	movs	r1, #0
 8000168:	480d      	ldr	r0, [pc, #52]	@ (80001a0 <main+0x50>)
 800016a:	f001 fbef 	bl	800194c <osThreadNew>
 800016e:	4603      	mov	r3, r0
 8000170:	4a0c      	ldr	r2, [pc, #48]	@ (80001a4 <main+0x54>)
 8000172:	6013      	str	r3, [r2, #0]

  /* creation of FlashRedLedTask */
  FlashRedLedTaskHandle = osThreadNew(FlashRedLed, NULL, &FlashRedLedTask_attributes);
 8000174:	4a0c      	ldr	r2, [pc, #48]	@ (80001a8 <main+0x58>)
 8000176:	2100      	movs	r1, #0
 8000178:	480c      	ldr	r0, [pc, #48]	@ (80001ac <main+0x5c>)
 800017a:	f001 fbe7 	bl	800194c <osThreadNew>
 800017e:	4603      	mov	r3, r0
 8000180:	4a0b      	ldr	r2, [pc, #44]	@ (80001b0 <main+0x60>)
 8000182:	6013      	str	r3, [r2, #0]

  /* creation of FlashGreenLedTa */
  FlashGreenLedTaHandle = osThreadNew(FlashGreenLed, NULL, &FlashGreenLedTa_attributes);
 8000184:	4a0b      	ldr	r2, [pc, #44]	@ (80001b4 <main+0x64>)
 8000186:	2100      	movs	r1, #0
 8000188:	480b      	ldr	r0, [pc, #44]	@ (80001b8 <main+0x68>)
 800018a:	f001 fbdf 	bl	800194c <osThreadNew>
 800018e:	4603      	mov	r3, r0
 8000190:	4a0a      	ldr	r2, [pc, #40]	@ (80001bc <main+0x6c>)
 8000192:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000194:	f001 fba6 	bl	80018e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000198:	bf00      	nop
 800019a:	e7fd      	b.n	8000198 <main+0x48>
 800019c:	08004524 	.word	0x08004524
 80001a0:	080002c9 	.word	0x080002c9
 80001a4:	2000007c 	.word	0x2000007c
 80001a8:	08004548 	.word	0x08004548
 80001ac:	080002d9 	.word	0x080002d9
 80001b0:	20000080 	.word	0x20000080
 80001b4:	0800456c 	.word	0x0800456c
 80001b8:	0800032d 	.word	0x0800032d
 80001bc:	20000084 	.word	0x20000084

080001c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b090      	sub	sp, #64	@ 0x40
 80001c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001c6:	f107 0318 	add.w	r3, r7, #24
 80001ca:	2228      	movs	r2, #40	@ 0x28
 80001cc:	2100      	movs	r1, #0
 80001ce:	4618      	mov	r0, r3
 80001d0:	f004 f894 	bl	80042fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d4:	1d3b      	adds	r3, r7, #4
 80001d6:	2200      	movs	r2, #0
 80001d8:	601a      	str	r2, [r3, #0]
 80001da:	605a      	str	r2, [r3, #4]
 80001dc:	609a      	str	r2, [r3, #8]
 80001de:	60da      	str	r2, [r3, #12]
 80001e0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001e2:	2301      	movs	r3, #1
 80001e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001ec:	2300      	movs	r3, #0
 80001ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001f0:	2301      	movs	r3, #1
 80001f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001f4:	2302      	movs	r3, #2
 80001f6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001fe:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000202:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000204:	f107 0318 	add.w	r3, r7, #24
 8000208:	4618      	mov	r0, r3
 800020a:	f000 fcc3 	bl	8000b94 <HAL_RCC_OscConfig>
 800020e:	4603      	mov	r3, r0
 8000210:	2b00      	cmp	r3, #0
 8000212:	d001      	beq.n	8000218 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000214:	f000 f8c6 	bl	80003a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000218:	230f      	movs	r3, #15
 800021a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800021c:	2302      	movs	r3, #2
 800021e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000220:	2300      	movs	r3, #0
 8000222:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000224:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000228:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800022a:	2300      	movs	r3, #0
 800022c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800022e:	1d3b      	adds	r3, r7, #4
 8000230:	2102      	movs	r1, #2
 8000232:	4618      	mov	r0, r3
 8000234:	f000 ff30 	bl	8001098 <HAL_RCC_ClockConfig>
 8000238:	4603      	mov	r3, r0
 800023a:	2b00      	cmp	r3, #0
 800023c:	d001      	beq.n	8000242 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800023e:	f000 f8b1 	bl	80003a4 <Error_Handler>
  }
}
 8000242:	bf00      	nop
 8000244:	3740      	adds	r7, #64	@ 0x40
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
	...

0800024c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b086      	sub	sp, #24
 8000250:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000252:	f107 0308 	add.w	r3, r7, #8
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
 800025a:	605a      	str	r2, [r3, #4]
 800025c:	609a      	str	r2, [r3, #8]
 800025e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000260:	4b17      	ldr	r3, [pc, #92]	@ (80002c0 <MX_GPIO_Init+0x74>)
 8000262:	699b      	ldr	r3, [r3, #24]
 8000264:	4a16      	ldr	r2, [pc, #88]	@ (80002c0 <MX_GPIO_Init+0x74>)
 8000266:	f043 0320 	orr.w	r3, r3, #32
 800026a:	6193      	str	r3, [r2, #24]
 800026c:	4b14      	ldr	r3, [pc, #80]	@ (80002c0 <MX_GPIO_Init+0x74>)
 800026e:	699b      	ldr	r3, [r3, #24]
 8000270:	f003 0320 	and.w	r3, r3, #32
 8000274:	607b      	str	r3, [r7, #4]
 8000276:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000278:	4b11      	ldr	r3, [pc, #68]	@ (80002c0 <MX_GPIO_Init+0x74>)
 800027a:	699b      	ldr	r3, [r3, #24]
 800027c:	4a10      	ldr	r2, [pc, #64]	@ (80002c0 <MX_GPIO_Init+0x74>)
 800027e:	f043 0304 	orr.w	r3, r3, #4
 8000282:	6193      	str	r3, [r2, #24]
 8000284:	4b0e      	ldr	r3, [pc, #56]	@ (80002c0 <MX_GPIO_Init+0x74>)
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	f003 0304 	and.w	r3, r3, #4
 800028c:	603b      	str	r3, [r7, #0]
 800028e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|LED_BLUE_Pin|LED_RED_Pin|LED_ORANGE_Pin, GPIO_PIN_RESET);
 8000290:	2200      	movs	r2, #0
 8000292:	21f0      	movs	r1, #240	@ 0xf0
 8000294:	480b      	ldr	r0, [pc, #44]	@ (80002c4 <MX_GPIO_Init+0x78>)
 8000296:	f000 fc4b 	bl	8000b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_GREEN_Pin LED_BLUE_Pin LED_RED_Pin LED_ORANGE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_BLUE_Pin|LED_RED_Pin|LED_ORANGE_Pin;
 800029a:	23f0      	movs	r3, #240	@ 0xf0
 800029c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800029e:	2301      	movs	r3, #1
 80002a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a2:	2300      	movs	r3, #0
 80002a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002a6:	2302      	movs	r3, #2
 80002a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002aa:	f107 0308 	add.w	r3, r7, #8
 80002ae:	4619      	mov	r1, r3
 80002b0:	4804      	ldr	r0, [pc, #16]	@ (80002c4 <MX_GPIO_Init+0x78>)
 80002b2:	f000 fab9 	bl	8000828 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002b6:	bf00      	nop
 80002b8:	3718      	adds	r7, #24
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	40021000 	.word	0x40021000
 80002c4:	40010800 	.word	0x40010800

080002c8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b082      	sub	sp, #8
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80002d0:	2001      	movs	r0, #1
 80002d2:	f001 fbe5 	bl	8001aa0 <osDelay>
 80002d6:	e7fb      	b.n	80002d0 <StartDefaultTask+0x8>

080002d8 <FlashRedLed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FlashRedLed */
void FlashRedLed(void *argument)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FlashRedLed */
  /* Infinite loop */
	for(;;)
		{
			HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, SET);
 80002e0:	2201      	movs	r2, #1
 80002e2:	2180      	movs	r1, #128	@ 0x80
 80002e4:	4810      	ldr	r0, [pc, #64]	@ (8000328 <FlashRedLed+0x50>)
 80002e6:	f000 fc23 	bl	8000b30 <HAL_GPIO_WritePin>

			for (int i = 0; i < 20; ++i)
 80002ea:	2300      	movs	r3, #0
 80002ec:	60fb      	str	r3, [r7, #12]
 80002ee:	e009      	b.n	8000304 <FlashRedLed+0x2c>
			{
				HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80002f0:	2140      	movs	r1, #64	@ 0x40
 80002f2:	480d      	ldr	r0, [pc, #52]	@ (8000328 <FlashRedLed+0x50>)
 80002f4:	f000 fc34 	bl	8000b60 <HAL_GPIO_TogglePin>
				HAL_Delay(25);
 80002f8:	2019      	movs	r0, #25
 80002fa:	f000 f991 	bl	8000620 <HAL_Delay>
			for (int i = 0; i < 20; ++i)
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	3301      	adds	r3, #1
 8000302:	60fb      	str	r3, [r7, #12]
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	2b13      	cmp	r3, #19
 8000308:	ddf2      	ble.n	80002f0 <FlashRedLed+0x18>
			}

			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, RESET);
 800030a:	2200      	movs	r2, #0
 800030c:	2140      	movs	r1, #64	@ 0x40
 800030e:	4806      	ldr	r0, [pc, #24]	@ (8000328 <FlashRedLed+0x50>)
 8000310:	f000 fc0e 	bl	8000b30 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, RESET);
 8000314:	2200      	movs	r2, #0
 8000316:	2180      	movs	r1, #128	@ 0x80
 8000318:	4803      	ldr	r0, [pc, #12]	@ (8000328 <FlashRedLed+0x50>)
 800031a:	f000 fc09 	bl	8000b30 <HAL_GPIO_WritePin>

			osDelay(1500);
 800031e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000322:	f001 fbbd 	bl	8001aa0 <osDelay>
			HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, SET);
 8000326:	e7db      	b.n	80002e0 <FlashRedLed+0x8>
 8000328:	40010800 	.word	0x40010800

0800032c <FlashGreenLed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FlashGreenLed */
void FlashGreenLed(void *argument)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b084      	sub	sp, #16
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FlashGreenLed */
  /* Infinite loop */
	for(;;)
		{
			HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, SET);
 8000334:	2201      	movs	r2, #1
 8000336:	2120      	movs	r1, #32
 8000338:	4810      	ldr	r0, [pc, #64]	@ (800037c <FlashGreenLed+0x50>)
 800033a:	f000 fbf9 	bl	8000b30 <HAL_GPIO_WritePin>
			// 4 second
			for (int i = 0; i < 160; ++i)
 800033e:	2300      	movs	r3, #0
 8000340:	60fb      	str	r3, [r7, #12]
 8000342:	e009      	b.n	8000358 <FlashGreenLed+0x2c>
			{
				HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000344:	2110      	movs	r1, #16
 8000346:	480d      	ldr	r0, [pc, #52]	@ (800037c <FlashGreenLed+0x50>)
 8000348:	f000 fc0a 	bl	8000b60 <HAL_GPIO_TogglePin>
				HAL_Delay(25);
 800034c:	2019      	movs	r0, #25
 800034e:	f000 f967 	bl	8000620 <HAL_Delay>
			for (int i = 0; i < 160; ++i)
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	3301      	adds	r3, #1
 8000356:	60fb      	str	r3, [r7, #12]
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	2b9f      	cmp	r3, #159	@ 0x9f
 800035c:	ddf2      	ble.n	8000344 <FlashGreenLed+0x18>
			}

			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, RESET);
 800035e:	2200      	movs	r2, #0
 8000360:	2110      	movs	r1, #16
 8000362:	4806      	ldr	r0, [pc, #24]	@ (800037c <FlashGreenLed+0x50>)
 8000364:	f000 fbe4 	bl	8000b30 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, RESET);
 8000368:	2200      	movs	r2, #0
 800036a:	2120      	movs	r1, #32
 800036c:	4803      	ldr	r0, [pc, #12]	@ (800037c <FlashGreenLed+0x50>)
 800036e:	f000 fbdf 	bl	8000b30 <HAL_GPIO_WritePin>

			osDelay(6000);
 8000372:	f241 7070 	movw	r0, #6000	@ 0x1770
 8000376:	f001 fb93 	bl	8001aa0 <osDelay>
			HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, SET);
 800037a:	e7db      	b.n	8000334 <FlashGreenLed+0x8>
 800037c:	40010800 	.word	0x40010800

08000380 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a04      	ldr	r2, [pc, #16]	@ (80003a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800038e:	4293      	cmp	r3, r2
 8000390:	d101      	bne.n	8000396 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000392:	f000 f929 	bl	80005e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000396:	bf00      	nop
 8000398:	3708      	adds	r7, #8
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	40000800 	.word	0x40000800

080003a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003a8:	b672      	cpsid	i
}
 80003aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003ac:	bf00      	nop
 80003ae:	e7fd      	b.n	80003ac <Error_Handler+0x8>

080003b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b084      	sub	sp, #16
 80003b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003b6:	4b18      	ldr	r3, [pc, #96]	@ (8000418 <HAL_MspInit+0x68>)
 80003b8:	699b      	ldr	r3, [r3, #24]
 80003ba:	4a17      	ldr	r2, [pc, #92]	@ (8000418 <HAL_MspInit+0x68>)
 80003bc:	f043 0301 	orr.w	r3, r3, #1
 80003c0:	6193      	str	r3, [r2, #24]
 80003c2:	4b15      	ldr	r3, [pc, #84]	@ (8000418 <HAL_MspInit+0x68>)
 80003c4:	699b      	ldr	r3, [r3, #24]
 80003c6:	f003 0301 	and.w	r3, r3, #1
 80003ca:	60bb      	str	r3, [r7, #8]
 80003cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ce:	4b12      	ldr	r3, [pc, #72]	@ (8000418 <HAL_MspInit+0x68>)
 80003d0:	69db      	ldr	r3, [r3, #28]
 80003d2:	4a11      	ldr	r2, [pc, #68]	@ (8000418 <HAL_MspInit+0x68>)
 80003d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003d8:	61d3      	str	r3, [r2, #28]
 80003da:	4b0f      	ldr	r3, [pc, #60]	@ (8000418 <HAL_MspInit+0x68>)
 80003dc:	69db      	ldr	r3, [r3, #28]
 80003de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003e2:	607b      	str	r3, [r7, #4]
 80003e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80003e6:	2200      	movs	r2, #0
 80003e8:	210f      	movs	r1, #15
 80003ea:	f06f 0001 	mvn.w	r0, #1
 80003ee:	f000 f9f0 	bl	80007d2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003f2:	4b0a      	ldr	r3, [pc, #40]	@ (800041c <HAL_MspInit+0x6c>)
 80003f4:	685b      	ldr	r3, [r3, #4]
 80003f6:	60fb      	str	r3, [r7, #12]
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80003fe:	60fb      	str	r3, [r7, #12]
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000406:	60fb      	str	r3, [r7, #12]
 8000408:	4a04      	ldr	r2, [pc, #16]	@ (800041c <HAL_MspInit+0x6c>)
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800040e:	bf00      	nop
 8000410:	3710      	adds	r7, #16
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	40021000 	.word	0x40021000
 800041c:	40010000 	.word	0x40010000

08000420 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b08e      	sub	sp, #56	@ 0x38
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000428:	2300      	movs	r3, #0
 800042a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800042c:	2300      	movs	r3, #0
 800042e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000430:	2300      	movs	r3, #0
 8000432:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000436:	4b34      	ldr	r3, [pc, #208]	@ (8000508 <HAL_InitTick+0xe8>)
 8000438:	69db      	ldr	r3, [r3, #28]
 800043a:	4a33      	ldr	r2, [pc, #204]	@ (8000508 <HAL_InitTick+0xe8>)
 800043c:	f043 0304 	orr.w	r3, r3, #4
 8000440:	61d3      	str	r3, [r2, #28]
 8000442:	4b31      	ldr	r3, [pc, #196]	@ (8000508 <HAL_InitTick+0xe8>)
 8000444:	69db      	ldr	r3, [r3, #28]
 8000446:	f003 0304 	and.w	r3, r3, #4
 800044a:	60fb      	str	r3, [r7, #12]
 800044c:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800044e:	f107 0210 	add.w	r2, r7, #16
 8000452:	f107 0314 	add.w	r3, r7, #20
 8000456:	4611      	mov	r1, r2
 8000458:	4618      	mov	r0, r3
 800045a:	f000 ff79 	bl	8001350 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800045e:	6a3b      	ldr	r3, [r7, #32]
 8000460:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000464:	2b00      	cmp	r3, #0
 8000466:	d103      	bne.n	8000470 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000468:	f000 ff5e 	bl	8001328 <HAL_RCC_GetPCLK1Freq>
 800046c:	6378      	str	r0, [r7, #52]	@ 0x34
 800046e:	e004      	b.n	800047a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000470:	f000 ff5a 	bl	8001328 <HAL_RCC_GetPCLK1Freq>
 8000474:	4603      	mov	r3, r0
 8000476:	005b      	lsls	r3, r3, #1
 8000478:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800047a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800047c:	4a23      	ldr	r2, [pc, #140]	@ (800050c <HAL_InitTick+0xec>)
 800047e:	fba2 2303 	umull	r2, r3, r2, r3
 8000482:	0c9b      	lsrs	r3, r3, #18
 8000484:	3b01      	subs	r3, #1
 8000486:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000488:	4b21      	ldr	r3, [pc, #132]	@ (8000510 <HAL_InitTick+0xf0>)
 800048a:	4a22      	ldr	r2, [pc, #136]	@ (8000514 <HAL_InitTick+0xf4>)
 800048c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800048e:	4b20      	ldr	r3, [pc, #128]	@ (8000510 <HAL_InitTick+0xf0>)
 8000490:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000494:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000496:	4a1e      	ldr	r2, [pc, #120]	@ (8000510 <HAL_InitTick+0xf0>)
 8000498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800049a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800049c:	4b1c      	ldr	r3, [pc, #112]	@ (8000510 <HAL_InitTick+0xf0>)
 800049e:	2200      	movs	r2, #0
 80004a0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000510 <HAL_InitTick+0xf0>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004a8:	4b19      	ldr	r3, [pc, #100]	@ (8000510 <HAL_InitTick+0xf0>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80004ae:	4818      	ldr	r0, [pc, #96]	@ (8000510 <HAL_InitTick+0xf0>)
 80004b0:	f000 ff9c 	bl	80013ec <HAL_TIM_Base_Init>
 80004b4:	4603      	mov	r3, r0
 80004b6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80004ba:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d11b      	bne.n	80004fa <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80004c2:	4813      	ldr	r0, [pc, #76]	@ (8000510 <HAL_InitTick+0xf0>)
 80004c4:	f000 ffea 	bl	800149c <HAL_TIM_Base_Start_IT>
 80004c8:	4603      	mov	r3, r0
 80004ca:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80004ce:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d111      	bne.n	80004fa <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80004d6:	201e      	movs	r0, #30
 80004d8:	f000 f997 	bl	800080a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	2b0f      	cmp	r3, #15
 80004e0:	d808      	bhi.n	80004f4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80004e2:	2200      	movs	r2, #0
 80004e4:	6879      	ldr	r1, [r7, #4]
 80004e6:	201e      	movs	r0, #30
 80004e8:	f000 f973 	bl	80007d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80004ec:	4a0a      	ldr	r2, [pc, #40]	@ (8000518 <HAL_InitTick+0xf8>)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	6013      	str	r3, [r2, #0]
 80004f2:	e002      	b.n	80004fa <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80004f4:	2301      	movs	r3, #1
 80004f6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80004fa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80004fe:	4618      	mov	r0, r3
 8000500:	3738      	adds	r7, #56	@ 0x38
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40021000 	.word	0x40021000
 800050c:	431bde83 	.word	0x431bde83
 8000510:	20000088 	.word	0x20000088
 8000514:	40000800 	.word	0x40000800
 8000518:	20000004 	.word	0x20000004

0800051c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000520:	bf00      	nop
 8000522:	e7fd      	b.n	8000520 <NMI_Handler+0x4>

08000524 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000528:	bf00      	nop
 800052a:	e7fd      	b.n	8000528 <HardFault_Handler+0x4>

0800052c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000530:	bf00      	nop
 8000532:	e7fd      	b.n	8000530 <MemManage_Handler+0x4>

08000534 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000538:	bf00      	nop
 800053a:	e7fd      	b.n	8000538 <BusFault_Handler+0x4>

0800053c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000540:	bf00      	nop
 8000542:	e7fd      	b.n	8000540 <UsageFault_Handler+0x4>

08000544 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr

08000550 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000554:	4802      	ldr	r0, [pc, #8]	@ (8000560 <TIM4_IRQHandler+0x10>)
 8000556:	f000 fff3 	bl	8001540 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800055a:	bf00      	nop
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	20000088 	.word	0x20000088

08000564 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000568:	bf00      	nop
 800056a:	46bd      	mov	sp, r7
 800056c:	bc80      	pop	{r7}
 800056e:	4770      	bx	lr

08000570 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000570:	f7ff fff8 	bl	8000564 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000574:	480b      	ldr	r0, [pc, #44]	@ (80005a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000576:	490c      	ldr	r1, [pc, #48]	@ (80005a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000578:	4a0c      	ldr	r2, [pc, #48]	@ (80005ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800057a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800057c:	e002      	b.n	8000584 <LoopCopyDataInit>

0800057e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800057e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000580:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000582:	3304      	adds	r3, #4

08000584 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000584:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000586:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000588:	d3f9      	bcc.n	800057e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800058a:	4a09      	ldr	r2, [pc, #36]	@ (80005b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800058c:	4c09      	ldr	r4, [pc, #36]	@ (80005b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800058e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000590:	e001      	b.n	8000596 <LoopFillZerobss>

08000592 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000592:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000594:	3204      	adds	r2, #4

08000596 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000596:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000598:	d3fb      	bcc.n	8000592 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800059a:	f003 ff0d 	bl	80043b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800059e:	f7ff fdd7 	bl	8000150 <main>
  bx lr
 80005a2:	4770      	bx	lr
  ldr r0, =_sdata
 80005a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005a8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80005ac:	080045c4 	.word	0x080045c4
  ldr r2, =_sbss
 80005b0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80005b4:	20001bf4 	.word	0x20001bf4

080005b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005b8:	e7fe      	b.n	80005b8 <ADC1_2_IRQHandler>
	...

080005bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005c0:	4b08      	ldr	r3, [pc, #32]	@ (80005e4 <HAL_Init+0x28>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a07      	ldr	r2, [pc, #28]	@ (80005e4 <HAL_Init+0x28>)
 80005c6:	f043 0310 	orr.w	r3, r3, #16
 80005ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005cc:	2003      	movs	r0, #3
 80005ce:	f000 f8f5 	bl	80007bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005d2:	200f      	movs	r0, #15
 80005d4:	f7ff ff24 	bl	8000420 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005d8:	f7ff feea 	bl	80003b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005dc:	2300      	movs	r3, #0
}
 80005de:	4618      	mov	r0, r3
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40022000 	.word	0x40022000

080005e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005ec:	4b05      	ldr	r3, [pc, #20]	@ (8000604 <HAL_IncTick+0x1c>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	461a      	mov	r2, r3
 80005f2:	4b05      	ldr	r3, [pc, #20]	@ (8000608 <HAL_IncTick+0x20>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4413      	add	r3, r2
 80005f8:	4a03      	ldr	r2, [pc, #12]	@ (8000608 <HAL_IncTick+0x20>)
 80005fa:	6013      	str	r3, [r2, #0]
}
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr
 8000604:	20000008 	.word	0x20000008
 8000608:	200000d0 	.word	0x200000d0

0800060c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  return uwTick;
 8000610:	4b02      	ldr	r3, [pc, #8]	@ (800061c <HAL_GetTick+0x10>)
 8000612:	681b      	ldr	r3, [r3, #0]
}
 8000614:	4618      	mov	r0, r3
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr
 800061c:	200000d0 	.word	0x200000d0

08000620 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000628:	f7ff fff0 	bl	800060c <HAL_GetTick>
 800062c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000638:	d005      	beq.n	8000646 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800063a:	4b0a      	ldr	r3, [pc, #40]	@ (8000664 <HAL_Delay+0x44>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	461a      	mov	r2, r3
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	4413      	add	r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000646:	bf00      	nop
 8000648:	f7ff ffe0 	bl	800060c <HAL_GetTick>
 800064c:	4602      	mov	r2, r0
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	1ad3      	subs	r3, r2, r3
 8000652:	68fa      	ldr	r2, [r7, #12]
 8000654:	429a      	cmp	r2, r3
 8000656:	d8f7      	bhi.n	8000648 <HAL_Delay+0x28>
  {
  }
}
 8000658:	bf00      	nop
 800065a:	bf00      	nop
 800065c:	3710      	adds	r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20000008 	.word	0x20000008

08000668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	f003 0307 	and.w	r3, r3, #7
 8000676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000678:	4b0c      	ldr	r3, [pc, #48]	@ (80006ac <__NVIC_SetPriorityGrouping+0x44>)
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800067e:	68ba      	ldr	r2, [r7, #8]
 8000680:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000684:	4013      	ands	r3, r2
 8000686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000690:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000694:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800069a:	4a04      	ldr	r2, [pc, #16]	@ (80006ac <__NVIC_SetPriorityGrouping+0x44>)
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	60d3      	str	r3, [r2, #12]
}
 80006a0:	bf00      	nop
 80006a2:	3714      	adds	r7, #20
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bc80      	pop	{r7}
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	e000ed00 	.word	0xe000ed00

080006b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006b4:	4b04      	ldr	r3, [pc, #16]	@ (80006c8 <__NVIC_GetPriorityGrouping+0x18>)
 80006b6:	68db      	ldr	r3, [r3, #12]
 80006b8:	0a1b      	lsrs	r3, r3, #8
 80006ba:	f003 0307 	and.w	r3, r3, #7
}
 80006be:	4618      	mov	r0, r3
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bc80      	pop	{r7}
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	db0b      	blt.n	80006f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	f003 021f 	and.w	r2, r3, #31
 80006e4:	4906      	ldr	r1, [pc, #24]	@ (8000700 <__NVIC_EnableIRQ+0x34>)
 80006e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ea:	095b      	lsrs	r3, r3, #5
 80006ec:	2001      	movs	r0, #1
 80006ee:	fa00 f202 	lsl.w	r2, r0, r2
 80006f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006f6:	bf00      	nop
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr
 8000700:	e000e100 	.word	0xe000e100

08000704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	6039      	str	r1, [r7, #0]
 800070e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000714:	2b00      	cmp	r3, #0
 8000716:	db0a      	blt.n	800072e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	b2da      	uxtb	r2, r3
 800071c:	490c      	ldr	r1, [pc, #48]	@ (8000750 <__NVIC_SetPriority+0x4c>)
 800071e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000722:	0112      	lsls	r2, r2, #4
 8000724:	b2d2      	uxtb	r2, r2
 8000726:	440b      	add	r3, r1
 8000728:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800072c:	e00a      	b.n	8000744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	b2da      	uxtb	r2, r3
 8000732:	4908      	ldr	r1, [pc, #32]	@ (8000754 <__NVIC_SetPriority+0x50>)
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	f003 030f 	and.w	r3, r3, #15
 800073a:	3b04      	subs	r3, #4
 800073c:	0112      	lsls	r2, r2, #4
 800073e:	b2d2      	uxtb	r2, r2
 8000740:	440b      	add	r3, r1
 8000742:	761a      	strb	r2, [r3, #24]
}
 8000744:	bf00      	nop
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	bc80      	pop	{r7}
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	e000e100 	.word	0xe000e100
 8000754:	e000ed00 	.word	0xe000ed00

08000758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000758:	b480      	push	{r7}
 800075a:	b089      	sub	sp, #36	@ 0x24
 800075c:	af00      	add	r7, sp, #0
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	60b9      	str	r1, [r7, #8]
 8000762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	f003 0307 	and.w	r3, r3, #7
 800076a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800076c:	69fb      	ldr	r3, [r7, #28]
 800076e:	f1c3 0307 	rsb	r3, r3, #7
 8000772:	2b04      	cmp	r3, #4
 8000774:	bf28      	it	cs
 8000776:	2304      	movcs	r3, #4
 8000778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800077a:	69fb      	ldr	r3, [r7, #28]
 800077c:	3304      	adds	r3, #4
 800077e:	2b06      	cmp	r3, #6
 8000780:	d902      	bls.n	8000788 <NVIC_EncodePriority+0x30>
 8000782:	69fb      	ldr	r3, [r7, #28]
 8000784:	3b03      	subs	r3, #3
 8000786:	e000      	b.n	800078a <NVIC_EncodePriority+0x32>
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800078c:	f04f 32ff 	mov.w	r2, #4294967295
 8000790:	69bb      	ldr	r3, [r7, #24]
 8000792:	fa02 f303 	lsl.w	r3, r2, r3
 8000796:	43da      	mvns	r2, r3
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	401a      	ands	r2, r3
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007a0:	f04f 31ff 	mov.w	r1, #4294967295
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	fa01 f303 	lsl.w	r3, r1, r3
 80007aa:	43d9      	mvns	r1, r3
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b0:	4313      	orrs	r3, r2
         );
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3724      	adds	r7, #36	@ 0x24
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr

080007bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007c4:	6878      	ldr	r0, [r7, #4]
 80007c6:	f7ff ff4f 	bl	8000668 <__NVIC_SetPriorityGrouping>
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b086      	sub	sp, #24
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	4603      	mov	r3, r0
 80007da:	60b9      	str	r1, [r7, #8]
 80007dc:	607a      	str	r2, [r7, #4]
 80007de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007e0:	2300      	movs	r3, #0
 80007e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007e4:	f7ff ff64 	bl	80006b0 <__NVIC_GetPriorityGrouping>
 80007e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ea:	687a      	ldr	r2, [r7, #4]
 80007ec:	68b9      	ldr	r1, [r7, #8]
 80007ee:	6978      	ldr	r0, [r7, #20]
 80007f0:	f7ff ffb2 	bl	8000758 <NVIC_EncodePriority>
 80007f4:	4602      	mov	r2, r0
 80007f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007fa:	4611      	mov	r1, r2
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff ff81 	bl	8000704 <__NVIC_SetPriority>
}
 8000802:	bf00      	nop
 8000804:	3718      	adds	r7, #24
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	b082      	sub	sp, #8
 800080e:	af00      	add	r7, sp, #0
 8000810:	4603      	mov	r3, r0
 8000812:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff ff57 	bl	80006cc <__NVIC_EnableIRQ>
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
	...

08000828 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000828:	b480      	push	{r7}
 800082a:	b08b      	sub	sp, #44	@ 0x2c
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000832:	2300      	movs	r3, #0
 8000834:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000836:	2300      	movs	r3, #0
 8000838:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800083a:	e169      	b.n	8000b10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800083c:	2201      	movs	r2, #1
 800083e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000840:	fa02 f303 	lsl.w	r3, r2, r3
 8000844:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	69fa      	ldr	r2, [r7, #28]
 800084c:	4013      	ands	r3, r2
 800084e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000850:	69ba      	ldr	r2, [r7, #24]
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	429a      	cmp	r2, r3
 8000856:	f040 8158 	bne.w	8000b0a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	4a9a      	ldr	r2, [pc, #616]	@ (8000ac8 <HAL_GPIO_Init+0x2a0>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d05e      	beq.n	8000922 <HAL_GPIO_Init+0xfa>
 8000864:	4a98      	ldr	r2, [pc, #608]	@ (8000ac8 <HAL_GPIO_Init+0x2a0>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d875      	bhi.n	8000956 <HAL_GPIO_Init+0x12e>
 800086a:	4a98      	ldr	r2, [pc, #608]	@ (8000acc <HAL_GPIO_Init+0x2a4>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d058      	beq.n	8000922 <HAL_GPIO_Init+0xfa>
 8000870:	4a96      	ldr	r2, [pc, #600]	@ (8000acc <HAL_GPIO_Init+0x2a4>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d86f      	bhi.n	8000956 <HAL_GPIO_Init+0x12e>
 8000876:	4a96      	ldr	r2, [pc, #600]	@ (8000ad0 <HAL_GPIO_Init+0x2a8>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d052      	beq.n	8000922 <HAL_GPIO_Init+0xfa>
 800087c:	4a94      	ldr	r2, [pc, #592]	@ (8000ad0 <HAL_GPIO_Init+0x2a8>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d869      	bhi.n	8000956 <HAL_GPIO_Init+0x12e>
 8000882:	4a94      	ldr	r2, [pc, #592]	@ (8000ad4 <HAL_GPIO_Init+0x2ac>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d04c      	beq.n	8000922 <HAL_GPIO_Init+0xfa>
 8000888:	4a92      	ldr	r2, [pc, #584]	@ (8000ad4 <HAL_GPIO_Init+0x2ac>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d863      	bhi.n	8000956 <HAL_GPIO_Init+0x12e>
 800088e:	4a92      	ldr	r2, [pc, #584]	@ (8000ad8 <HAL_GPIO_Init+0x2b0>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d046      	beq.n	8000922 <HAL_GPIO_Init+0xfa>
 8000894:	4a90      	ldr	r2, [pc, #576]	@ (8000ad8 <HAL_GPIO_Init+0x2b0>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d85d      	bhi.n	8000956 <HAL_GPIO_Init+0x12e>
 800089a:	2b12      	cmp	r3, #18
 800089c:	d82a      	bhi.n	80008f4 <HAL_GPIO_Init+0xcc>
 800089e:	2b12      	cmp	r3, #18
 80008a0:	d859      	bhi.n	8000956 <HAL_GPIO_Init+0x12e>
 80008a2:	a201      	add	r2, pc, #4	@ (adr r2, 80008a8 <HAL_GPIO_Init+0x80>)
 80008a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a8:	08000923 	.word	0x08000923
 80008ac:	080008fd 	.word	0x080008fd
 80008b0:	0800090f 	.word	0x0800090f
 80008b4:	08000951 	.word	0x08000951
 80008b8:	08000957 	.word	0x08000957
 80008bc:	08000957 	.word	0x08000957
 80008c0:	08000957 	.word	0x08000957
 80008c4:	08000957 	.word	0x08000957
 80008c8:	08000957 	.word	0x08000957
 80008cc:	08000957 	.word	0x08000957
 80008d0:	08000957 	.word	0x08000957
 80008d4:	08000957 	.word	0x08000957
 80008d8:	08000957 	.word	0x08000957
 80008dc:	08000957 	.word	0x08000957
 80008e0:	08000957 	.word	0x08000957
 80008e4:	08000957 	.word	0x08000957
 80008e8:	08000957 	.word	0x08000957
 80008ec:	08000905 	.word	0x08000905
 80008f0:	08000919 	.word	0x08000919
 80008f4:	4a79      	ldr	r2, [pc, #484]	@ (8000adc <HAL_GPIO_Init+0x2b4>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d013      	beq.n	8000922 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80008fa:	e02c      	b.n	8000956 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	623b      	str	r3, [r7, #32]
          break;
 8000902:	e029      	b.n	8000958 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	3304      	adds	r3, #4
 800090a:	623b      	str	r3, [r7, #32]
          break;
 800090c:	e024      	b.n	8000958 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	68db      	ldr	r3, [r3, #12]
 8000912:	3308      	adds	r3, #8
 8000914:	623b      	str	r3, [r7, #32]
          break;
 8000916:	e01f      	b.n	8000958 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	330c      	adds	r3, #12
 800091e:	623b      	str	r3, [r7, #32]
          break;
 8000920:	e01a      	b.n	8000958 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	689b      	ldr	r3, [r3, #8]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d102      	bne.n	8000930 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800092a:	2304      	movs	r3, #4
 800092c:	623b      	str	r3, [r7, #32]
          break;
 800092e:	e013      	b.n	8000958 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	689b      	ldr	r3, [r3, #8]
 8000934:	2b01      	cmp	r3, #1
 8000936:	d105      	bne.n	8000944 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000938:	2308      	movs	r3, #8
 800093a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	69fa      	ldr	r2, [r7, #28]
 8000940:	611a      	str	r2, [r3, #16]
          break;
 8000942:	e009      	b.n	8000958 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000944:	2308      	movs	r3, #8
 8000946:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	69fa      	ldr	r2, [r7, #28]
 800094c:	615a      	str	r2, [r3, #20]
          break;
 800094e:	e003      	b.n	8000958 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000950:	2300      	movs	r3, #0
 8000952:	623b      	str	r3, [r7, #32]
          break;
 8000954:	e000      	b.n	8000958 <HAL_GPIO_Init+0x130>
          break;
 8000956:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000958:	69bb      	ldr	r3, [r7, #24]
 800095a:	2bff      	cmp	r3, #255	@ 0xff
 800095c:	d801      	bhi.n	8000962 <HAL_GPIO_Init+0x13a>
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	e001      	b.n	8000966 <HAL_GPIO_Init+0x13e>
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	3304      	adds	r3, #4
 8000966:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000968:	69bb      	ldr	r3, [r7, #24]
 800096a:	2bff      	cmp	r3, #255	@ 0xff
 800096c:	d802      	bhi.n	8000974 <HAL_GPIO_Init+0x14c>
 800096e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	e002      	b.n	800097a <HAL_GPIO_Init+0x152>
 8000974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000976:	3b08      	subs	r3, #8
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	210f      	movs	r1, #15
 8000982:	693b      	ldr	r3, [r7, #16]
 8000984:	fa01 f303 	lsl.w	r3, r1, r3
 8000988:	43db      	mvns	r3, r3
 800098a:	401a      	ands	r2, r3
 800098c:	6a39      	ldr	r1, [r7, #32]
 800098e:	693b      	ldr	r3, [r7, #16]
 8000990:	fa01 f303 	lsl.w	r3, r1, r3
 8000994:	431a      	orrs	r2, r3
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	f000 80b1 	beq.w	8000b0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009a8:	4b4d      	ldr	r3, [pc, #308]	@ (8000ae0 <HAL_GPIO_Init+0x2b8>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	4a4c      	ldr	r2, [pc, #304]	@ (8000ae0 <HAL_GPIO_Init+0x2b8>)
 80009ae:	f043 0301 	orr.w	r3, r3, #1
 80009b2:	6193      	str	r3, [r2, #24]
 80009b4:	4b4a      	ldr	r3, [pc, #296]	@ (8000ae0 <HAL_GPIO_Init+0x2b8>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	f003 0301 	and.w	r3, r3, #1
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009c0:	4a48      	ldr	r2, [pc, #288]	@ (8000ae4 <HAL_GPIO_Init+0x2bc>)
 80009c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009c4:	089b      	lsrs	r3, r3, #2
 80009c6:	3302      	adds	r3, #2
 80009c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009d0:	f003 0303 	and.w	r3, r3, #3
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	220f      	movs	r2, #15
 80009d8:	fa02 f303 	lsl.w	r3, r2, r3
 80009dc:	43db      	mvns	r3, r3
 80009de:	68fa      	ldr	r2, [r7, #12]
 80009e0:	4013      	ands	r3, r2
 80009e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	4a40      	ldr	r2, [pc, #256]	@ (8000ae8 <HAL_GPIO_Init+0x2c0>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d013      	beq.n	8000a14 <HAL_GPIO_Init+0x1ec>
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4a3f      	ldr	r2, [pc, #252]	@ (8000aec <HAL_GPIO_Init+0x2c4>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d00d      	beq.n	8000a10 <HAL_GPIO_Init+0x1e8>
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4a3e      	ldr	r2, [pc, #248]	@ (8000af0 <HAL_GPIO_Init+0x2c8>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d007      	beq.n	8000a0c <HAL_GPIO_Init+0x1e4>
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4a3d      	ldr	r2, [pc, #244]	@ (8000af4 <HAL_GPIO_Init+0x2cc>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d101      	bne.n	8000a08 <HAL_GPIO_Init+0x1e0>
 8000a04:	2303      	movs	r3, #3
 8000a06:	e006      	b.n	8000a16 <HAL_GPIO_Init+0x1ee>
 8000a08:	2304      	movs	r3, #4
 8000a0a:	e004      	b.n	8000a16 <HAL_GPIO_Init+0x1ee>
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	e002      	b.n	8000a16 <HAL_GPIO_Init+0x1ee>
 8000a10:	2301      	movs	r3, #1
 8000a12:	e000      	b.n	8000a16 <HAL_GPIO_Init+0x1ee>
 8000a14:	2300      	movs	r3, #0
 8000a16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a18:	f002 0203 	and.w	r2, r2, #3
 8000a1c:	0092      	lsls	r2, r2, #2
 8000a1e:	4093      	lsls	r3, r2
 8000a20:	68fa      	ldr	r2, [r7, #12]
 8000a22:	4313      	orrs	r3, r2
 8000a24:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a26:	492f      	ldr	r1, [pc, #188]	@ (8000ae4 <HAL_GPIO_Init+0x2bc>)
 8000a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a2a:	089b      	lsrs	r3, r3, #2
 8000a2c:	3302      	adds	r3, #2
 8000a2e:	68fa      	ldr	r2, [r7, #12]
 8000a30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d006      	beq.n	8000a4e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a40:	4b2d      	ldr	r3, [pc, #180]	@ (8000af8 <HAL_GPIO_Init+0x2d0>)
 8000a42:	689a      	ldr	r2, [r3, #8]
 8000a44:	492c      	ldr	r1, [pc, #176]	@ (8000af8 <HAL_GPIO_Init+0x2d0>)
 8000a46:	69bb      	ldr	r3, [r7, #24]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	608b      	str	r3, [r1, #8]
 8000a4c:	e006      	b.n	8000a5c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a4e:	4b2a      	ldr	r3, [pc, #168]	@ (8000af8 <HAL_GPIO_Init+0x2d0>)
 8000a50:	689a      	ldr	r2, [r3, #8]
 8000a52:	69bb      	ldr	r3, [r7, #24]
 8000a54:	43db      	mvns	r3, r3
 8000a56:	4928      	ldr	r1, [pc, #160]	@ (8000af8 <HAL_GPIO_Init+0x2d0>)
 8000a58:	4013      	ands	r3, r2
 8000a5a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d006      	beq.n	8000a76 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a68:	4b23      	ldr	r3, [pc, #140]	@ (8000af8 <HAL_GPIO_Init+0x2d0>)
 8000a6a:	68da      	ldr	r2, [r3, #12]
 8000a6c:	4922      	ldr	r1, [pc, #136]	@ (8000af8 <HAL_GPIO_Init+0x2d0>)
 8000a6e:	69bb      	ldr	r3, [r7, #24]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	60cb      	str	r3, [r1, #12]
 8000a74:	e006      	b.n	8000a84 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a76:	4b20      	ldr	r3, [pc, #128]	@ (8000af8 <HAL_GPIO_Init+0x2d0>)
 8000a78:	68da      	ldr	r2, [r3, #12]
 8000a7a:	69bb      	ldr	r3, [r7, #24]
 8000a7c:	43db      	mvns	r3, r3
 8000a7e:	491e      	ldr	r1, [pc, #120]	@ (8000af8 <HAL_GPIO_Init+0x2d0>)
 8000a80:	4013      	ands	r3, r2
 8000a82:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d006      	beq.n	8000a9e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a90:	4b19      	ldr	r3, [pc, #100]	@ (8000af8 <HAL_GPIO_Init+0x2d0>)
 8000a92:	685a      	ldr	r2, [r3, #4]
 8000a94:	4918      	ldr	r1, [pc, #96]	@ (8000af8 <HAL_GPIO_Init+0x2d0>)
 8000a96:	69bb      	ldr	r3, [r7, #24]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	604b      	str	r3, [r1, #4]
 8000a9c:	e006      	b.n	8000aac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a9e:	4b16      	ldr	r3, [pc, #88]	@ (8000af8 <HAL_GPIO_Init+0x2d0>)
 8000aa0:	685a      	ldr	r2, [r3, #4]
 8000aa2:	69bb      	ldr	r3, [r7, #24]
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	4914      	ldr	r1, [pc, #80]	@ (8000af8 <HAL_GPIO_Init+0x2d0>)
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d021      	beq.n	8000afc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8000af8 <HAL_GPIO_Init+0x2d0>)
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	490e      	ldr	r1, [pc, #56]	@ (8000af8 <HAL_GPIO_Init+0x2d0>)
 8000abe:	69bb      	ldr	r3, [r7, #24]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	600b      	str	r3, [r1, #0]
 8000ac4:	e021      	b.n	8000b0a <HAL_GPIO_Init+0x2e2>
 8000ac6:	bf00      	nop
 8000ac8:	10320000 	.word	0x10320000
 8000acc:	10310000 	.word	0x10310000
 8000ad0:	10220000 	.word	0x10220000
 8000ad4:	10210000 	.word	0x10210000
 8000ad8:	10120000 	.word	0x10120000
 8000adc:	10110000 	.word	0x10110000
 8000ae0:	40021000 	.word	0x40021000
 8000ae4:	40010000 	.word	0x40010000
 8000ae8:	40010800 	.word	0x40010800
 8000aec:	40010c00 	.word	0x40010c00
 8000af0:	40011000 	.word	0x40011000
 8000af4:	40011400 	.word	0x40011400
 8000af8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000afc:	4b0b      	ldr	r3, [pc, #44]	@ (8000b2c <HAL_GPIO_Init+0x304>)
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	43db      	mvns	r3, r3
 8000b04:	4909      	ldr	r1, [pc, #36]	@ (8000b2c <HAL_GPIO_Init+0x304>)
 8000b06:	4013      	ands	r3, r2
 8000b08:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b16:	fa22 f303 	lsr.w	r3, r2, r3
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	f47f ae8e 	bne.w	800083c <HAL_GPIO_Init+0x14>
  }
}
 8000b20:	bf00      	nop
 8000b22:	bf00      	nop
 8000b24:	372c      	adds	r7, #44	@ 0x2c
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr
 8000b2c:	40010400 	.word	0x40010400

08000b30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	460b      	mov	r3, r1
 8000b3a:	807b      	strh	r3, [r7, #2]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b40:	787b      	ldrb	r3, [r7, #1]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d003      	beq.n	8000b4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b46:	887a      	ldrh	r2, [r7, #2]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b4c:	e003      	b.n	8000b56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b4e:	887b      	ldrh	r3, [r7, #2]
 8000b50:	041a      	lsls	r2, r3, #16
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	611a      	str	r2, [r3, #16]
}
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr

08000b60 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	460b      	mov	r3, r1
 8000b6a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b72:	887a      	ldrh	r2, [r7, #2]
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	4013      	ands	r3, r2
 8000b78:	041a      	lsls	r2, r3, #16
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	43d9      	mvns	r1, r3
 8000b7e:	887b      	ldrh	r3, [r7, #2]
 8000b80:	400b      	ands	r3, r1
 8000b82:	431a      	orrs	r2, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	611a      	str	r2, [r3, #16]
}
 8000b88:	bf00      	nop
 8000b8a:	3714      	adds	r7, #20
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr
	...

08000b94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d101      	bne.n	8000ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e272      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	f000 8087 	beq.w	8000cc2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bb4:	4b92      	ldr	r3, [pc, #584]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f003 030c 	and.w	r3, r3, #12
 8000bbc:	2b04      	cmp	r3, #4
 8000bbe:	d00c      	beq.n	8000bda <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bc0:	4b8f      	ldr	r3, [pc, #572]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f003 030c 	and.w	r3, r3, #12
 8000bc8:	2b08      	cmp	r3, #8
 8000bca:	d112      	bne.n	8000bf2 <HAL_RCC_OscConfig+0x5e>
 8000bcc:	4b8c      	ldr	r3, [pc, #560]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000bd8:	d10b      	bne.n	8000bf2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bda:	4b89      	ldr	r3, [pc, #548]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d06c      	beq.n	8000cc0 <HAL_RCC_OscConfig+0x12c>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d168      	bne.n	8000cc0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e24c      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000bfa:	d106      	bne.n	8000c0a <HAL_RCC_OscConfig+0x76>
 8000bfc:	4b80      	ldr	r3, [pc, #512]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a7f      	ldr	r2, [pc, #508]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c06:	6013      	str	r3, [r2, #0]
 8000c08:	e02e      	b.n	8000c68 <HAL_RCC_OscConfig+0xd4>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d10c      	bne.n	8000c2c <HAL_RCC_OscConfig+0x98>
 8000c12:	4b7b      	ldr	r3, [pc, #492]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a7a      	ldr	r2, [pc, #488]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c1c:	6013      	str	r3, [r2, #0]
 8000c1e:	4b78      	ldr	r3, [pc, #480]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a77      	ldr	r2, [pc, #476]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c28:	6013      	str	r3, [r2, #0]
 8000c2a:	e01d      	b.n	8000c68 <HAL_RCC_OscConfig+0xd4>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000c34:	d10c      	bne.n	8000c50 <HAL_RCC_OscConfig+0xbc>
 8000c36:	4b72      	ldr	r3, [pc, #456]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a71      	ldr	r2, [pc, #452]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c40:	6013      	str	r3, [r2, #0]
 8000c42:	4b6f      	ldr	r3, [pc, #444]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a6e      	ldr	r2, [pc, #440]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c4c:	6013      	str	r3, [r2, #0]
 8000c4e:	e00b      	b.n	8000c68 <HAL_RCC_OscConfig+0xd4>
 8000c50:	4b6b      	ldr	r3, [pc, #428]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a6a      	ldr	r2, [pc, #424]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c5a:	6013      	str	r3, [r2, #0]
 8000c5c:	4b68      	ldr	r3, [pc, #416]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a67      	ldr	r2, [pc, #412]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d013      	beq.n	8000c98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c70:	f7ff fccc 	bl	800060c <HAL_GetTick>
 8000c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c76:	e008      	b.n	8000c8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c78:	f7ff fcc8 	bl	800060c <HAL_GetTick>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	2b64      	cmp	r3, #100	@ 0x64
 8000c84:	d901      	bls.n	8000c8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c86:	2303      	movs	r3, #3
 8000c88:	e200      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c8a:	4b5d      	ldr	r3, [pc, #372]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d0f0      	beq.n	8000c78 <HAL_RCC_OscConfig+0xe4>
 8000c96:	e014      	b.n	8000cc2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c98:	f7ff fcb8 	bl	800060c <HAL_GetTick>
 8000c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c9e:	e008      	b.n	8000cb2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ca0:	f7ff fcb4 	bl	800060c <HAL_GetTick>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	2b64      	cmp	r3, #100	@ 0x64
 8000cac:	d901      	bls.n	8000cb2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	e1ec      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cb2:	4b53      	ldr	r3, [pc, #332]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d1f0      	bne.n	8000ca0 <HAL_RCC_OscConfig+0x10c>
 8000cbe:	e000      	b.n	8000cc2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f003 0302 	and.w	r3, r3, #2
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d063      	beq.n	8000d96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cce:	4b4c      	ldr	r3, [pc, #304]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f003 030c 	and.w	r3, r3, #12
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d00b      	beq.n	8000cf2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000cda:	4b49      	ldr	r3, [pc, #292]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f003 030c 	and.w	r3, r3, #12
 8000ce2:	2b08      	cmp	r3, #8
 8000ce4:	d11c      	bne.n	8000d20 <HAL_RCC_OscConfig+0x18c>
 8000ce6:	4b46      	ldr	r3, [pc, #280]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d116      	bne.n	8000d20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cf2:	4b43      	ldr	r3, [pc, #268]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f003 0302 	and.w	r3, r3, #2
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d005      	beq.n	8000d0a <HAL_RCC_OscConfig+0x176>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	691b      	ldr	r3, [r3, #16]
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d001      	beq.n	8000d0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e1c0      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d0a:	4b3d      	ldr	r3, [pc, #244]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	695b      	ldr	r3, [r3, #20]
 8000d16:	00db      	lsls	r3, r3, #3
 8000d18:	4939      	ldr	r1, [pc, #228]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d1e:	e03a      	b.n	8000d96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	691b      	ldr	r3, [r3, #16]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d020      	beq.n	8000d6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d28:	4b36      	ldr	r3, [pc, #216]	@ (8000e04 <HAL_RCC_OscConfig+0x270>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d2e:	f7ff fc6d 	bl	800060c <HAL_GetTick>
 8000d32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d34:	e008      	b.n	8000d48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d36:	f7ff fc69 	bl	800060c <HAL_GetTick>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	1ad3      	subs	r3, r2, r3
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	d901      	bls.n	8000d48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d44:	2303      	movs	r3, #3
 8000d46:	e1a1      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d48:	4b2d      	ldr	r3, [pc, #180]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f003 0302 	and.w	r3, r3, #2
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d0f0      	beq.n	8000d36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d54:	4b2a      	ldr	r3, [pc, #168]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	695b      	ldr	r3, [r3, #20]
 8000d60:	00db      	lsls	r3, r3, #3
 8000d62:	4927      	ldr	r1, [pc, #156]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000d64:	4313      	orrs	r3, r2
 8000d66:	600b      	str	r3, [r1, #0]
 8000d68:	e015      	b.n	8000d96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d6a:	4b26      	ldr	r3, [pc, #152]	@ (8000e04 <HAL_RCC_OscConfig+0x270>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d70:	f7ff fc4c 	bl	800060c <HAL_GetTick>
 8000d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d76:	e008      	b.n	8000d8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d78:	f7ff fc48 	bl	800060c <HAL_GetTick>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d901      	bls.n	8000d8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d86:	2303      	movs	r3, #3
 8000d88:	e180      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d8a:	4b1d      	ldr	r3, [pc, #116]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d1f0      	bne.n	8000d78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f003 0308 	and.w	r3, r3, #8
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d03a      	beq.n	8000e18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	699b      	ldr	r3, [r3, #24]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d019      	beq.n	8000dde <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000daa:	4b17      	ldr	r3, [pc, #92]	@ (8000e08 <HAL_RCC_OscConfig+0x274>)
 8000dac:	2201      	movs	r2, #1
 8000dae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000db0:	f7ff fc2c 	bl	800060c <HAL_GetTick>
 8000db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000db6:	e008      	b.n	8000dca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000db8:	f7ff fc28 	bl	800060c <HAL_GetTick>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d901      	bls.n	8000dca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	e160      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dca:	4b0d      	ldr	r3, [pc, #52]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d0f0      	beq.n	8000db8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000dd6:	2001      	movs	r0, #1
 8000dd8:	f000 faea 	bl	80013b0 <RCC_Delay>
 8000ddc:	e01c      	b.n	8000e18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dde:	4b0a      	ldr	r3, [pc, #40]	@ (8000e08 <HAL_RCC_OscConfig+0x274>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000de4:	f7ff fc12 	bl	800060c <HAL_GetTick>
 8000de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dea:	e00f      	b.n	8000e0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dec:	f7ff fc0e 	bl	800060c <HAL_GetTick>
 8000df0:	4602      	mov	r2, r0
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d908      	bls.n	8000e0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	e146      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
 8000dfe:	bf00      	nop
 8000e00:	40021000 	.word	0x40021000
 8000e04:	42420000 	.word	0x42420000
 8000e08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e0c:	4b92      	ldr	r3, [pc, #584]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e10:	f003 0302 	and.w	r3, r3, #2
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d1e9      	bne.n	8000dec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f003 0304 	and.w	r3, r3, #4
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	f000 80a6 	beq.w	8000f72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e26:	2300      	movs	r3, #0
 8000e28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e2a:	4b8b      	ldr	r3, [pc, #556]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000e2c:	69db      	ldr	r3, [r3, #28]
 8000e2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d10d      	bne.n	8000e52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e36:	4b88      	ldr	r3, [pc, #544]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000e38:	69db      	ldr	r3, [r3, #28]
 8000e3a:	4a87      	ldr	r2, [pc, #540]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000e3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e40:	61d3      	str	r3, [r2, #28]
 8000e42:	4b85      	ldr	r3, [pc, #532]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000e44:	69db      	ldr	r3, [r3, #28]
 8000e46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e52:	4b82      	ldr	r3, [pc, #520]	@ (800105c <HAL_RCC_OscConfig+0x4c8>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d118      	bne.n	8000e90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e5e:	4b7f      	ldr	r3, [pc, #508]	@ (800105c <HAL_RCC_OscConfig+0x4c8>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a7e      	ldr	r2, [pc, #504]	@ (800105c <HAL_RCC_OscConfig+0x4c8>)
 8000e64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e6a:	f7ff fbcf 	bl	800060c <HAL_GetTick>
 8000e6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e70:	e008      	b.n	8000e84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e72:	f7ff fbcb 	bl	800060c <HAL_GetTick>
 8000e76:	4602      	mov	r2, r0
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	2b64      	cmp	r3, #100	@ 0x64
 8000e7e:	d901      	bls.n	8000e84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e80:	2303      	movs	r3, #3
 8000e82:	e103      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e84:	4b75      	ldr	r3, [pc, #468]	@ (800105c <HAL_RCC_OscConfig+0x4c8>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d0f0      	beq.n	8000e72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d106      	bne.n	8000ea6 <HAL_RCC_OscConfig+0x312>
 8000e98:	4b6f      	ldr	r3, [pc, #444]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000e9a:	6a1b      	ldr	r3, [r3, #32]
 8000e9c:	4a6e      	ldr	r2, [pc, #440]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000e9e:	f043 0301 	orr.w	r3, r3, #1
 8000ea2:	6213      	str	r3, [r2, #32]
 8000ea4:	e02d      	b.n	8000f02 <HAL_RCC_OscConfig+0x36e>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	68db      	ldr	r3, [r3, #12]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d10c      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x334>
 8000eae:	4b6a      	ldr	r3, [pc, #424]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000eb0:	6a1b      	ldr	r3, [r3, #32]
 8000eb2:	4a69      	ldr	r2, [pc, #420]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000eb4:	f023 0301 	bic.w	r3, r3, #1
 8000eb8:	6213      	str	r3, [r2, #32]
 8000eba:	4b67      	ldr	r3, [pc, #412]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000ebc:	6a1b      	ldr	r3, [r3, #32]
 8000ebe:	4a66      	ldr	r2, [pc, #408]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000ec0:	f023 0304 	bic.w	r3, r3, #4
 8000ec4:	6213      	str	r3, [r2, #32]
 8000ec6:	e01c      	b.n	8000f02 <HAL_RCC_OscConfig+0x36e>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	2b05      	cmp	r3, #5
 8000ece:	d10c      	bne.n	8000eea <HAL_RCC_OscConfig+0x356>
 8000ed0:	4b61      	ldr	r3, [pc, #388]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000ed2:	6a1b      	ldr	r3, [r3, #32]
 8000ed4:	4a60      	ldr	r2, [pc, #384]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000ed6:	f043 0304 	orr.w	r3, r3, #4
 8000eda:	6213      	str	r3, [r2, #32]
 8000edc:	4b5e      	ldr	r3, [pc, #376]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000ede:	6a1b      	ldr	r3, [r3, #32]
 8000ee0:	4a5d      	ldr	r2, [pc, #372]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000ee2:	f043 0301 	orr.w	r3, r3, #1
 8000ee6:	6213      	str	r3, [r2, #32]
 8000ee8:	e00b      	b.n	8000f02 <HAL_RCC_OscConfig+0x36e>
 8000eea:	4b5b      	ldr	r3, [pc, #364]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000eec:	6a1b      	ldr	r3, [r3, #32]
 8000eee:	4a5a      	ldr	r2, [pc, #360]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000ef0:	f023 0301 	bic.w	r3, r3, #1
 8000ef4:	6213      	str	r3, [r2, #32]
 8000ef6:	4b58      	ldr	r3, [pc, #352]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000ef8:	6a1b      	ldr	r3, [r3, #32]
 8000efa:	4a57      	ldr	r2, [pc, #348]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000efc:	f023 0304 	bic.w	r3, r3, #4
 8000f00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d015      	beq.n	8000f36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f0a:	f7ff fb7f 	bl	800060c <HAL_GetTick>
 8000f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f10:	e00a      	b.n	8000f28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f12:	f7ff fb7b 	bl	800060c <HAL_GetTick>
 8000f16:	4602      	mov	r2, r0
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d901      	bls.n	8000f28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f24:	2303      	movs	r3, #3
 8000f26:	e0b1      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f28:	4b4b      	ldr	r3, [pc, #300]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000f2a:	6a1b      	ldr	r3, [r3, #32]
 8000f2c:	f003 0302 	and.w	r3, r3, #2
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d0ee      	beq.n	8000f12 <HAL_RCC_OscConfig+0x37e>
 8000f34:	e014      	b.n	8000f60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f36:	f7ff fb69 	bl	800060c <HAL_GetTick>
 8000f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f3c:	e00a      	b.n	8000f54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f3e:	f7ff fb65 	bl	800060c <HAL_GetTick>
 8000f42:	4602      	mov	r2, r0
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d901      	bls.n	8000f54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f50:	2303      	movs	r3, #3
 8000f52:	e09b      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f54:	4b40      	ldr	r3, [pc, #256]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000f56:	6a1b      	ldr	r3, [r3, #32]
 8000f58:	f003 0302 	and.w	r3, r3, #2
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d1ee      	bne.n	8000f3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f60:	7dfb      	ldrb	r3, [r7, #23]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d105      	bne.n	8000f72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f66:	4b3c      	ldr	r3, [pc, #240]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	4a3b      	ldr	r2, [pc, #236]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000f6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000f70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	f000 8087 	beq.w	800108a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f7c:	4b36      	ldr	r3, [pc, #216]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 030c 	and.w	r3, r3, #12
 8000f84:	2b08      	cmp	r3, #8
 8000f86:	d061      	beq.n	800104c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	69db      	ldr	r3, [r3, #28]
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d146      	bne.n	800101e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f90:	4b33      	ldr	r3, [pc, #204]	@ (8001060 <HAL_RCC_OscConfig+0x4cc>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f96:	f7ff fb39 	bl	800060c <HAL_GetTick>
 8000f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f9c:	e008      	b.n	8000fb0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f9e:	f7ff fb35 	bl	800060c <HAL_GetTick>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d901      	bls.n	8000fb0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000fac:	2303      	movs	r3, #3
 8000fae:	e06d      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fb0:	4b29      	ldr	r3, [pc, #164]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d1f0      	bne.n	8000f9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6a1b      	ldr	r3, [r3, #32]
 8000fc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fc4:	d108      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fc6:	4b24      	ldr	r3, [pc, #144]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	4921      	ldr	r1, [pc, #132]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fd8:	4b1f      	ldr	r3, [pc, #124]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6a19      	ldr	r1, [r3, #32]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fe8:	430b      	orrs	r3, r1
 8000fea:	491b      	ldr	r1, [pc, #108]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000fec:	4313      	orrs	r3, r2
 8000fee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ff0:	4b1b      	ldr	r3, [pc, #108]	@ (8001060 <HAL_RCC_OscConfig+0x4cc>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff6:	f7ff fb09 	bl	800060c <HAL_GetTick>
 8000ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ffc:	e008      	b.n	8001010 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ffe:	f7ff fb05 	bl	800060c <HAL_GetTick>
 8001002:	4602      	mov	r2, r0
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	2b02      	cmp	r3, #2
 800100a:	d901      	bls.n	8001010 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800100c:	2303      	movs	r3, #3
 800100e:	e03d      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001010:	4b11      	ldr	r3, [pc, #68]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d0f0      	beq.n	8000ffe <HAL_RCC_OscConfig+0x46a>
 800101c:	e035      	b.n	800108a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800101e:	4b10      	ldr	r3, [pc, #64]	@ (8001060 <HAL_RCC_OscConfig+0x4cc>)
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001024:	f7ff faf2 	bl	800060c <HAL_GetTick>
 8001028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800102a:	e008      	b.n	800103e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800102c:	f7ff faee 	bl	800060c <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	2b02      	cmp	r3, #2
 8001038:	d901      	bls.n	800103e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e026      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800103e:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1f0      	bne.n	800102c <HAL_RCC_OscConfig+0x498>
 800104a:	e01e      	b.n	800108a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	69db      	ldr	r3, [r3, #28]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d107      	bne.n	8001064 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001054:	2301      	movs	r3, #1
 8001056:	e019      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
 8001058:	40021000 	.word	0x40021000
 800105c:	40007000 	.word	0x40007000
 8001060:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001064:	4b0b      	ldr	r3, [pc, #44]	@ (8001094 <HAL_RCC_OscConfig+0x500>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a1b      	ldr	r3, [r3, #32]
 8001074:	429a      	cmp	r2, r3
 8001076:	d106      	bne.n	8001086 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001082:	429a      	cmp	r2, r3
 8001084:	d001      	beq.n	800108a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e000      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	3718      	adds	r7, #24
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40021000 	.word	0x40021000

08001098 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d101      	bne.n	80010ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e0d0      	b.n	800124e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010ac:	4b6a      	ldr	r3, [pc, #424]	@ (8001258 <HAL_RCC_ClockConfig+0x1c0>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 0307 	and.w	r3, r3, #7
 80010b4:	683a      	ldr	r2, [r7, #0]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d910      	bls.n	80010dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ba:	4b67      	ldr	r3, [pc, #412]	@ (8001258 <HAL_RCC_ClockConfig+0x1c0>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f023 0207 	bic.w	r2, r3, #7
 80010c2:	4965      	ldr	r1, [pc, #404]	@ (8001258 <HAL_RCC_ClockConfig+0x1c0>)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ca:	4b63      	ldr	r3, [pc, #396]	@ (8001258 <HAL_RCC_ClockConfig+0x1c0>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	683a      	ldr	r2, [r7, #0]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d001      	beq.n	80010dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e0b8      	b.n	800124e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 0302 	and.w	r3, r3, #2
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d020      	beq.n	800112a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 0304 	and.w	r3, r3, #4
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d005      	beq.n	8001100 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010f4:	4b59      	ldr	r3, [pc, #356]	@ (800125c <HAL_RCC_ClockConfig+0x1c4>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	4a58      	ldr	r2, [pc, #352]	@ (800125c <HAL_RCC_ClockConfig+0x1c4>)
 80010fa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80010fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 0308 	and.w	r3, r3, #8
 8001108:	2b00      	cmp	r3, #0
 800110a:	d005      	beq.n	8001118 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800110c:	4b53      	ldr	r3, [pc, #332]	@ (800125c <HAL_RCC_ClockConfig+0x1c4>)
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	4a52      	ldr	r2, [pc, #328]	@ (800125c <HAL_RCC_ClockConfig+0x1c4>)
 8001112:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001116:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001118:	4b50      	ldr	r3, [pc, #320]	@ (800125c <HAL_RCC_ClockConfig+0x1c4>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	494d      	ldr	r1, [pc, #308]	@ (800125c <HAL_RCC_ClockConfig+0x1c4>)
 8001126:	4313      	orrs	r3, r2
 8001128:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	2b00      	cmp	r3, #0
 8001134:	d040      	beq.n	80011b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d107      	bne.n	800114e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800113e:	4b47      	ldr	r3, [pc, #284]	@ (800125c <HAL_RCC_ClockConfig+0x1c4>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d115      	bne.n	8001176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e07f      	b.n	800124e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	2b02      	cmp	r3, #2
 8001154:	d107      	bne.n	8001166 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001156:	4b41      	ldr	r3, [pc, #260]	@ (800125c <HAL_RCC_ClockConfig+0x1c4>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d109      	bne.n	8001176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e073      	b.n	800124e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001166:	4b3d      	ldr	r3, [pc, #244]	@ (800125c <HAL_RCC_ClockConfig+0x1c4>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	2b00      	cmp	r3, #0
 8001170:	d101      	bne.n	8001176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e06b      	b.n	800124e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001176:	4b39      	ldr	r3, [pc, #228]	@ (800125c <HAL_RCC_ClockConfig+0x1c4>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f023 0203 	bic.w	r2, r3, #3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	4936      	ldr	r1, [pc, #216]	@ (800125c <HAL_RCC_ClockConfig+0x1c4>)
 8001184:	4313      	orrs	r3, r2
 8001186:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001188:	f7ff fa40 	bl	800060c <HAL_GetTick>
 800118c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800118e:	e00a      	b.n	80011a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001190:	f7ff fa3c 	bl	800060c <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800119e:	4293      	cmp	r3, r2
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e053      	b.n	800124e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011a6:	4b2d      	ldr	r3, [pc, #180]	@ (800125c <HAL_RCC_ClockConfig+0x1c4>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 020c 	and.w	r2, r3, #12
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d1eb      	bne.n	8001190 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011b8:	4b27      	ldr	r3, [pc, #156]	@ (8001258 <HAL_RCC_ClockConfig+0x1c0>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0307 	and.w	r3, r3, #7
 80011c0:	683a      	ldr	r2, [r7, #0]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d210      	bcs.n	80011e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011c6:	4b24      	ldr	r3, [pc, #144]	@ (8001258 <HAL_RCC_ClockConfig+0x1c0>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f023 0207 	bic.w	r2, r3, #7
 80011ce:	4922      	ldr	r1, [pc, #136]	@ (8001258 <HAL_RCC_ClockConfig+0x1c0>)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011d6:	4b20      	ldr	r3, [pc, #128]	@ (8001258 <HAL_RCC_ClockConfig+0x1c0>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	683a      	ldr	r2, [r7, #0]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d001      	beq.n	80011e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e032      	b.n	800124e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0304 	and.w	r3, r3, #4
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d008      	beq.n	8001206 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011f4:	4b19      	ldr	r3, [pc, #100]	@ (800125c <HAL_RCC_ClockConfig+0x1c4>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	4916      	ldr	r1, [pc, #88]	@ (800125c <HAL_RCC_ClockConfig+0x1c4>)
 8001202:	4313      	orrs	r3, r2
 8001204:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0308 	and.w	r3, r3, #8
 800120e:	2b00      	cmp	r3, #0
 8001210:	d009      	beq.n	8001226 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001212:	4b12      	ldr	r3, [pc, #72]	@ (800125c <HAL_RCC_ClockConfig+0x1c4>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	00db      	lsls	r3, r3, #3
 8001220:	490e      	ldr	r1, [pc, #56]	@ (800125c <HAL_RCC_ClockConfig+0x1c4>)
 8001222:	4313      	orrs	r3, r2
 8001224:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001226:	f000 f821 	bl	800126c <HAL_RCC_GetSysClockFreq>
 800122a:	4602      	mov	r2, r0
 800122c:	4b0b      	ldr	r3, [pc, #44]	@ (800125c <HAL_RCC_ClockConfig+0x1c4>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	091b      	lsrs	r3, r3, #4
 8001232:	f003 030f 	and.w	r3, r3, #15
 8001236:	490a      	ldr	r1, [pc, #40]	@ (8001260 <HAL_RCC_ClockConfig+0x1c8>)
 8001238:	5ccb      	ldrb	r3, [r1, r3]
 800123a:	fa22 f303 	lsr.w	r3, r2, r3
 800123e:	4a09      	ldr	r2, [pc, #36]	@ (8001264 <HAL_RCC_ClockConfig+0x1cc>)
 8001240:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001242:	4b09      	ldr	r3, [pc, #36]	@ (8001268 <HAL_RCC_ClockConfig+0x1d0>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff f8ea 	bl	8000420 <HAL_InitTick>

  return HAL_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40022000 	.word	0x40022000
 800125c:	40021000 	.word	0x40021000
 8001260:	08004590 	.word	0x08004590
 8001264:	20000000 	.word	0x20000000
 8001268:	20000004 	.word	0x20000004

0800126c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800126c:	b480      	push	{r7}
 800126e:	b087      	sub	sp, #28
 8001270:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	2300      	movs	r3, #0
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
 800127e:	2300      	movs	r3, #0
 8001280:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001286:	4b1e      	ldr	r3, [pc, #120]	@ (8001300 <HAL_RCC_GetSysClockFreq+0x94>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f003 030c 	and.w	r3, r3, #12
 8001292:	2b04      	cmp	r3, #4
 8001294:	d002      	beq.n	800129c <HAL_RCC_GetSysClockFreq+0x30>
 8001296:	2b08      	cmp	r3, #8
 8001298:	d003      	beq.n	80012a2 <HAL_RCC_GetSysClockFreq+0x36>
 800129a:	e027      	b.n	80012ec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800129c:	4b19      	ldr	r3, [pc, #100]	@ (8001304 <HAL_RCC_GetSysClockFreq+0x98>)
 800129e:	613b      	str	r3, [r7, #16]
      break;
 80012a0:	e027      	b.n	80012f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	0c9b      	lsrs	r3, r3, #18
 80012a6:	f003 030f 	and.w	r3, r3, #15
 80012aa:	4a17      	ldr	r2, [pc, #92]	@ (8001308 <HAL_RCC_GetSysClockFreq+0x9c>)
 80012ac:	5cd3      	ldrb	r3, [r2, r3]
 80012ae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d010      	beq.n	80012dc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012ba:	4b11      	ldr	r3, [pc, #68]	@ (8001300 <HAL_RCC_GetSysClockFreq+0x94>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	0c5b      	lsrs	r3, r3, #17
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	4a11      	ldr	r2, [pc, #68]	@ (800130c <HAL_RCC_GetSysClockFreq+0xa0>)
 80012c6:	5cd3      	ldrb	r3, [r2, r3]
 80012c8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001304 <HAL_RCC_GetSysClockFreq+0x98>)
 80012ce:	fb03 f202 	mul.w	r2, r3, r2
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d8:	617b      	str	r3, [r7, #20]
 80012da:	e004      	b.n	80012e6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a0c      	ldr	r2, [pc, #48]	@ (8001310 <HAL_RCC_GetSysClockFreq+0xa4>)
 80012e0:	fb02 f303 	mul.w	r3, r2, r3
 80012e4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	613b      	str	r3, [r7, #16]
      break;
 80012ea:	e002      	b.n	80012f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80012ec:	4b05      	ldr	r3, [pc, #20]	@ (8001304 <HAL_RCC_GetSysClockFreq+0x98>)
 80012ee:	613b      	str	r3, [r7, #16]
      break;
 80012f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012f2:	693b      	ldr	r3, [r7, #16]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	371c      	adds	r7, #28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	40021000 	.word	0x40021000
 8001304:	007a1200 	.word	0x007a1200
 8001308:	080045a8 	.word	0x080045a8
 800130c:	080045b8 	.word	0x080045b8
 8001310:	003d0900 	.word	0x003d0900

08001314 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001318:	4b02      	ldr	r3, [pc, #8]	@ (8001324 <HAL_RCC_GetHCLKFreq+0x10>)
 800131a:	681b      	ldr	r3, [r3, #0]
}
 800131c:	4618      	mov	r0, r3
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr
 8001324:	20000000 	.word	0x20000000

08001328 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800132c:	f7ff fff2 	bl	8001314 <HAL_RCC_GetHCLKFreq>
 8001330:	4602      	mov	r2, r0
 8001332:	4b05      	ldr	r3, [pc, #20]	@ (8001348 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	0a1b      	lsrs	r3, r3, #8
 8001338:	f003 0307 	and.w	r3, r3, #7
 800133c:	4903      	ldr	r1, [pc, #12]	@ (800134c <HAL_RCC_GetPCLK1Freq+0x24>)
 800133e:	5ccb      	ldrb	r3, [r1, r3]
 8001340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001344:	4618      	mov	r0, r3
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40021000 	.word	0x40021000
 800134c:	080045a0 	.word	0x080045a0

08001350 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	220f      	movs	r2, #15
 800135e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001360:	4b11      	ldr	r3, [pc, #68]	@ (80013a8 <HAL_RCC_GetClockConfig+0x58>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 0203 	and.w	r2, r3, #3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800136c:	4b0e      	ldr	r3, [pc, #56]	@ (80013a8 <HAL_RCC_GetClockConfig+0x58>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001378:	4b0b      	ldr	r3, [pc, #44]	@ (80013a8 <HAL_RCC_GetClockConfig+0x58>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001384:	4b08      	ldr	r3, [pc, #32]	@ (80013a8 <HAL_RCC_GetClockConfig+0x58>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	08db      	lsrs	r3, r3, #3
 800138a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001392:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <HAL_RCC_GetClockConfig+0x5c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0207 	and.w	r2, r3, #7
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr
 80013a8:	40021000 	.word	0x40021000
 80013ac:	40022000 	.word	0x40022000

080013b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80013b8:	4b0a      	ldr	r3, [pc, #40]	@ (80013e4 <RCC_Delay+0x34>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a0a      	ldr	r2, [pc, #40]	@ (80013e8 <RCC_Delay+0x38>)
 80013be:	fba2 2303 	umull	r2, r3, r2, r3
 80013c2:	0a5b      	lsrs	r3, r3, #9
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	fb02 f303 	mul.w	r3, r2, r3
 80013ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80013cc:	bf00      	nop
  }
  while (Delay --);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	1e5a      	subs	r2, r3, #1
 80013d2:	60fa      	str	r2, [r7, #12]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d1f9      	bne.n	80013cc <RCC_Delay+0x1c>
}
 80013d8:	bf00      	nop
 80013da:	bf00      	nop
 80013dc:	3714      	adds	r7, #20
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr
 80013e4:	20000000 	.word	0x20000000
 80013e8:	10624dd3 	.word	0x10624dd3

080013ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e041      	b.n	8001482 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001404:	b2db      	uxtb	r3, r3
 8001406:	2b00      	cmp	r3, #0
 8001408:	d106      	bne.n	8001418 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f000 f839 	bl	800148a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2202      	movs	r2, #2
 800141c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3304      	adds	r3, #4
 8001428:	4619      	mov	r1, r3
 800142a:	4610      	mov	r0, r2
 800142c:	f000 f9b4 	bl	8001798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2201      	movs	r2, #1
 8001434:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2201      	movs	r2, #1
 800143c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2201      	movs	r2, #1
 8001444:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2201      	movs	r2, #1
 800144c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2201      	movs	r2, #1
 8001454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2201      	movs	r2, #1
 800145c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2201      	movs	r2, #1
 8001464:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2201      	movs	r2, #1
 800146c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2201      	movs	r2, #1
 8001474:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2201      	movs	r2, #1
 800147c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr

0800149c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d001      	beq.n	80014b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e03a      	b.n	800152a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2202      	movs	r2, #2
 80014b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	68da      	ldr	r2, [r3, #12]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f042 0201 	orr.w	r2, r2, #1
 80014ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a18      	ldr	r2, [pc, #96]	@ (8001534 <HAL_TIM_Base_Start_IT+0x98>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d00e      	beq.n	80014f4 <HAL_TIM_Base_Start_IT+0x58>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014de:	d009      	beq.n	80014f4 <HAL_TIM_Base_Start_IT+0x58>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a14      	ldr	r2, [pc, #80]	@ (8001538 <HAL_TIM_Base_Start_IT+0x9c>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d004      	beq.n	80014f4 <HAL_TIM_Base_Start_IT+0x58>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a13      	ldr	r2, [pc, #76]	@ (800153c <HAL_TIM_Base_Start_IT+0xa0>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d111      	bne.n	8001518 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2b06      	cmp	r3, #6
 8001504:	d010      	beq.n	8001528 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f042 0201 	orr.w	r2, r2, #1
 8001514:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001516:	e007      	b.n	8001528 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f042 0201 	orr.w	r2, r2, #1
 8001526:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3714      	adds	r7, #20
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr
 8001534:	40012c00 	.word	0x40012c00
 8001538:	40000400 	.word	0x40000400
 800153c:	40000800 	.word	0x40000800

08001540 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b02      	cmp	r3, #2
 8001554:	d122      	bne.n	800159c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b02      	cmp	r3, #2
 8001562:	d11b      	bne.n	800159c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f06f 0202 	mvn.w	r2, #2
 800156c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2201      	movs	r2, #1
 8001572:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	f003 0303 	and.w	r3, r3, #3
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f000 f8ed 	bl	8001762 <HAL_TIM_IC_CaptureCallback>
 8001588:	e005      	b.n	8001596 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f000 f8e0 	bl	8001750 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f000 f8ef 	bl	8001774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	f003 0304 	and.w	r3, r3, #4
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	d122      	bne.n	80015f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	f003 0304 	and.w	r3, r3, #4
 80015b4:	2b04      	cmp	r3, #4
 80015b6:	d11b      	bne.n	80015f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f06f 0204 	mvn.w	r2, #4
 80015c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2202      	movs	r2, #2
 80015c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f000 f8c3 	bl	8001762 <HAL_TIM_IC_CaptureCallback>
 80015dc:	e005      	b.n	80015ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f000 f8b6 	bl	8001750 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f000 f8c5 	bl	8001774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	f003 0308 	and.w	r3, r3, #8
 80015fa:	2b08      	cmp	r3, #8
 80015fc:	d122      	bne.n	8001644 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	f003 0308 	and.w	r3, r3, #8
 8001608:	2b08      	cmp	r3, #8
 800160a:	d11b      	bne.n	8001644 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f06f 0208 	mvn.w	r2, #8
 8001614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2204      	movs	r2, #4
 800161a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	f003 0303 	and.w	r3, r3, #3
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f000 f899 	bl	8001762 <HAL_TIM_IC_CaptureCallback>
 8001630:	e005      	b.n	800163e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 f88c 	bl	8001750 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f000 f89b 	bl	8001774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	f003 0310 	and.w	r3, r3, #16
 800164e:	2b10      	cmp	r3, #16
 8001650:	d122      	bne.n	8001698 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	f003 0310 	and.w	r3, r3, #16
 800165c:	2b10      	cmp	r3, #16
 800165e:	d11b      	bne.n	8001698 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f06f 0210 	mvn.w	r2, #16
 8001668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2208      	movs	r2, #8
 800166e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800167a:	2b00      	cmp	r3, #0
 800167c:	d003      	beq.n	8001686 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f000 f86f 	bl	8001762 <HAL_TIM_IC_CaptureCallback>
 8001684:	e005      	b.n	8001692 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f000 f862 	bl	8001750 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f000 f871 	bl	8001774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	691b      	ldr	r3, [r3, #16]
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d10e      	bne.n	80016c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d107      	bne.n	80016c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f06f 0201 	mvn.w	r2, #1
 80016bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7fe fe5e 	bl	8000380 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016ce:	2b80      	cmp	r3, #128	@ 0x80
 80016d0:	d10e      	bne.n	80016f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016dc:	2b80      	cmp	r3, #128	@ 0x80
 80016de:	d107      	bne.n	80016f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80016e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f000 f8bf 	bl	800186e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016fa:	2b40      	cmp	r3, #64	@ 0x40
 80016fc:	d10e      	bne.n	800171c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001708:	2b40      	cmp	r3, #64	@ 0x40
 800170a:	d107      	bne.n	800171c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f000 f835 	bl	8001786 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	f003 0320 	and.w	r3, r3, #32
 8001726:	2b20      	cmp	r3, #32
 8001728:	d10e      	bne.n	8001748 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	f003 0320 	and.w	r3, r3, #32
 8001734:	2b20      	cmp	r3, #32
 8001736:	d107      	bne.n	8001748 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f06f 0220 	mvn.w	r2, #32
 8001740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 f88a 	bl	800185c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr

08001762 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr

08001774 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr

08001786 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001786:	b480      	push	{r7}
 8001788:	b083      	sub	sp, #12
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr

08001798 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a29      	ldr	r2, [pc, #164]	@ (8001850 <TIM_Base_SetConfig+0xb8>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d00b      	beq.n	80017c8 <TIM_Base_SetConfig+0x30>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017b6:	d007      	beq.n	80017c8 <TIM_Base_SetConfig+0x30>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4a26      	ldr	r2, [pc, #152]	@ (8001854 <TIM_Base_SetConfig+0xbc>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d003      	beq.n	80017c8 <TIM_Base_SetConfig+0x30>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a25      	ldr	r2, [pc, #148]	@ (8001858 <TIM_Base_SetConfig+0xc0>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d108      	bne.n	80017da <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80017ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	68fa      	ldr	r2, [r7, #12]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a1c      	ldr	r2, [pc, #112]	@ (8001850 <TIM_Base_SetConfig+0xb8>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d00b      	beq.n	80017fa <TIM_Base_SetConfig+0x62>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017e8:	d007      	beq.n	80017fa <TIM_Base_SetConfig+0x62>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a19      	ldr	r2, [pc, #100]	@ (8001854 <TIM_Base_SetConfig+0xbc>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d003      	beq.n	80017fa <TIM_Base_SetConfig+0x62>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a18      	ldr	r2, [pc, #96]	@ (8001858 <TIM_Base_SetConfig+0xc0>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d108      	bne.n	800180c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001800:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	4313      	orrs	r3, r2
 800180a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	4313      	orrs	r3, r2
 8001818:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68fa      	ldr	r2, [r7, #12]
 800181e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	689a      	ldr	r2, [r3, #8]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a07      	ldr	r2, [pc, #28]	@ (8001850 <TIM_Base_SetConfig+0xb8>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d103      	bne.n	8001840 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	691a      	ldr	r2, [r3, #16]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	615a      	str	r2, [r3, #20]
}
 8001846:	bf00      	nop
 8001848:	3714      	adds	r7, #20
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr
 8001850:	40012c00 	.word	0x40012c00
 8001854:	40000400 	.word	0x40000400
 8001858:	40000800 	.word	0x40000800

0800185c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	bc80      	pop	{r7}
 800186c:	4770      	bx	lr

0800186e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr

08001880 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001886:	f3ef 8305 	mrs	r3, IPSR
 800188a:	60bb      	str	r3, [r7, #8]
  return(result);
 800188c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800188e:	2b00      	cmp	r3, #0
 8001890:	d10f      	bne.n	80018b2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001892:	f3ef 8310 	mrs	r3, PRIMASK
 8001896:	607b      	str	r3, [r7, #4]
  return(result);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d109      	bne.n	80018b2 <osKernelInitialize+0x32>
 800189e:	4b10      	ldr	r3, [pc, #64]	@ (80018e0 <osKernelInitialize+0x60>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d109      	bne.n	80018ba <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80018a6:	f3ef 8311 	mrs	r3, BASEPRI
 80018aa:	603b      	str	r3, [r7, #0]
  return(result);
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d003      	beq.n	80018ba <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80018b2:	f06f 0305 	mvn.w	r3, #5
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	e00c      	b.n	80018d4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80018ba:	4b09      	ldr	r3, [pc, #36]	@ (80018e0 <osKernelInitialize+0x60>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d105      	bne.n	80018ce <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80018c2:	4b07      	ldr	r3, [pc, #28]	@ (80018e0 <osKernelInitialize+0x60>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	e002      	b.n	80018d4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80018ce:	f04f 33ff 	mov.w	r3, #4294967295
 80018d2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80018d4:	68fb      	ldr	r3, [r7, #12]
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3714      	adds	r7, #20
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr
 80018e0:	200000d4 	.word	0x200000d4

080018e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80018ea:	f3ef 8305 	mrs	r3, IPSR
 80018ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80018f0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d10f      	bne.n	8001916 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80018f6:	f3ef 8310 	mrs	r3, PRIMASK
 80018fa:	607b      	str	r3, [r7, #4]
  return(result);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d109      	bne.n	8001916 <osKernelStart+0x32>
 8001902:	4b11      	ldr	r3, [pc, #68]	@ (8001948 <osKernelStart+0x64>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2b02      	cmp	r3, #2
 8001908:	d109      	bne.n	800191e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800190a:	f3ef 8311 	mrs	r3, BASEPRI
 800190e:	603b      	str	r3, [r7, #0]
  return(result);
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <osKernelStart+0x3a>
    stat = osErrorISR;
 8001916:	f06f 0305 	mvn.w	r3, #5
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	e00e      	b.n	800193c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800191e:	4b0a      	ldr	r3, [pc, #40]	@ (8001948 <osKernelStart+0x64>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d107      	bne.n	8001936 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8001926:	4b08      	ldr	r3, [pc, #32]	@ (8001948 <osKernelStart+0x64>)
 8001928:	2202      	movs	r2, #2
 800192a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800192c:	f001 f8a8 	bl	8002a80 <vTaskStartScheduler>
      stat = osOK;
 8001930:	2300      	movs	r3, #0
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	e002      	b.n	800193c <osKernelStart+0x58>
    } else {
      stat = osError;
 8001936:	f04f 33ff 	mov.w	r3, #4294967295
 800193a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800193c:	68fb      	ldr	r3, [r7, #12]
}
 800193e:	4618      	mov	r0, r3
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	200000d4 	.word	0x200000d4

0800194c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800194c:	b580      	push	{r7, lr}
 800194e:	b092      	sub	sp, #72	@ 0x48
 8001950:	af04      	add	r7, sp, #16
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800195c:	f3ef 8305 	mrs	r3, IPSR
 8001960:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8001962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8001964:	2b00      	cmp	r3, #0
 8001966:	f040 8094 	bne.w	8001a92 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800196a:	f3ef 8310 	mrs	r3, PRIMASK
 800196e:	623b      	str	r3, [r7, #32]
  return(result);
 8001970:	6a3b      	ldr	r3, [r7, #32]
 8001972:	2b00      	cmp	r3, #0
 8001974:	f040 808d 	bne.w	8001a92 <osThreadNew+0x146>
 8001978:	4b48      	ldr	r3, [pc, #288]	@ (8001a9c <osThreadNew+0x150>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b02      	cmp	r3, #2
 800197e:	d106      	bne.n	800198e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001980:	f3ef 8311 	mrs	r3, BASEPRI
 8001984:	61fb      	str	r3, [r7, #28]
  return(result);
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	2b00      	cmp	r3, #0
 800198a:	f040 8082 	bne.w	8001a92 <osThreadNew+0x146>
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d07e      	beq.n	8001a92 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8001994:	2380      	movs	r3, #128	@ 0x80
 8001996:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8001998:	2318      	movs	r3, #24
 800199a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 800199c:	2300      	movs	r3, #0
 800199e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80019a0:	f107 031b 	add.w	r3, r7, #27
 80019a4:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 80019a6:	f04f 33ff 	mov.w	r3, #4294967295
 80019aa:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d045      	beq.n	8001a3e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d002      	beq.n	80019c0 <osThreadNew+0x74>
        name = attr->name;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d002      	beq.n	80019ce <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80019ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d008      	beq.n	80019e6 <osThreadNew+0x9a>
 80019d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019d6:	2b38      	cmp	r3, #56	@ 0x38
 80019d8:	d805      	bhi.n	80019e6 <osThreadNew+0x9a>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <osThreadNew+0x9e>
        return (NULL);
 80019e6:	2300      	movs	r3, #0
 80019e8:	e054      	b.n	8001a94 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	695b      	ldr	r3, [r3, #20]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d003      	beq.n	80019fa <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	089b      	lsrs	r3, r3, #2
 80019f8:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d00e      	beq.n	8001a20 <osThreadNew+0xd4>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	2ba7      	cmp	r3, #167	@ 0xa7
 8001a08:	d90a      	bls.n	8001a20 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d006      	beq.n	8001a20 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	695b      	ldr	r3, [r3, #20]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d002      	beq.n	8001a20 <osThreadNew+0xd4>
        mem = 1;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a1e:	e010      	b.n	8001a42 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d10c      	bne.n	8001a42 <osThreadNew+0xf6>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d108      	bne.n	8001a42 <osThreadNew+0xf6>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d104      	bne.n	8001a42 <osThreadNew+0xf6>
          mem = 0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a3c:	e001      	b.n	8001a42 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 8001a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d110      	bne.n	8001a6a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001a50:	9202      	str	r2, [sp, #8]
 8001a52:	9301      	str	r3, [sp, #4]
 8001a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001a5c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001a5e:	68f8      	ldr	r0, [r7, #12]
 8001a60:	f000 fe24 	bl	80026ac <xTaskCreateStatic>
 8001a64:	4603      	mov	r3, r0
 8001a66:	617b      	str	r3, [r7, #20]
 8001a68:	e013      	b.n	8001a92 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8001a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d110      	bne.n	8001a92 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	9301      	str	r3, [sp, #4]
 8001a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001a82:	68f8      	ldr	r0, [r7, #12]
 8001a84:	f000 fe71 	bl	800276a <xTaskCreate>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d001      	beq.n	8001a92 <osThreadNew+0x146>
          hTask = NULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001a92:	697b      	ldr	r3, [r7, #20]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3738      	adds	r7, #56	@ 0x38
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	200000d4 	.word	0x200000d4

08001aa0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001aa8:	f3ef 8305 	mrs	r3, IPSR
 8001aac:	613b      	str	r3, [r7, #16]
  return(result);
 8001aae:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d10f      	bne.n	8001ad4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ab4:	f3ef 8310 	mrs	r3, PRIMASK
 8001ab8:	60fb      	str	r3, [r7, #12]
  return(result);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d109      	bne.n	8001ad4 <osDelay+0x34>
 8001ac0:	4b0d      	ldr	r3, [pc, #52]	@ (8001af8 <osDelay+0x58>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d109      	bne.n	8001adc <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001ac8:	f3ef 8311 	mrs	r3, BASEPRI
 8001acc:	60bb      	str	r3, [r7, #8]
  return(result);
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d003      	beq.n	8001adc <osDelay+0x3c>
    stat = osErrorISR;
 8001ad4:	f06f 0305 	mvn.w	r3, #5
 8001ad8:	617b      	str	r3, [r7, #20]
 8001ada:	e007      	b.n	8001aec <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8001adc:	2300      	movs	r3, #0
 8001ade:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d002      	beq.n	8001aec <osDelay+0x4c>
      vTaskDelay(ticks);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 ff94 	bl	8002a14 <vTaskDelay>
    }
  }

  return (stat);
 8001aec:	697b      	ldr	r3, [r7, #20]
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3718      	adds	r7, #24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	200000d4 	.word	0x200000d4

08001afc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4a06      	ldr	r2, [pc, #24]	@ (8001b24 <vApplicationGetIdleTaskMemory+0x28>)
 8001b0c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	4a05      	ldr	r2, [pc, #20]	@ (8001b28 <vApplicationGetIdleTaskMemory+0x2c>)
 8001b12:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2280      	movs	r2, #128	@ 0x80
 8001b18:	601a      	str	r2, [r3, #0]
}
 8001b1a:	bf00      	nop
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr
 8001b24:	200000d8 	.word	0x200000d8
 8001b28:	20000180 	.word	0x20000180

08001b2c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	4a07      	ldr	r2, [pc, #28]	@ (8001b58 <vApplicationGetTimerTaskMemory+0x2c>)
 8001b3c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	4a06      	ldr	r2, [pc, #24]	@ (8001b5c <vApplicationGetTimerTaskMemory+0x30>)
 8001b42:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b4a:	601a      	str	r2, [r3, #0]
}
 8001b4c:	bf00      	nop
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bc80      	pop	{r7}
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	20000380 	.word	0x20000380
 8001b5c:	20000428 	.word	0x20000428

08001b60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f103 0208 	add.w	r2, r3, #8
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f04f 32ff 	mov.w	r2, #4294967295
 8001b78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f103 0208 	add.w	r2, r3, #8
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f103 0208 	add.w	r2, r3, #8
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr

08001b9e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc80      	pop	{r7}
 8001bb4:	4770      	bx	lr

08001bb6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b085      	sub	sp, #20
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
 8001bbe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	68fa      	ldr	r2, [r7, #12]
 8001bca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	1c5a      	adds	r2, r3, #1
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	601a      	str	r2, [r3, #0]
}
 8001bf2:	bf00      	nop
 8001bf4:	3714      	adds	r7, #20
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr

08001bfc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c12:	d103      	bne.n	8001c1c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	e00c      	b.n	8001c36 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3308      	adds	r3, #8
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	e002      	b.n	8001c2a <vListInsert+0x2e>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	68ba      	ldr	r2, [r7, #8]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d2f6      	bcs.n	8001c24 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	685a      	ldr	r2, [r3, #4]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	683a      	ldr	r2, [r7, #0]
 8001c50:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	1c5a      	adds	r2, r3, #1
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	601a      	str	r2, [r3, #0]
}
 8001c62:	bf00      	nop
 8001c64:	3714      	adds	r7, #20
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr

08001c6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	6892      	ldr	r2, [r2, #8]
 8001c82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	6852      	ldr	r2, [r2, #4]
 8001c8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d103      	bne.n	8001ca0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	1e5a      	subs	r2, r3, #1
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bc80      	pop	{r7}
 8001cbc:	4770      	bx	lr
	...

08001cc0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d10b      	bne.n	8001cec <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001cd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cd8:	f383 8811 	msr	BASEPRI, r3
 8001cdc:	f3bf 8f6f 	isb	sy
 8001ce0:	f3bf 8f4f 	dsb	sy
 8001ce4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001ce6:	bf00      	nop
 8001ce8:	bf00      	nop
 8001cea:	e7fd      	b.n	8001ce8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001cec:	f002 f826 	bl	8003d3c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cf8:	68f9      	ldr	r1, [r7, #12]
 8001cfa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001cfc:	fb01 f303 	mul.w	r3, r1, r3
 8001d00:	441a      	add	r2, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	68f9      	ldr	r1, [r7, #12]
 8001d20:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001d22:	fb01 f303 	mul.w	r3, r1, r3
 8001d26:	441a      	add	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	22ff      	movs	r2, #255	@ 0xff
 8001d30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	22ff      	movs	r2, #255	@ 0xff
 8001d38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d114      	bne.n	8001d6c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d01a      	beq.n	8001d80 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	3310      	adds	r3, #16
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f001 f936 	bl	8002fc0 <xTaskRemoveFromEventList>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d012      	beq.n	8001d80 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d90 <xQueueGenericReset+0xd0>)
 8001d5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	f3bf 8f4f 	dsb	sy
 8001d66:	f3bf 8f6f 	isb	sy
 8001d6a:	e009      	b.n	8001d80 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	3310      	adds	r3, #16
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff fef5 	bl	8001b60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	3324      	adds	r3, #36	@ 0x24
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff fef0 	bl	8001b60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001d80:	f002 f80c 	bl	8003d9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001d84:	2301      	movs	r3, #1
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	e000ed04 	.word	0xe000ed04

08001d94 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08e      	sub	sp, #56	@ 0x38
 8001d98:	af02      	add	r7, sp, #8
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
 8001da0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d10b      	bne.n	8001dc0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8001da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001dac:	f383 8811 	msr	BASEPRI, r3
 8001db0:	f3bf 8f6f 	isb	sy
 8001db4:	f3bf 8f4f 	dsb	sy
 8001db8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001dba:	bf00      	nop
 8001dbc:	bf00      	nop
 8001dbe:	e7fd      	b.n	8001dbc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d10b      	bne.n	8001dde <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8001dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001dca:	f383 8811 	msr	BASEPRI, r3
 8001dce:	f3bf 8f6f 	isb	sy
 8001dd2:	f3bf 8f4f 	dsb	sy
 8001dd6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001dd8:	bf00      	nop
 8001dda:	bf00      	nop
 8001ddc:	e7fd      	b.n	8001dda <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d002      	beq.n	8001dea <xQueueGenericCreateStatic+0x56>
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <xQueueGenericCreateStatic+0x5a>
 8001dea:	2301      	movs	r3, #1
 8001dec:	e000      	b.n	8001df0 <xQueueGenericCreateStatic+0x5c>
 8001dee:	2300      	movs	r3, #0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d10b      	bne.n	8001e0c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8001df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001df8:	f383 8811 	msr	BASEPRI, r3
 8001dfc:	f3bf 8f6f 	isb	sy
 8001e00:	f3bf 8f4f 	dsb	sy
 8001e04:	623b      	str	r3, [r7, #32]
}
 8001e06:	bf00      	nop
 8001e08:	bf00      	nop
 8001e0a:	e7fd      	b.n	8001e08 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d102      	bne.n	8001e18 <xQueueGenericCreateStatic+0x84>
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d101      	bne.n	8001e1c <xQueueGenericCreateStatic+0x88>
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e000      	b.n	8001e1e <xQueueGenericCreateStatic+0x8a>
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d10b      	bne.n	8001e3a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8001e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e26:	f383 8811 	msr	BASEPRI, r3
 8001e2a:	f3bf 8f6f 	isb	sy
 8001e2e:	f3bf 8f4f 	dsb	sy
 8001e32:	61fb      	str	r3, [r7, #28]
}
 8001e34:	bf00      	nop
 8001e36:	bf00      	nop
 8001e38:	e7fd      	b.n	8001e36 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001e3a:	2350      	movs	r3, #80	@ 0x50
 8001e3c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	2b50      	cmp	r3, #80	@ 0x50
 8001e42:	d00b      	beq.n	8001e5c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8001e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e48:	f383 8811 	msr	BASEPRI, r3
 8001e4c:	f3bf 8f6f 	isb	sy
 8001e50:	f3bf 8f4f 	dsb	sy
 8001e54:	61bb      	str	r3, [r7, #24]
}
 8001e56:	bf00      	nop
 8001e58:	bf00      	nop
 8001e5a:	e7fd      	b.n	8001e58 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8001e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00d      	beq.n	8001e82 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001e6e:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8001e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e74:	9300      	str	r3, [sp, #0]
 8001e76:	4613      	mov	r3, r2
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	68b9      	ldr	r1, [r7, #8]
 8001e7c:	68f8      	ldr	r0, [r7, #12]
 8001e7e:	f000 f805 	bl	8001e8c <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3730      	adds	r7, #48	@ 0x30
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
 8001e98:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d103      	bne.n	8001ea8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	e002      	b.n	8001eae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	68ba      	ldr	r2, [r7, #8]
 8001eb8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001eba:	2101      	movs	r1, #1
 8001ebc:	69b8      	ldr	r0, [r7, #24]
 8001ebe:	f7ff feff 	bl	8001cc0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	78fa      	ldrb	r2, [r7, #3]
 8001ec6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001eca:	bf00      	nop
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b08e      	sub	sp, #56	@ 0x38
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
 8001ee0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8001eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d10b      	bne.n	8001f08 <xQueueGenericSend+0x34>
	__asm volatile
 8001ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ef4:	f383 8811 	msr	BASEPRI, r3
 8001ef8:	f3bf 8f6f 	isb	sy
 8001efc:	f3bf 8f4f 	dsb	sy
 8001f00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001f02:	bf00      	nop
 8001f04:	bf00      	nop
 8001f06:	e7fd      	b.n	8001f04 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d103      	bne.n	8001f16 <xQueueGenericSend+0x42>
 8001f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <xQueueGenericSend+0x46>
 8001f16:	2301      	movs	r3, #1
 8001f18:	e000      	b.n	8001f1c <xQueueGenericSend+0x48>
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d10b      	bne.n	8001f38 <xQueueGenericSend+0x64>
	__asm volatile
 8001f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f24:	f383 8811 	msr	BASEPRI, r3
 8001f28:	f3bf 8f6f 	isb	sy
 8001f2c:	f3bf 8f4f 	dsb	sy
 8001f30:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001f32:	bf00      	nop
 8001f34:	bf00      	nop
 8001f36:	e7fd      	b.n	8001f34 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d103      	bne.n	8001f46 <xQueueGenericSend+0x72>
 8001f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d101      	bne.n	8001f4a <xQueueGenericSend+0x76>
 8001f46:	2301      	movs	r3, #1
 8001f48:	e000      	b.n	8001f4c <xQueueGenericSend+0x78>
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10b      	bne.n	8001f68 <xQueueGenericSend+0x94>
	__asm volatile
 8001f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f54:	f383 8811 	msr	BASEPRI, r3
 8001f58:	f3bf 8f6f 	isb	sy
 8001f5c:	f3bf 8f4f 	dsb	sy
 8001f60:	623b      	str	r3, [r7, #32]
}
 8001f62:	bf00      	nop
 8001f64:	bf00      	nop
 8001f66:	e7fd      	b.n	8001f64 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001f68:	f001 f9f4 	bl	8003354 <xTaskGetSchedulerState>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d102      	bne.n	8001f78 <xQueueGenericSend+0xa4>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <xQueueGenericSend+0xa8>
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e000      	b.n	8001f7e <xQueueGenericSend+0xaa>
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10b      	bne.n	8001f9a <xQueueGenericSend+0xc6>
	__asm volatile
 8001f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f86:	f383 8811 	msr	BASEPRI, r3
 8001f8a:	f3bf 8f6f 	isb	sy
 8001f8e:	f3bf 8f4f 	dsb	sy
 8001f92:	61fb      	str	r3, [r7, #28]
}
 8001f94:	bf00      	nop
 8001f96:	bf00      	nop
 8001f98:	e7fd      	b.n	8001f96 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001f9a:	f001 fecf 	bl	8003d3c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fa0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d302      	bcc.n	8001fb0 <xQueueGenericSend+0xdc>
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d129      	bne.n	8002004 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	68b9      	ldr	r1, [r7, #8]
 8001fb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001fb6:	f000 fa0d 	bl	80023d4 <prvCopyDataToQueue>
 8001fba:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d010      	beq.n	8001fe6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fc6:	3324      	adds	r3, #36	@ 0x24
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f000 fff9 	bl	8002fc0 <xTaskRemoveFromEventList>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d013      	beq.n	8001ffc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001fd4:	4b3f      	ldr	r3, [pc, #252]	@ (80020d4 <xQueueGenericSend+0x200>)
 8001fd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	f3bf 8f4f 	dsb	sy
 8001fe0:	f3bf 8f6f 	isb	sy
 8001fe4:	e00a      	b.n	8001ffc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d007      	beq.n	8001ffc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001fec:	4b39      	ldr	r3, [pc, #228]	@ (80020d4 <xQueueGenericSend+0x200>)
 8001fee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	f3bf 8f4f 	dsb	sy
 8001ff8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001ffc:	f001 fece 	bl	8003d9c <vPortExitCritical>
				return pdPASS;
 8002000:	2301      	movs	r3, #1
 8002002:	e063      	b.n	80020cc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d103      	bne.n	8002012 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800200a:	f001 fec7 	bl	8003d9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800200e:	2300      	movs	r3, #0
 8002010:	e05c      	b.n	80020cc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002012:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002014:	2b00      	cmp	r3, #0
 8002016:	d106      	bne.n	8002026 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002018:	f107 0314 	add.w	r3, r7, #20
 800201c:	4618      	mov	r0, r3
 800201e:	f001 f833 	bl	8003088 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002022:	2301      	movs	r3, #1
 8002024:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002026:	f001 feb9 	bl	8003d9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800202a:	f000 fd99 	bl	8002b60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800202e:	f001 fe85 	bl	8003d3c <vPortEnterCritical>
 8002032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002034:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002038:	b25b      	sxtb	r3, r3
 800203a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800203e:	d103      	bne.n	8002048 <xQueueGenericSend+0x174>
 8002040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002042:	2200      	movs	r2, #0
 8002044:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800204a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800204e:	b25b      	sxtb	r3, r3
 8002050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002054:	d103      	bne.n	800205e <xQueueGenericSend+0x18a>
 8002056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002058:	2200      	movs	r2, #0
 800205a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800205e:	f001 fe9d 	bl	8003d9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002062:	1d3a      	adds	r2, r7, #4
 8002064:	f107 0314 	add.w	r3, r7, #20
 8002068:	4611      	mov	r1, r2
 800206a:	4618      	mov	r0, r3
 800206c:	f001 f822 	bl	80030b4 <xTaskCheckForTimeOut>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d124      	bne.n	80020c0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002076:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002078:	f000 faa4 	bl	80025c4 <prvIsQueueFull>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d018      	beq.n	80020b4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002084:	3310      	adds	r3, #16
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	4611      	mov	r1, r2
 800208a:	4618      	mov	r0, r3
 800208c:	f000 ff46 	bl	8002f1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002090:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002092:	f000 fa2f 	bl	80024f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002096:	f000 fd71 	bl	8002b7c <xTaskResumeAll>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	f47f af7c 	bne.w	8001f9a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80020a2:	4b0c      	ldr	r3, [pc, #48]	@ (80020d4 <xQueueGenericSend+0x200>)
 80020a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	f3bf 8f4f 	dsb	sy
 80020ae:	f3bf 8f6f 	isb	sy
 80020b2:	e772      	b.n	8001f9a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80020b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80020b6:	f000 fa1d 	bl	80024f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80020ba:	f000 fd5f 	bl	8002b7c <xTaskResumeAll>
 80020be:	e76c      	b.n	8001f9a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80020c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80020c2:	f000 fa17 	bl	80024f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80020c6:	f000 fd59 	bl	8002b7c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80020ca:	2300      	movs	r3, #0
		}
	}
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3738      	adds	r7, #56	@ 0x38
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	e000ed04 	.word	0xe000ed04

080020d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b08e      	sub	sp, #56	@ 0x38
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
 80020e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80020ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d10b      	bne.n	8002108 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80020f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020f4:	f383 8811 	msr	BASEPRI, r3
 80020f8:	f3bf 8f6f 	isb	sy
 80020fc:	f3bf 8f4f 	dsb	sy
 8002100:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002102:	bf00      	nop
 8002104:	bf00      	nop
 8002106:	e7fd      	b.n	8002104 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d103      	bne.n	8002116 <xQueueGenericSendFromISR+0x3e>
 800210e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <xQueueGenericSendFromISR+0x42>
 8002116:	2301      	movs	r3, #1
 8002118:	e000      	b.n	800211c <xQueueGenericSendFromISR+0x44>
 800211a:	2300      	movs	r3, #0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d10b      	bne.n	8002138 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002124:	f383 8811 	msr	BASEPRI, r3
 8002128:	f3bf 8f6f 	isb	sy
 800212c:	f3bf 8f4f 	dsb	sy
 8002130:	623b      	str	r3, [r7, #32]
}
 8002132:	bf00      	nop
 8002134:	bf00      	nop
 8002136:	e7fd      	b.n	8002134 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	2b02      	cmp	r3, #2
 800213c:	d103      	bne.n	8002146 <xQueueGenericSendFromISR+0x6e>
 800213e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002142:	2b01      	cmp	r3, #1
 8002144:	d101      	bne.n	800214a <xQueueGenericSendFromISR+0x72>
 8002146:	2301      	movs	r3, #1
 8002148:	e000      	b.n	800214c <xQueueGenericSendFromISR+0x74>
 800214a:	2300      	movs	r3, #0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d10b      	bne.n	8002168 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002154:	f383 8811 	msr	BASEPRI, r3
 8002158:	f3bf 8f6f 	isb	sy
 800215c:	f3bf 8f4f 	dsb	sy
 8002160:	61fb      	str	r3, [r7, #28]
}
 8002162:	bf00      	nop
 8002164:	bf00      	nop
 8002166:	e7fd      	b.n	8002164 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002168:	f001 feaa 	bl	8003ec0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800216c:	f3ef 8211 	mrs	r2, BASEPRI
 8002170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002174:	f383 8811 	msr	BASEPRI, r3
 8002178:	f3bf 8f6f 	isb	sy
 800217c:	f3bf 8f4f 	dsb	sy
 8002180:	61ba      	str	r2, [r7, #24]
 8002182:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002184:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002186:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800218a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800218c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800218e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002190:	429a      	cmp	r2, r3
 8002192:	d302      	bcc.n	800219a <xQueueGenericSendFromISR+0xc2>
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	2b02      	cmp	r3, #2
 8002198:	d12c      	bne.n	80021f4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800219a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800219c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80021a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	68b9      	ldr	r1, [r7, #8]
 80021a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80021aa:	f000 f913 	bl	80023d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80021ae:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80021b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b6:	d112      	bne.n	80021de <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80021b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d016      	beq.n	80021ee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80021c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021c2:	3324      	adds	r3, #36	@ 0x24
 80021c4:	4618      	mov	r0, r3
 80021c6:	f000 fefb 	bl	8002fc0 <xTaskRemoveFromEventList>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00e      	beq.n	80021ee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00b      	beq.n	80021ee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2201      	movs	r2, #1
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	e007      	b.n	80021ee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80021de:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80021e2:	3301      	adds	r3, #1
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	b25a      	sxtb	r2, r3
 80021e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80021ee:	2301      	movs	r3, #1
 80021f0:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80021f2:	e001      	b.n	80021f8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80021f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021fa:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002202:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002206:	4618      	mov	r0, r3
 8002208:	3738      	adds	r7, #56	@ 0x38
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
	...

08002210 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b08c      	sub	sp, #48	@ 0x30
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800221c:	2300      	movs	r3, #0
 800221e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002226:	2b00      	cmp	r3, #0
 8002228:	d10b      	bne.n	8002242 <xQueueReceive+0x32>
	__asm volatile
 800222a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800222e:	f383 8811 	msr	BASEPRI, r3
 8002232:	f3bf 8f6f 	isb	sy
 8002236:	f3bf 8f4f 	dsb	sy
 800223a:	623b      	str	r3, [r7, #32]
}
 800223c:	bf00      	nop
 800223e:	bf00      	nop
 8002240:	e7fd      	b.n	800223e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d103      	bne.n	8002250 <xQueueReceive+0x40>
 8002248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800224a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <xQueueReceive+0x44>
 8002250:	2301      	movs	r3, #1
 8002252:	e000      	b.n	8002256 <xQueueReceive+0x46>
 8002254:	2300      	movs	r3, #0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d10b      	bne.n	8002272 <xQueueReceive+0x62>
	__asm volatile
 800225a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800225e:	f383 8811 	msr	BASEPRI, r3
 8002262:	f3bf 8f6f 	isb	sy
 8002266:	f3bf 8f4f 	dsb	sy
 800226a:	61fb      	str	r3, [r7, #28]
}
 800226c:	bf00      	nop
 800226e:	bf00      	nop
 8002270:	e7fd      	b.n	800226e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002272:	f001 f86f 	bl	8003354 <xTaskGetSchedulerState>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d102      	bne.n	8002282 <xQueueReceive+0x72>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <xQueueReceive+0x76>
 8002282:	2301      	movs	r3, #1
 8002284:	e000      	b.n	8002288 <xQueueReceive+0x78>
 8002286:	2300      	movs	r3, #0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d10b      	bne.n	80022a4 <xQueueReceive+0x94>
	__asm volatile
 800228c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002290:	f383 8811 	msr	BASEPRI, r3
 8002294:	f3bf 8f6f 	isb	sy
 8002298:	f3bf 8f4f 	dsb	sy
 800229c:	61bb      	str	r3, [r7, #24]
}
 800229e:	bf00      	nop
 80022a0:	bf00      	nop
 80022a2:	e7fd      	b.n	80022a0 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80022a4:	f001 fd4a 	bl	8003d3c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80022a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022ac:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80022ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d01f      	beq.n	80022f4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80022b4:	68b9      	ldr	r1, [r7, #8]
 80022b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80022b8:	f000 f8f6 	bl	80024a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80022bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022be:	1e5a      	subs	r2, r3, #1
 80022c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022c2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00f      	beq.n	80022ec <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022ce:	3310      	adds	r3, #16
 80022d0:	4618      	mov	r0, r3
 80022d2:	f000 fe75 	bl	8002fc0 <xTaskRemoveFromEventList>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d007      	beq.n	80022ec <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80022dc:	4b3c      	ldr	r3, [pc, #240]	@ (80023d0 <xQueueReceive+0x1c0>)
 80022de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	f3bf 8f4f 	dsb	sy
 80022e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80022ec:	f001 fd56 	bl	8003d9c <vPortExitCritical>
				return pdPASS;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e069      	b.n	80023c8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d103      	bne.n	8002302 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80022fa:	f001 fd4f 	bl	8003d9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80022fe:	2300      	movs	r3, #0
 8002300:	e062      	b.n	80023c8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002304:	2b00      	cmp	r3, #0
 8002306:	d106      	bne.n	8002316 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002308:	f107 0310 	add.w	r3, r7, #16
 800230c:	4618      	mov	r0, r3
 800230e:	f000 febb 	bl	8003088 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002312:	2301      	movs	r3, #1
 8002314:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002316:	f001 fd41 	bl	8003d9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800231a:	f000 fc21 	bl	8002b60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800231e:	f001 fd0d 	bl	8003d3c <vPortEnterCritical>
 8002322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002324:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002328:	b25b      	sxtb	r3, r3
 800232a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800232e:	d103      	bne.n	8002338 <xQueueReceive+0x128>
 8002330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002332:	2200      	movs	r2, #0
 8002334:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800233a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800233e:	b25b      	sxtb	r3, r3
 8002340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002344:	d103      	bne.n	800234e <xQueueReceive+0x13e>
 8002346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002348:	2200      	movs	r2, #0
 800234a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800234e:	f001 fd25 	bl	8003d9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002352:	1d3a      	adds	r2, r7, #4
 8002354:	f107 0310 	add.w	r3, r7, #16
 8002358:	4611      	mov	r1, r2
 800235a:	4618      	mov	r0, r3
 800235c:	f000 feaa 	bl	80030b4 <xTaskCheckForTimeOut>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d123      	bne.n	80023ae <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002366:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002368:	f000 f916 	bl	8002598 <prvIsQueueEmpty>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d017      	beq.n	80023a2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002374:	3324      	adds	r3, #36	@ 0x24
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	4611      	mov	r1, r2
 800237a:	4618      	mov	r0, r3
 800237c:	f000 fdce 	bl	8002f1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002380:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002382:	f000 f8b7 	bl	80024f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002386:	f000 fbf9 	bl	8002b7c <xTaskResumeAll>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d189      	bne.n	80022a4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002390:	4b0f      	ldr	r3, [pc, #60]	@ (80023d0 <xQueueReceive+0x1c0>)
 8002392:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	f3bf 8f4f 	dsb	sy
 800239c:	f3bf 8f6f 	isb	sy
 80023a0:	e780      	b.n	80022a4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80023a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80023a4:	f000 f8a6 	bl	80024f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80023a8:	f000 fbe8 	bl	8002b7c <xTaskResumeAll>
 80023ac:	e77a      	b.n	80022a4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80023ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80023b0:	f000 f8a0 	bl	80024f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80023b4:	f000 fbe2 	bl	8002b7c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80023b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80023ba:	f000 f8ed 	bl	8002598 <prvIsQueueEmpty>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f43f af6f 	beq.w	80022a4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80023c6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3730      	adds	r7, #48	@ 0x30
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	e000ed04 	.word	0xe000ed04

080023d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10d      	bne.n	800240e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d14d      	bne.n	8002496 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	4618      	mov	r0, r3
 8002400:	f000 ffc6 	bl	8003390 <xTaskPriorityDisinherit>
 8002404:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2200      	movs	r2, #0
 800240a:	605a      	str	r2, [r3, #4]
 800240c:	e043      	b.n	8002496 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d119      	bne.n	8002448 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6898      	ldr	r0, [r3, #8]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241c:	461a      	mov	r2, r3
 800241e:	68b9      	ldr	r1, [r7, #8]
 8002420:	f001 fff0 	bl	8004404 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242c:	441a      	add	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	689a      	ldr	r2, [r3, #8]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	429a      	cmp	r2, r3
 800243c:	d32b      	bcc.n	8002496 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	609a      	str	r2, [r3, #8]
 8002446:	e026      	b.n	8002496 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	68d8      	ldr	r0, [r3, #12]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002450:	461a      	mov	r2, r3
 8002452:	68b9      	ldr	r1, [r7, #8]
 8002454:	f001 ffd6 	bl	8004404 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	68da      	ldr	r2, [r3, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002460:	425b      	negs	r3, r3
 8002462:	441a      	add	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	68da      	ldr	r2, [r3, #12]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	429a      	cmp	r2, r3
 8002472:	d207      	bcs.n	8002484 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247c:	425b      	negs	r3, r3
 800247e:	441a      	add	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b02      	cmp	r3, #2
 8002488:	d105      	bne.n	8002496 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d002      	beq.n	8002496 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	3b01      	subs	r3, #1
 8002494:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1c5a      	adds	r2, r3, #1
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800249e:	697b      	ldr	r3, [r7, #20]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3718      	adds	r7, #24
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d018      	beq.n	80024ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68da      	ldr	r2, [r3, #12]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c2:	441a      	add	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68da      	ldr	r2, [r3, #12]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d303      	bcc.n	80024dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68d9      	ldr	r1, [r3, #12]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e4:	461a      	mov	r2, r3
 80024e6:	6838      	ldr	r0, [r7, #0]
 80024e8:	f001 ff8c 	bl	8004404 <memcpy>
	}
}
 80024ec:	bf00      	nop
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80024fc:	f001 fc1e 	bl	8003d3c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002506:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002508:	e011      	b.n	800252e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800250e:	2b00      	cmp	r3, #0
 8002510:	d012      	beq.n	8002538 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3324      	adds	r3, #36	@ 0x24
 8002516:	4618      	mov	r0, r3
 8002518:	f000 fd52 	bl	8002fc0 <xTaskRemoveFromEventList>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002522:	f000 fe2b 	bl	800317c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002526:	7bfb      	ldrb	r3, [r7, #15]
 8002528:	3b01      	subs	r3, #1
 800252a:	b2db      	uxtb	r3, r3
 800252c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800252e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002532:	2b00      	cmp	r3, #0
 8002534:	dce9      	bgt.n	800250a <prvUnlockQueue+0x16>
 8002536:	e000      	b.n	800253a <prvUnlockQueue+0x46>
					break;
 8002538:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	22ff      	movs	r2, #255	@ 0xff
 800253e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002542:	f001 fc2b 	bl	8003d9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002546:	f001 fbf9 	bl	8003d3c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002550:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002552:	e011      	b.n	8002578 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d012      	beq.n	8002582 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3310      	adds	r3, #16
 8002560:	4618      	mov	r0, r3
 8002562:	f000 fd2d 	bl	8002fc0 <xTaskRemoveFromEventList>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800256c:	f000 fe06 	bl	800317c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002570:	7bbb      	ldrb	r3, [r7, #14]
 8002572:	3b01      	subs	r3, #1
 8002574:	b2db      	uxtb	r3, r3
 8002576:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002578:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800257c:	2b00      	cmp	r3, #0
 800257e:	dce9      	bgt.n	8002554 <prvUnlockQueue+0x60>
 8002580:	e000      	b.n	8002584 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002582:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	22ff      	movs	r2, #255	@ 0xff
 8002588:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800258c:	f001 fc06 	bl	8003d9c <vPortExitCritical>
}
 8002590:	bf00      	nop
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80025a0:	f001 fbcc 	bl	8003d3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d102      	bne.n	80025b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80025ac:	2301      	movs	r3, #1
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	e001      	b.n	80025b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80025b2:	2300      	movs	r3, #0
 80025b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80025b6:	f001 fbf1 	bl	8003d9c <vPortExitCritical>

	return xReturn;
 80025ba:	68fb      	ldr	r3, [r7, #12]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80025cc:	f001 fbb6 	bl	8003d3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025d8:	429a      	cmp	r2, r3
 80025da:	d102      	bne.n	80025e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80025dc:	2301      	movs	r3, #1
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	e001      	b.n	80025e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80025e2:	2300      	movs	r3, #0
 80025e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80025e6:	f001 fbd9 	bl	8003d9c <vPortExitCritical>

	return xReturn;
 80025ea:	68fb      	ldr	r3, [r7, #12]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3710      	adds	r7, #16
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80025fe:	2300      	movs	r3, #0
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	e014      	b.n	800262e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002604:	4a0e      	ldr	r2, [pc, #56]	@ (8002640 <vQueueAddToRegistry+0x4c>)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d10b      	bne.n	8002628 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002610:	490b      	ldr	r1, [pc, #44]	@ (8002640 <vQueueAddToRegistry+0x4c>)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800261a:	4a09      	ldr	r2, [pc, #36]	@ (8002640 <vQueueAddToRegistry+0x4c>)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	4413      	add	r3, r2
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002626:	e006      	b.n	8002636 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	3301      	adds	r3, #1
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2b07      	cmp	r3, #7
 8002632:	d9e7      	bls.n	8002604 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002634:	bf00      	nop
 8002636:	bf00      	nop
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr
 8002640:	20000828 	.word	0x20000828

08002644 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002654:	f001 fb72 	bl	8003d3c <vPortEnterCritical>
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800265e:	b25b      	sxtb	r3, r3
 8002660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002664:	d103      	bne.n	800266e <vQueueWaitForMessageRestricted+0x2a>
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002674:	b25b      	sxtb	r3, r3
 8002676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800267a:	d103      	bne.n	8002684 <vQueueWaitForMessageRestricted+0x40>
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002684:	f001 fb8a 	bl	8003d9c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800268c:	2b00      	cmp	r3, #0
 800268e:	d106      	bne.n	800269e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	3324      	adds	r3, #36	@ 0x24
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	68b9      	ldr	r1, [r7, #8]
 8002698:	4618      	mov	r0, r3
 800269a:	f000 fc65 	bl	8002f68 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800269e:	6978      	ldr	r0, [r7, #20]
 80026a0:	f7ff ff28 	bl	80024f4 <prvUnlockQueue>
	}
 80026a4:	bf00      	nop
 80026a6:	3718      	adds	r7, #24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b08e      	sub	sp, #56	@ 0x38
 80026b0:	af04      	add	r7, sp, #16
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
 80026b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80026ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d10b      	bne.n	80026d8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80026c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026c4:	f383 8811 	msr	BASEPRI, r3
 80026c8:	f3bf 8f6f 	isb	sy
 80026cc:	f3bf 8f4f 	dsb	sy
 80026d0:	623b      	str	r3, [r7, #32]
}
 80026d2:	bf00      	nop
 80026d4:	bf00      	nop
 80026d6:	e7fd      	b.n	80026d4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80026d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10b      	bne.n	80026f6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80026de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026e2:	f383 8811 	msr	BASEPRI, r3
 80026e6:	f3bf 8f6f 	isb	sy
 80026ea:	f3bf 8f4f 	dsb	sy
 80026ee:	61fb      	str	r3, [r7, #28]
}
 80026f0:	bf00      	nop
 80026f2:	bf00      	nop
 80026f4:	e7fd      	b.n	80026f2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80026f6:	23a8      	movs	r3, #168	@ 0xa8
 80026f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	2ba8      	cmp	r3, #168	@ 0xa8
 80026fe:	d00b      	beq.n	8002718 <xTaskCreateStatic+0x6c>
	__asm volatile
 8002700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002704:	f383 8811 	msr	BASEPRI, r3
 8002708:	f3bf 8f6f 	isb	sy
 800270c:	f3bf 8f4f 	dsb	sy
 8002710:	61bb      	str	r3, [r7, #24]
}
 8002712:	bf00      	nop
 8002714:	bf00      	nop
 8002716:	e7fd      	b.n	8002714 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800271a:	2b00      	cmp	r3, #0
 800271c:	d01e      	beq.n	800275c <xTaskCreateStatic+0xb0>
 800271e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002720:	2b00      	cmp	r3, #0
 8002722:	d01b      	beq.n	800275c <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002726:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800272c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800272e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002730:	2202      	movs	r2, #2
 8002732:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002736:	2300      	movs	r3, #0
 8002738:	9303      	str	r3, [sp, #12]
 800273a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273c:	9302      	str	r3, [sp, #8]
 800273e:	f107 0314 	add.w	r3, r7, #20
 8002742:	9301      	str	r3, [sp, #4]
 8002744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	68b9      	ldr	r1, [r7, #8]
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f000 f850 	bl	80027f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002754:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002756:	f000 f8ed 	bl	8002934 <prvAddNewTaskToReadyList>
 800275a:	e001      	b.n	8002760 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800275c:	2300      	movs	r3, #0
 800275e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002760:	697b      	ldr	r3, [r7, #20]
	}
 8002762:	4618      	mov	r0, r3
 8002764:	3728      	adds	r7, #40	@ 0x28
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800276a:	b580      	push	{r7, lr}
 800276c:	b08c      	sub	sp, #48	@ 0x30
 800276e:	af04      	add	r7, sp, #16
 8002770:	60f8      	str	r0, [r7, #12]
 8002772:	60b9      	str	r1, [r7, #8]
 8002774:	603b      	str	r3, [r7, #0]
 8002776:	4613      	mov	r3, r2
 8002778:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800277a:	88fb      	ldrh	r3, [r7, #6]
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4618      	mov	r0, r3
 8002780:	f001 fbde 	bl	8003f40 <pvPortMalloc>
 8002784:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00e      	beq.n	80027aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800278c:	20a8      	movs	r0, #168	@ 0xa8
 800278e:	f001 fbd7 	bl	8003f40 <pvPortMalloc>
 8002792:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	697a      	ldr	r2, [r7, #20]
 800279e:	631a      	str	r2, [r3, #48]	@ 0x30
 80027a0:	e005      	b.n	80027ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80027a2:	6978      	ldr	r0, [r7, #20]
 80027a4:	f001 fc94 	bl	80040d0 <vPortFree>
 80027a8:	e001      	b.n	80027ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80027aa:	2300      	movs	r3, #0
 80027ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d017      	beq.n	80027e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80027bc:	88fa      	ldrh	r2, [r7, #6]
 80027be:	2300      	movs	r3, #0
 80027c0:	9303      	str	r3, [sp, #12]
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	9302      	str	r3, [sp, #8]
 80027c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027c8:	9301      	str	r3, [sp, #4]
 80027ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	68b9      	ldr	r1, [r7, #8]
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f000 f80e 	bl	80027f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80027d8:	69f8      	ldr	r0, [r7, #28]
 80027da:	f000 f8ab 	bl	8002934 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80027de:	2301      	movs	r3, #1
 80027e0:	61bb      	str	r3, [r7, #24]
 80027e2:	e002      	b.n	80027ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80027e4:	f04f 33ff 	mov.w	r3, #4294967295
 80027e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80027ea:	69bb      	ldr	r3, [r7, #24]
	}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3720      	adds	r7, #32
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b088      	sub	sp, #32
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
 8002800:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002804:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	461a      	mov	r2, r3
 800280c:	21a5      	movs	r1, #165	@ 0xa5
 800280e:	f001 fd75 	bl	80042fc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002814:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800281c:	3b01      	subs	r3, #1
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	f023 0307 	bic.w	r3, r3, #7
 800282a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	f003 0307 	and.w	r3, r3, #7
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00b      	beq.n	800284e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8002836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800283a:	f383 8811 	msr	BASEPRI, r3
 800283e:	f3bf 8f6f 	isb	sy
 8002842:	f3bf 8f4f 	dsb	sy
 8002846:	617b      	str	r3, [r7, #20]
}
 8002848:	bf00      	nop
 800284a:	bf00      	nop
 800284c:	e7fd      	b.n	800284a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800284e:	2300      	movs	r3, #0
 8002850:	61fb      	str	r3, [r7, #28]
 8002852:	e012      	b.n	800287a <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002854:	68ba      	ldr	r2, [r7, #8]
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	4413      	add	r3, r2
 800285a:	7819      	ldrb	r1, [r3, #0]
 800285c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	4413      	add	r3, r2
 8002862:	3334      	adds	r3, #52	@ 0x34
 8002864:	460a      	mov	r2, r1
 8002866:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002868:	68ba      	ldr	r2, [r7, #8]
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	4413      	add	r3, r2
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d006      	beq.n	8002882 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	3301      	adds	r3, #1
 8002878:	61fb      	str	r3, [r7, #28]
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	2b0f      	cmp	r3, #15
 800287e:	d9e9      	bls.n	8002854 <prvInitialiseNewTask+0x60>
 8002880:	e000      	b.n	8002884 <prvInitialiseNewTask+0x90>
		{
			break;
 8002882:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002886:	2200      	movs	r2, #0
 8002888:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800288c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800288e:	2b37      	cmp	r3, #55	@ 0x37
 8002890:	d901      	bls.n	8002896 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002892:	2337      	movs	r3, #55	@ 0x37
 8002894:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002898:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800289a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800289c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800289e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80028a0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80028a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028a4:	2200      	movs	r2, #0
 80028a6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80028a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028aa:	3304      	adds	r3, #4
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff f976 	bl	8001b9e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80028b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028b4:	3318      	adds	r3, #24
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff f971 	bl	8001b9e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80028bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028c0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028c4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80028c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80028cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028d0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80028d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028d4:	2200      	movs	r2, #0
 80028d6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80028da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80028e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028e4:	3354      	adds	r3, #84	@ 0x54
 80028e6:	224c      	movs	r2, #76	@ 0x4c
 80028e8:	2100      	movs	r1, #0
 80028ea:	4618      	mov	r0, r3
 80028ec:	f001 fd06 	bl	80042fc <memset>
 80028f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028f2:	4a0d      	ldr	r2, [pc, #52]	@ (8002928 <prvInitialiseNewTask+0x134>)
 80028f4:	659a      	str	r2, [r3, #88]	@ 0x58
 80028f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028f8:	4a0c      	ldr	r2, [pc, #48]	@ (800292c <prvInitialiseNewTask+0x138>)
 80028fa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80028fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028fe:	4a0c      	ldr	r2, [pc, #48]	@ (8002930 <prvInitialiseNewTask+0x13c>)
 8002900:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	68f9      	ldr	r1, [r7, #12]
 8002906:	69b8      	ldr	r0, [r7, #24]
 8002908:	f001 f926 	bl	8003b58 <pxPortInitialiseStack>
 800290c:	4602      	mov	r2, r0
 800290e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002910:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002914:	2b00      	cmp	r3, #0
 8002916:	d002      	beq.n	800291e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800291a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800291c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800291e:	bf00      	nop
 8002920:	3720      	adds	r7, #32
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	20001ab4 	.word	0x20001ab4
 800292c:	20001b1c 	.word	0x20001b1c
 8002930:	20001b84 	.word	0x20001b84

08002934 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800293c:	f001 f9fe 	bl	8003d3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002940:	4b2d      	ldr	r3, [pc, #180]	@ (80029f8 <prvAddNewTaskToReadyList+0xc4>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	3301      	adds	r3, #1
 8002946:	4a2c      	ldr	r2, [pc, #176]	@ (80029f8 <prvAddNewTaskToReadyList+0xc4>)
 8002948:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800294a:	4b2c      	ldr	r3, [pc, #176]	@ (80029fc <prvAddNewTaskToReadyList+0xc8>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d109      	bne.n	8002966 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002952:	4a2a      	ldr	r2, [pc, #168]	@ (80029fc <prvAddNewTaskToReadyList+0xc8>)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002958:	4b27      	ldr	r3, [pc, #156]	@ (80029f8 <prvAddNewTaskToReadyList+0xc4>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d110      	bne.n	8002982 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002960:	f000 fc30 	bl	80031c4 <prvInitialiseTaskLists>
 8002964:	e00d      	b.n	8002982 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002966:	4b26      	ldr	r3, [pc, #152]	@ (8002a00 <prvAddNewTaskToReadyList+0xcc>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d109      	bne.n	8002982 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800296e:	4b23      	ldr	r3, [pc, #140]	@ (80029fc <prvAddNewTaskToReadyList+0xc8>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002978:	429a      	cmp	r2, r3
 800297a:	d802      	bhi.n	8002982 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800297c:	4a1f      	ldr	r2, [pc, #124]	@ (80029fc <prvAddNewTaskToReadyList+0xc8>)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002982:	4b20      	ldr	r3, [pc, #128]	@ (8002a04 <prvAddNewTaskToReadyList+0xd0>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	3301      	adds	r3, #1
 8002988:	4a1e      	ldr	r2, [pc, #120]	@ (8002a04 <prvAddNewTaskToReadyList+0xd0>)
 800298a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800298c:	4b1d      	ldr	r3, [pc, #116]	@ (8002a04 <prvAddNewTaskToReadyList+0xd0>)
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002998:	4b1b      	ldr	r3, [pc, #108]	@ (8002a08 <prvAddNewTaskToReadyList+0xd4>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	429a      	cmp	r2, r3
 800299e:	d903      	bls.n	80029a8 <prvAddNewTaskToReadyList+0x74>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029a4:	4a18      	ldr	r2, [pc, #96]	@ (8002a08 <prvAddNewTaskToReadyList+0xd4>)
 80029a6:	6013      	str	r3, [r2, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029ac:	4613      	mov	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	4413      	add	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4a15      	ldr	r2, [pc, #84]	@ (8002a0c <prvAddNewTaskToReadyList+0xd8>)
 80029b6:	441a      	add	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3304      	adds	r3, #4
 80029bc:	4619      	mov	r1, r3
 80029be:	4610      	mov	r0, r2
 80029c0:	f7ff f8f9 	bl	8001bb6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80029c4:	f001 f9ea 	bl	8003d9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80029c8:	4b0d      	ldr	r3, [pc, #52]	@ (8002a00 <prvAddNewTaskToReadyList+0xcc>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00e      	beq.n	80029ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80029d0:	4b0a      	ldr	r3, [pc, #40]	@ (80029fc <prvAddNewTaskToReadyList+0xc8>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029da:	429a      	cmp	r2, r3
 80029dc:	d207      	bcs.n	80029ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80029de:	4b0c      	ldr	r3, [pc, #48]	@ (8002a10 <prvAddNewTaskToReadyList+0xdc>)
 80029e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	f3bf 8f4f 	dsb	sy
 80029ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80029ee:	bf00      	nop
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	20000d3c 	.word	0x20000d3c
 80029fc:	20000868 	.word	0x20000868
 8002a00:	20000d48 	.word	0x20000d48
 8002a04:	20000d58 	.word	0x20000d58
 8002a08:	20000d44 	.word	0x20000d44
 8002a0c:	2000086c 	.word	0x2000086c
 8002a10:	e000ed04 	.word	0xe000ed04

08002a14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d018      	beq.n	8002a58 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002a26:	4b14      	ldr	r3, [pc, #80]	@ (8002a78 <vTaskDelay+0x64>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00b      	beq.n	8002a46 <vTaskDelay+0x32>
	__asm volatile
 8002a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a32:	f383 8811 	msr	BASEPRI, r3
 8002a36:	f3bf 8f6f 	isb	sy
 8002a3a:	f3bf 8f4f 	dsb	sy
 8002a3e:	60bb      	str	r3, [r7, #8]
}
 8002a40:	bf00      	nop
 8002a42:	bf00      	nop
 8002a44:	e7fd      	b.n	8002a42 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002a46:	f000 f88b 	bl	8002b60 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 fd0f 	bl	8003470 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002a52:	f000 f893 	bl	8002b7c <xTaskResumeAll>
 8002a56:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d107      	bne.n	8002a6e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002a5e:	4b07      	ldr	r3, [pc, #28]	@ (8002a7c <vTaskDelay+0x68>)
 8002a60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	f3bf 8f4f 	dsb	sy
 8002a6a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002a6e:	bf00      	nop
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	20000d64 	.word	0x20000d64
 8002a7c:	e000ed04 	.word	0xe000ed04

08002a80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b08a      	sub	sp, #40	@ 0x28
 8002a84:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002a86:	2300      	movs	r3, #0
 8002a88:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002a8e:	463a      	mov	r2, r7
 8002a90:	1d39      	adds	r1, r7, #4
 8002a92:	f107 0308 	add.w	r3, r7, #8
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff f830 	bl	8001afc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002a9c:	6839      	ldr	r1, [r7, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68ba      	ldr	r2, [r7, #8]
 8002aa2:	9202      	str	r2, [sp, #8]
 8002aa4:	9301      	str	r3, [sp, #4]
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	9300      	str	r3, [sp, #0]
 8002aaa:	2300      	movs	r3, #0
 8002aac:	460a      	mov	r2, r1
 8002aae:	4924      	ldr	r1, [pc, #144]	@ (8002b40 <vTaskStartScheduler+0xc0>)
 8002ab0:	4824      	ldr	r0, [pc, #144]	@ (8002b44 <vTaskStartScheduler+0xc4>)
 8002ab2:	f7ff fdfb 	bl	80026ac <xTaskCreateStatic>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	4a23      	ldr	r2, [pc, #140]	@ (8002b48 <vTaskStartScheduler+0xc8>)
 8002aba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002abc:	4b22      	ldr	r3, [pc, #136]	@ (8002b48 <vTaskStartScheduler+0xc8>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d002      	beq.n	8002aca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	617b      	str	r3, [r7, #20]
 8002ac8:	e001      	b.n	8002ace <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d102      	bne.n	8002ada <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002ad4:	f000 fd20 	bl	8003518 <xTimerCreateTimerTask>
 8002ad8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d11b      	bne.n	8002b18 <vTaskStartScheduler+0x98>
	__asm volatile
 8002ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ae4:	f383 8811 	msr	BASEPRI, r3
 8002ae8:	f3bf 8f6f 	isb	sy
 8002aec:	f3bf 8f4f 	dsb	sy
 8002af0:	613b      	str	r3, [r7, #16]
}
 8002af2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002af4:	4b15      	ldr	r3, [pc, #84]	@ (8002b4c <vTaskStartScheduler+0xcc>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	3354      	adds	r3, #84	@ 0x54
 8002afa:	4a15      	ldr	r2, [pc, #84]	@ (8002b50 <vTaskStartScheduler+0xd0>)
 8002afc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002afe:	4b15      	ldr	r3, [pc, #84]	@ (8002b54 <vTaskStartScheduler+0xd4>)
 8002b00:	f04f 32ff 	mov.w	r2, #4294967295
 8002b04:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002b06:	4b14      	ldr	r3, [pc, #80]	@ (8002b58 <vTaskStartScheduler+0xd8>)
 8002b08:	2201      	movs	r2, #1
 8002b0a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002b0c:	4b13      	ldr	r3, [pc, #76]	@ (8002b5c <vTaskStartScheduler+0xdc>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002b12:	f001 f8a1 	bl	8003c58 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002b16:	e00f      	b.n	8002b38 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b1e:	d10b      	bne.n	8002b38 <vTaskStartScheduler+0xb8>
	__asm volatile
 8002b20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b24:	f383 8811 	msr	BASEPRI, r3
 8002b28:	f3bf 8f6f 	isb	sy
 8002b2c:	f3bf 8f4f 	dsb	sy
 8002b30:	60fb      	str	r3, [r7, #12]
}
 8002b32:	bf00      	nop
 8002b34:	bf00      	nop
 8002b36:	e7fd      	b.n	8002b34 <vTaskStartScheduler+0xb4>
}
 8002b38:	bf00      	nop
 8002b3a:	3718      	adds	r7, #24
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	0800450c 	.word	0x0800450c
 8002b44:	08003195 	.word	0x08003195
 8002b48:	20000d60 	.word	0x20000d60
 8002b4c:	20000868 	.word	0x20000868
 8002b50:	20000010 	.word	0x20000010
 8002b54:	20000d5c 	.word	0x20000d5c
 8002b58:	20000d48 	.word	0x20000d48
 8002b5c:	20000d40 	.word	0x20000d40

08002b60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002b64:	4b04      	ldr	r3, [pc, #16]	@ (8002b78 <vTaskSuspendAll+0x18>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	3301      	adds	r3, #1
 8002b6a:	4a03      	ldr	r2, [pc, #12]	@ (8002b78 <vTaskSuspendAll+0x18>)
 8002b6c:	6013      	str	r3, [r2, #0]
}
 8002b6e:	bf00      	nop
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bc80      	pop	{r7}
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	20000d64 	.word	0x20000d64

08002b7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002b82:	2300      	movs	r3, #0
 8002b84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002b86:	2300      	movs	r3, #0
 8002b88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002b8a:	4b42      	ldr	r3, [pc, #264]	@ (8002c94 <xTaskResumeAll+0x118>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10b      	bne.n	8002baa <xTaskResumeAll+0x2e>
	__asm volatile
 8002b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b96:	f383 8811 	msr	BASEPRI, r3
 8002b9a:	f3bf 8f6f 	isb	sy
 8002b9e:	f3bf 8f4f 	dsb	sy
 8002ba2:	603b      	str	r3, [r7, #0]
}
 8002ba4:	bf00      	nop
 8002ba6:	bf00      	nop
 8002ba8:	e7fd      	b.n	8002ba6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002baa:	f001 f8c7 	bl	8003d3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002bae:	4b39      	ldr	r3, [pc, #228]	@ (8002c94 <xTaskResumeAll+0x118>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	4a37      	ldr	r2, [pc, #220]	@ (8002c94 <xTaskResumeAll+0x118>)
 8002bb6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002bb8:	4b36      	ldr	r3, [pc, #216]	@ (8002c94 <xTaskResumeAll+0x118>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d162      	bne.n	8002c86 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002bc0:	4b35      	ldr	r3, [pc, #212]	@ (8002c98 <xTaskResumeAll+0x11c>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d05e      	beq.n	8002c86 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002bc8:	e02f      	b.n	8002c2a <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002bca:	4b34      	ldr	r3, [pc, #208]	@ (8002c9c <xTaskResumeAll+0x120>)
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	3318      	adds	r3, #24
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff f848 	bl	8001c6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	3304      	adds	r3, #4
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff f843 	bl	8001c6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bea:	4b2d      	ldr	r3, [pc, #180]	@ (8002ca0 <xTaskResumeAll+0x124>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d903      	bls.n	8002bfa <xTaskResumeAll+0x7e>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf6:	4a2a      	ldr	r2, [pc, #168]	@ (8002ca0 <xTaskResumeAll+0x124>)
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bfe:	4613      	mov	r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	4413      	add	r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	4a27      	ldr	r2, [pc, #156]	@ (8002ca4 <xTaskResumeAll+0x128>)
 8002c08:	441a      	add	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	4619      	mov	r1, r3
 8002c10:	4610      	mov	r0, r2
 8002c12:	f7fe ffd0 	bl	8001bb6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c1a:	4b23      	ldr	r3, [pc, #140]	@ (8002ca8 <xTaskResumeAll+0x12c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d302      	bcc.n	8002c2a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8002c24:	4b21      	ldr	r3, [pc, #132]	@ (8002cac <xTaskResumeAll+0x130>)
 8002c26:	2201      	movs	r2, #1
 8002c28:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c2a:	4b1c      	ldr	r3, [pc, #112]	@ (8002c9c <xTaskResumeAll+0x120>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1cb      	bne.n	8002bca <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002c38:	f000 fb68 	bl	800330c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002c3c:	4b1c      	ldr	r3, [pc, #112]	@ (8002cb0 <xTaskResumeAll+0x134>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d010      	beq.n	8002c6a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002c48:	f000 f844 	bl	8002cd4 <xTaskIncrementTick>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d002      	beq.n	8002c58 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8002c52:	4b16      	ldr	r3, [pc, #88]	@ (8002cac <xTaskResumeAll+0x130>)
 8002c54:	2201      	movs	r2, #1
 8002c56:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1f1      	bne.n	8002c48 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8002c64:	4b12      	ldr	r3, [pc, #72]	@ (8002cb0 <xTaskResumeAll+0x134>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002c6a:	4b10      	ldr	r3, [pc, #64]	@ (8002cac <xTaskResumeAll+0x130>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d009      	beq.n	8002c86 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002c72:	2301      	movs	r3, #1
 8002c74:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002c76:	4b0f      	ldr	r3, [pc, #60]	@ (8002cb4 <xTaskResumeAll+0x138>)
 8002c78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	f3bf 8f4f 	dsb	sy
 8002c82:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002c86:	f001 f889 	bl	8003d9c <vPortExitCritical>

	return xAlreadyYielded;
 8002c8a:	68bb      	ldr	r3, [r7, #8]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3710      	adds	r7, #16
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	20000d64 	.word	0x20000d64
 8002c98:	20000d3c 	.word	0x20000d3c
 8002c9c:	20000cfc 	.word	0x20000cfc
 8002ca0:	20000d44 	.word	0x20000d44
 8002ca4:	2000086c 	.word	0x2000086c
 8002ca8:	20000868 	.word	0x20000868
 8002cac:	20000d50 	.word	0x20000d50
 8002cb0:	20000d4c 	.word	0x20000d4c
 8002cb4:	e000ed04 	.word	0xe000ed04

08002cb8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002cbe:	4b04      	ldr	r3, [pc, #16]	@ (8002cd0 <xTaskGetTickCount+0x18>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002cc4:	687b      	ldr	r3, [r7, #4]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bc80      	pop	{r7}
 8002cce:	4770      	bx	lr
 8002cd0:	20000d40 	.word	0x20000d40

08002cd4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002cde:	4b52      	ldr	r3, [pc, #328]	@ (8002e28 <xTaskIncrementTick+0x154>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f040 808f 	bne.w	8002e06 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002ce8:	4b50      	ldr	r3, [pc, #320]	@ (8002e2c <xTaskIncrementTick+0x158>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	3301      	adds	r3, #1
 8002cee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002cf0:	4a4e      	ldr	r2, [pc, #312]	@ (8002e2c <xTaskIncrementTick+0x158>)
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d121      	bne.n	8002d40 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002cfc:	4b4c      	ldr	r3, [pc, #304]	@ (8002e30 <xTaskIncrementTick+0x15c>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00b      	beq.n	8002d1e <xTaskIncrementTick+0x4a>
	__asm volatile
 8002d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d0a:	f383 8811 	msr	BASEPRI, r3
 8002d0e:	f3bf 8f6f 	isb	sy
 8002d12:	f3bf 8f4f 	dsb	sy
 8002d16:	603b      	str	r3, [r7, #0]
}
 8002d18:	bf00      	nop
 8002d1a:	bf00      	nop
 8002d1c:	e7fd      	b.n	8002d1a <xTaskIncrementTick+0x46>
 8002d1e:	4b44      	ldr	r3, [pc, #272]	@ (8002e30 <xTaskIncrementTick+0x15c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	4b43      	ldr	r3, [pc, #268]	@ (8002e34 <xTaskIncrementTick+0x160>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a41      	ldr	r2, [pc, #260]	@ (8002e30 <xTaskIncrementTick+0x15c>)
 8002d2a:	6013      	str	r3, [r2, #0]
 8002d2c:	4a41      	ldr	r2, [pc, #260]	@ (8002e34 <xTaskIncrementTick+0x160>)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	4b41      	ldr	r3, [pc, #260]	@ (8002e38 <xTaskIncrementTick+0x164>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	3301      	adds	r3, #1
 8002d38:	4a3f      	ldr	r2, [pc, #252]	@ (8002e38 <xTaskIncrementTick+0x164>)
 8002d3a:	6013      	str	r3, [r2, #0]
 8002d3c:	f000 fae6 	bl	800330c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002d40:	4b3e      	ldr	r3, [pc, #248]	@ (8002e3c <xTaskIncrementTick+0x168>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d34e      	bcc.n	8002de8 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d4a:	4b39      	ldr	r3, [pc, #228]	@ (8002e30 <xTaskIncrementTick+0x15c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d101      	bne.n	8002d58 <xTaskIncrementTick+0x84>
 8002d54:	2301      	movs	r3, #1
 8002d56:	e000      	b.n	8002d5a <xTaskIncrementTick+0x86>
 8002d58:	2300      	movs	r3, #0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d004      	beq.n	8002d68 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d5e:	4b37      	ldr	r3, [pc, #220]	@ (8002e3c <xTaskIncrementTick+0x168>)
 8002d60:	f04f 32ff 	mov.w	r2, #4294967295
 8002d64:	601a      	str	r2, [r3, #0]
					break;
 8002d66:	e03f      	b.n	8002de8 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002d68:	4b31      	ldr	r3, [pc, #196]	@ (8002e30 <xTaskIncrementTick+0x15c>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d203      	bcs.n	8002d88 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002d80:	4a2e      	ldr	r2, [pc, #184]	@ (8002e3c <xTaskIncrementTick+0x168>)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6013      	str	r3, [r2, #0]
						break;
 8002d86:	e02f      	b.n	8002de8 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7fe ff6d 	bl	8001c6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d004      	beq.n	8002da4 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	3318      	adds	r3, #24
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fe ff64 	bl	8001c6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002da8:	4b25      	ldr	r3, [pc, #148]	@ (8002e40 <xTaskIncrementTick+0x16c>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d903      	bls.n	8002db8 <xTaskIncrementTick+0xe4>
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db4:	4a22      	ldr	r2, [pc, #136]	@ (8002e40 <xTaskIncrementTick+0x16c>)
 8002db6:	6013      	str	r3, [r2, #0]
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4413      	add	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4a1f      	ldr	r2, [pc, #124]	@ (8002e44 <xTaskIncrementTick+0x170>)
 8002dc6:	441a      	add	r2, r3
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	3304      	adds	r3, #4
 8002dcc:	4619      	mov	r1, r3
 8002dce:	4610      	mov	r0, r2
 8002dd0:	f7fe fef1 	bl	8001bb6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8002e48 <xTaskIncrementTick+0x174>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d3b3      	bcc.n	8002d4a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8002de2:	2301      	movs	r3, #1
 8002de4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002de6:	e7b0      	b.n	8002d4a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002de8:	4b17      	ldr	r3, [pc, #92]	@ (8002e48 <xTaskIncrementTick+0x174>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dee:	4915      	ldr	r1, [pc, #84]	@ (8002e44 <xTaskIncrementTick+0x170>)
 8002df0:	4613      	mov	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d907      	bls.n	8002e10 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8002e00:	2301      	movs	r3, #1
 8002e02:	617b      	str	r3, [r7, #20]
 8002e04:	e004      	b.n	8002e10 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002e06:	4b11      	ldr	r3, [pc, #68]	@ (8002e4c <xTaskIncrementTick+0x178>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	4a0f      	ldr	r2, [pc, #60]	@ (8002e4c <xTaskIncrementTick+0x178>)
 8002e0e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002e10:	4b0f      	ldr	r3, [pc, #60]	@ (8002e50 <xTaskIncrementTick+0x17c>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002e1c:	697b      	ldr	r3, [r7, #20]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3718      	adds	r7, #24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	20000d64 	.word	0x20000d64
 8002e2c:	20000d40 	.word	0x20000d40
 8002e30:	20000cf4 	.word	0x20000cf4
 8002e34:	20000cf8 	.word	0x20000cf8
 8002e38:	20000d54 	.word	0x20000d54
 8002e3c:	20000d5c 	.word	0x20000d5c
 8002e40:	20000d44 	.word	0x20000d44
 8002e44:	2000086c 	.word	0x2000086c
 8002e48:	20000868 	.word	0x20000868
 8002e4c:	20000d4c 	.word	0x20000d4c
 8002e50:	20000d50 	.word	0x20000d50

08002e54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002e5a:	4b2a      	ldr	r3, [pc, #168]	@ (8002f04 <vTaskSwitchContext+0xb0>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d003      	beq.n	8002e6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002e62:	4b29      	ldr	r3, [pc, #164]	@ (8002f08 <vTaskSwitchContext+0xb4>)
 8002e64:	2201      	movs	r2, #1
 8002e66:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002e68:	e047      	b.n	8002efa <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8002e6a:	4b27      	ldr	r3, [pc, #156]	@ (8002f08 <vTaskSwitchContext+0xb4>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002e70:	4b26      	ldr	r3, [pc, #152]	@ (8002f0c <vTaskSwitchContext+0xb8>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	60fb      	str	r3, [r7, #12]
 8002e76:	e011      	b.n	8002e9c <vTaskSwitchContext+0x48>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10b      	bne.n	8002e96 <vTaskSwitchContext+0x42>
	__asm volatile
 8002e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e82:	f383 8811 	msr	BASEPRI, r3
 8002e86:	f3bf 8f6f 	isb	sy
 8002e8a:	f3bf 8f4f 	dsb	sy
 8002e8e:	607b      	str	r3, [r7, #4]
}
 8002e90:	bf00      	nop
 8002e92:	bf00      	nop
 8002e94:	e7fd      	b.n	8002e92 <vTaskSwitchContext+0x3e>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	60fb      	str	r3, [r7, #12]
 8002e9c:	491c      	ldr	r1, [pc, #112]	@ (8002f10 <vTaskSwitchContext+0xbc>)
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0e3      	beq.n	8002e78 <vTaskSwitchContext+0x24>
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4a15      	ldr	r2, [pc, #84]	@ (8002f10 <vTaskSwitchContext+0xbc>)
 8002ebc:	4413      	add	r3, r2
 8002ebe:	60bb      	str	r3, [r7, #8]
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	605a      	str	r2, [r3, #4]
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	3308      	adds	r3, #8
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d104      	bne.n	8002ee0 <vTaskSwitchContext+0x8c>
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	605a      	str	r2, [r3, #4]
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	4a0b      	ldr	r2, [pc, #44]	@ (8002f14 <vTaskSwitchContext+0xc0>)
 8002ee8:	6013      	str	r3, [r2, #0]
 8002eea:	4a08      	ldr	r2, [pc, #32]	@ (8002f0c <vTaskSwitchContext+0xb8>)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002ef0:	4b08      	ldr	r3, [pc, #32]	@ (8002f14 <vTaskSwitchContext+0xc0>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	3354      	adds	r3, #84	@ 0x54
 8002ef6:	4a08      	ldr	r2, [pc, #32]	@ (8002f18 <vTaskSwitchContext+0xc4>)
 8002ef8:	6013      	str	r3, [r2, #0]
}
 8002efa:	bf00      	nop
 8002efc:	3714      	adds	r7, #20
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr
 8002f04:	20000d64 	.word	0x20000d64
 8002f08:	20000d50 	.word	0x20000d50
 8002f0c:	20000d44 	.word	0x20000d44
 8002f10:	2000086c 	.word	0x2000086c
 8002f14:	20000868 	.word	0x20000868
 8002f18:	20000010 	.word	0x20000010

08002f1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d10b      	bne.n	8002f44 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8002f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f30:	f383 8811 	msr	BASEPRI, r3
 8002f34:	f3bf 8f6f 	isb	sy
 8002f38:	f3bf 8f4f 	dsb	sy
 8002f3c:	60fb      	str	r3, [r7, #12]
}
 8002f3e:	bf00      	nop
 8002f40:	bf00      	nop
 8002f42:	e7fd      	b.n	8002f40 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002f44:	4b07      	ldr	r3, [pc, #28]	@ (8002f64 <vTaskPlaceOnEventList+0x48>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	3318      	adds	r3, #24
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f7fe fe55 	bl	8001bfc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002f52:	2101      	movs	r1, #1
 8002f54:	6838      	ldr	r0, [r7, #0]
 8002f56:	f000 fa8b 	bl	8003470 <prvAddCurrentTaskToDelayedList>
}
 8002f5a:	bf00      	nop
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	20000868 	.word	0x20000868

08002f68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10b      	bne.n	8002f92 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8002f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f7e:	f383 8811 	msr	BASEPRI, r3
 8002f82:	f3bf 8f6f 	isb	sy
 8002f86:	f3bf 8f4f 	dsb	sy
 8002f8a:	617b      	str	r3, [r7, #20]
}
 8002f8c:	bf00      	nop
 8002f8e:	bf00      	nop
 8002f90:	e7fd      	b.n	8002f8e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002f92:	4b0a      	ldr	r3, [pc, #40]	@ (8002fbc <vTaskPlaceOnEventListRestricted+0x54>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	3318      	adds	r3, #24
 8002f98:	4619      	mov	r1, r3
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f7fe fe0b 	bl	8001bb6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d002      	beq.n	8002fac <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8002fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8002faa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002fac:	6879      	ldr	r1, [r7, #4]
 8002fae:	68b8      	ldr	r0, [r7, #8]
 8002fb0:	f000 fa5e 	bl	8003470 <prvAddCurrentTaskToDelayedList>
	}
 8002fb4:	bf00      	nop
 8002fb6:	3718      	adds	r7, #24
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	20000868 	.word	0x20000868

08002fc0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10b      	bne.n	8002fee <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8002fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fda:	f383 8811 	msr	BASEPRI, r3
 8002fde:	f3bf 8f6f 	isb	sy
 8002fe2:	f3bf 8f4f 	dsb	sy
 8002fe6:	60fb      	str	r3, [r7, #12]
}
 8002fe8:	bf00      	nop
 8002fea:	bf00      	nop
 8002fec:	e7fd      	b.n	8002fea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	3318      	adds	r3, #24
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7fe fe3a 	bl	8001c6c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ff8:	4b1d      	ldr	r3, [pc, #116]	@ (8003070 <xTaskRemoveFromEventList+0xb0>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d11d      	bne.n	800303c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	3304      	adds	r3, #4
 8003004:	4618      	mov	r0, r3
 8003006:	f7fe fe31 	bl	8001c6c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800300e:	4b19      	ldr	r3, [pc, #100]	@ (8003074 <xTaskRemoveFromEventList+0xb4>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	429a      	cmp	r2, r3
 8003014:	d903      	bls.n	800301e <xTaskRemoveFromEventList+0x5e>
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800301a:	4a16      	ldr	r2, [pc, #88]	@ (8003074 <xTaskRemoveFromEventList+0xb4>)
 800301c:	6013      	str	r3, [r2, #0]
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003022:	4613      	mov	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4413      	add	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4a13      	ldr	r2, [pc, #76]	@ (8003078 <xTaskRemoveFromEventList+0xb8>)
 800302c:	441a      	add	r2, r3
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	3304      	adds	r3, #4
 8003032:	4619      	mov	r1, r3
 8003034:	4610      	mov	r0, r2
 8003036:	f7fe fdbe 	bl	8001bb6 <vListInsertEnd>
 800303a:	e005      	b.n	8003048 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	3318      	adds	r3, #24
 8003040:	4619      	mov	r1, r3
 8003042:	480e      	ldr	r0, [pc, #56]	@ (800307c <xTaskRemoveFromEventList+0xbc>)
 8003044:	f7fe fdb7 	bl	8001bb6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800304c:	4b0c      	ldr	r3, [pc, #48]	@ (8003080 <xTaskRemoveFromEventList+0xc0>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003052:	429a      	cmp	r2, r3
 8003054:	d905      	bls.n	8003062 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003056:	2301      	movs	r3, #1
 8003058:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800305a:	4b0a      	ldr	r3, [pc, #40]	@ (8003084 <xTaskRemoveFromEventList+0xc4>)
 800305c:	2201      	movs	r2, #1
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	e001      	b.n	8003066 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003062:	2300      	movs	r3, #0
 8003064:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003066:	697b      	ldr	r3, [r7, #20]
}
 8003068:	4618      	mov	r0, r3
 800306a:	3718      	adds	r7, #24
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	20000d64 	.word	0x20000d64
 8003074:	20000d44 	.word	0x20000d44
 8003078:	2000086c 	.word	0x2000086c
 800307c:	20000cfc 	.word	0x20000cfc
 8003080:	20000868 	.word	0x20000868
 8003084:	20000d50 	.word	0x20000d50

08003088 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003090:	4b06      	ldr	r3, [pc, #24]	@ (80030ac <vTaskInternalSetTimeOutState+0x24>)
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003098:	4b05      	ldr	r3, [pc, #20]	@ (80030b0 <vTaskInternalSetTimeOutState+0x28>)
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	605a      	str	r2, [r3, #4]
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bc80      	pop	{r7}
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	20000d54 	.word	0x20000d54
 80030b0:	20000d40 	.word	0x20000d40

080030b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b088      	sub	sp, #32
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10b      	bne.n	80030dc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80030c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030c8:	f383 8811 	msr	BASEPRI, r3
 80030cc:	f3bf 8f6f 	isb	sy
 80030d0:	f3bf 8f4f 	dsb	sy
 80030d4:	613b      	str	r3, [r7, #16]
}
 80030d6:	bf00      	nop
 80030d8:	bf00      	nop
 80030da:	e7fd      	b.n	80030d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10b      	bne.n	80030fa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80030e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030e6:	f383 8811 	msr	BASEPRI, r3
 80030ea:	f3bf 8f6f 	isb	sy
 80030ee:	f3bf 8f4f 	dsb	sy
 80030f2:	60fb      	str	r3, [r7, #12]
}
 80030f4:	bf00      	nop
 80030f6:	bf00      	nop
 80030f8:	e7fd      	b.n	80030f6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80030fa:	f000 fe1f 	bl	8003d3c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80030fe:	4b1d      	ldr	r3, [pc, #116]	@ (8003174 <xTaskCheckForTimeOut+0xc0>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003116:	d102      	bne.n	800311e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003118:	2300      	movs	r3, #0
 800311a:	61fb      	str	r3, [r7, #28]
 800311c:	e023      	b.n	8003166 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	4b15      	ldr	r3, [pc, #84]	@ (8003178 <xTaskCheckForTimeOut+0xc4>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	429a      	cmp	r2, r3
 8003128:	d007      	beq.n	800313a <xTaskCheckForTimeOut+0x86>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	429a      	cmp	r2, r3
 8003132:	d302      	bcc.n	800313a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003134:	2301      	movs	r3, #1
 8003136:	61fb      	str	r3, [r7, #28]
 8003138:	e015      	b.n	8003166 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	429a      	cmp	r2, r3
 8003142:	d20b      	bcs.n	800315c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	1ad2      	subs	r2, r2, r3
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f7ff ff99 	bl	8003088 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003156:	2300      	movs	r3, #0
 8003158:	61fb      	str	r3, [r7, #28]
 800315a:	e004      	b.n	8003166 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	2200      	movs	r2, #0
 8003160:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003162:	2301      	movs	r3, #1
 8003164:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003166:	f000 fe19 	bl	8003d9c <vPortExitCritical>

	return xReturn;
 800316a:	69fb      	ldr	r3, [r7, #28]
}
 800316c:	4618      	mov	r0, r3
 800316e:	3720      	adds	r7, #32
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	20000d40 	.word	0x20000d40
 8003178:	20000d54 	.word	0x20000d54

0800317c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003180:	4b03      	ldr	r3, [pc, #12]	@ (8003190 <vTaskMissedYield+0x14>)
 8003182:	2201      	movs	r2, #1
 8003184:	601a      	str	r2, [r3, #0]
}
 8003186:	bf00      	nop
 8003188:	46bd      	mov	sp, r7
 800318a:	bc80      	pop	{r7}
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	20000d50 	.word	0x20000d50

08003194 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800319c:	f000 f852 	bl	8003244 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80031a0:	4b06      	ldr	r3, [pc, #24]	@ (80031bc <prvIdleTask+0x28>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d9f9      	bls.n	800319c <prvIdleTask+0x8>
			{
				taskYIELD();
 80031a8:	4b05      	ldr	r3, [pc, #20]	@ (80031c0 <prvIdleTask+0x2c>)
 80031aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031ae:	601a      	str	r2, [r3, #0]
 80031b0:	f3bf 8f4f 	dsb	sy
 80031b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80031b8:	e7f0      	b.n	800319c <prvIdleTask+0x8>
 80031ba:	bf00      	nop
 80031bc:	2000086c 	.word	0x2000086c
 80031c0:	e000ed04 	.word	0xe000ed04

080031c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031ca:	2300      	movs	r3, #0
 80031cc:	607b      	str	r3, [r7, #4]
 80031ce:	e00c      	b.n	80031ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	4413      	add	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4a12      	ldr	r2, [pc, #72]	@ (8003224 <prvInitialiseTaskLists+0x60>)
 80031dc:	4413      	add	r3, r2
 80031de:	4618      	mov	r0, r3
 80031e0:	f7fe fcbe 	bl	8001b60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	3301      	adds	r3, #1
 80031e8:	607b      	str	r3, [r7, #4]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b37      	cmp	r3, #55	@ 0x37
 80031ee:	d9ef      	bls.n	80031d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80031f0:	480d      	ldr	r0, [pc, #52]	@ (8003228 <prvInitialiseTaskLists+0x64>)
 80031f2:	f7fe fcb5 	bl	8001b60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80031f6:	480d      	ldr	r0, [pc, #52]	@ (800322c <prvInitialiseTaskLists+0x68>)
 80031f8:	f7fe fcb2 	bl	8001b60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80031fc:	480c      	ldr	r0, [pc, #48]	@ (8003230 <prvInitialiseTaskLists+0x6c>)
 80031fe:	f7fe fcaf 	bl	8001b60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003202:	480c      	ldr	r0, [pc, #48]	@ (8003234 <prvInitialiseTaskLists+0x70>)
 8003204:	f7fe fcac 	bl	8001b60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003208:	480b      	ldr	r0, [pc, #44]	@ (8003238 <prvInitialiseTaskLists+0x74>)
 800320a:	f7fe fca9 	bl	8001b60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800320e:	4b0b      	ldr	r3, [pc, #44]	@ (800323c <prvInitialiseTaskLists+0x78>)
 8003210:	4a05      	ldr	r2, [pc, #20]	@ (8003228 <prvInitialiseTaskLists+0x64>)
 8003212:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003214:	4b0a      	ldr	r3, [pc, #40]	@ (8003240 <prvInitialiseTaskLists+0x7c>)
 8003216:	4a05      	ldr	r2, [pc, #20]	@ (800322c <prvInitialiseTaskLists+0x68>)
 8003218:	601a      	str	r2, [r3, #0]
}
 800321a:	bf00      	nop
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	2000086c 	.word	0x2000086c
 8003228:	20000ccc 	.word	0x20000ccc
 800322c:	20000ce0 	.word	0x20000ce0
 8003230:	20000cfc 	.word	0x20000cfc
 8003234:	20000d10 	.word	0x20000d10
 8003238:	20000d28 	.word	0x20000d28
 800323c:	20000cf4 	.word	0x20000cf4
 8003240:	20000cf8 	.word	0x20000cf8

08003244 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800324a:	e019      	b.n	8003280 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800324c:	f000 fd76 	bl	8003d3c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003250:	4b10      	ldr	r3, [pc, #64]	@ (8003294 <prvCheckTasksWaitingTermination+0x50>)
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3304      	adds	r3, #4
 800325c:	4618      	mov	r0, r3
 800325e:	f7fe fd05 	bl	8001c6c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003262:	4b0d      	ldr	r3, [pc, #52]	@ (8003298 <prvCheckTasksWaitingTermination+0x54>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	3b01      	subs	r3, #1
 8003268:	4a0b      	ldr	r2, [pc, #44]	@ (8003298 <prvCheckTasksWaitingTermination+0x54>)
 800326a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800326c:	4b0b      	ldr	r3, [pc, #44]	@ (800329c <prvCheckTasksWaitingTermination+0x58>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	3b01      	subs	r3, #1
 8003272:	4a0a      	ldr	r2, [pc, #40]	@ (800329c <prvCheckTasksWaitingTermination+0x58>)
 8003274:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003276:	f000 fd91 	bl	8003d9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 f810 	bl	80032a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003280:	4b06      	ldr	r3, [pc, #24]	@ (800329c <prvCheckTasksWaitingTermination+0x58>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1e1      	bne.n	800324c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003288:	bf00      	nop
 800328a:	bf00      	nop
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	20000d10 	.word	0x20000d10
 8003298:	20000d3c 	.word	0x20000d3c
 800329c:	20000d24 	.word	0x20000d24

080032a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3354      	adds	r3, #84	@ 0x54
 80032ac:	4618      	mov	r0, r3
 80032ae:	f001 f82d 	bl	800430c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d108      	bne.n	80032ce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c0:	4618      	mov	r0, r3
 80032c2:	f000 ff05 	bl	80040d0 <vPortFree>
				vPortFree( pxTCB );
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 ff02 	bl	80040d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80032cc:	e019      	b.n	8003302 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d103      	bne.n	80032e0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 fef9 	bl	80040d0 <vPortFree>
	}
 80032de:	e010      	b.n	8003302 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d00b      	beq.n	8003302 <prvDeleteTCB+0x62>
	__asm volatile
 80032ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032ee:	f383 8811 	msr	BASEPRI, r3
 80032f2:	f3bf 8f6f 	isb	sy
 80032f6:	f3bf 8f4f 	dsb	sy
 80032fa:	60fb      	str	r3, [r7, #12]
}
 80032fc:	bf00      	nop
 80032fe:	bf00      	nop
 8003300:	e7fd      	b.n	80032fe <prvDeleteTCB+0x5e>
	}
 8003302:	bf00      	nop
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
	...

0800330c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003312:	4b0e      	ldr	r3, [pc, #56]	@ (800334c <prvResetNextTaskUnblockTime+0x40>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d101      	bne.n	8003320 <prvResetNextTaskUnblockTime+0x14>
 800331c:	2301      	movs	r3, #1
 800331e:	e000      	b.n	8003322 <prvResetNextTaskUnblockTime+0x16>
 8003320:	2300      	movs	r3, #0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d004      	beq.n	8003330 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003326:	4b0a      	ldr	r3, [pc, #40]	@ (8003350 <prvResetNextTaskUnblockTime+0x44>)
 8003328:	f04f 32ff 	mov.w	r2, #4294967295
 800332c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800332e:	e008      	b.n	8003342 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003330:	4b06      	ldr	r3, [pc, #24]	@ (800334c <prvResetNextTaskUnblockTime+0x40>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	4a04      	ldr	r2, [pc, #16]	@ (8003350 <prvResetNextTaskUnblockTime+0x44>)
 8003340:	6013      	str	r3, [r2, #0]
}
 8003342:	bf00      	nop
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr
 800334c:	20000cf4 	.word	0x20000cf4
 8003350:	20000d5c 	.word	0x20000d5c

08003354 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800335a:	4b0b      	ldr	r3, [pc, #44]	@ (8003388 <xTaskGetSchedulerState+0x34>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d102      	bne.n	8003368 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003362:	2301      	movs	r3, #1
 8003364:	607b      	str	r3, [r7, #4]
 8003366:	e008      	b.n	800337a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003368:	4b08      	ldr	r3, [pc, #32]	@ (800338c <xTaskGetSchedulerState+0x38>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d102      	bne.n	8003376 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003370:	2302      	movs	r3, #2
 8003372:	607b      	str	r3, [r7, #4]
 8003374:	e001      	b.n	800337a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003376:	2300      	movs	r3, #0
 8003378:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800337a:	687b      	ldr	r3, [r7, #4]
	}
 800337c:	4618      	mov	r0, r3
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	bc80      	pop	{r7}
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	20000d48 	.word	0x20000d48
 800338c:	20000d64 	.word	0x20000d64

08003390 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800339c:	2300      	movs	r3, #0
 800339e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d058      	beq.n	8003458 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80033a6:	4b2f      	ldr	r3, [pc, #188]	@ (8003464 <xTaskPriorityDisinherit+0xd4>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d00b      	beq.n	80033c8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80033b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033b4:	f383 8811 	msr	BASEPRI, r3
 80033b8:	f3bf 8f6f 	isb	sy
 80033bc:	f3bf 8f4f 	dsb	sy
 80033c0:	60fb      	str	r3, [r7, #12]
}
 80033c2:	bf00      	nop
 80033c4:	bf00      	nop
 80033c6:	e7fd      	b.n	80033c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10b      	bne.n	80033e8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80033d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033d4:	f383 8811 	msr	BASEPRI, r3
 80033d8:	f3bf 8f6f 	isb	sy
 80033dc:	f3bf 8f4f 	dsb	sy
 80033e0:	60bb      	str	r3, [r7, #8]
}
 80033e2:	bf00      	nop
 80033e4:	bf00      	nop
 80033e6:	e7fd      	b.n	80033e4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033ec:	1e5a      	subs	r2, r3, #1
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d02c      	beq.n	8003458 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003402:	2b00      	cmp	r3, #0
 8003404:	d128      	bne.n	8003458 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	3304      	adds	r3, #4
 800340a:	4618      	mov	r0, r3
 800340c:	f7fe fc2e 	bl	8001c6c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800341c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003428:	4b0f      	ldr	r3, [pc, #60]	@ (8003468 <xTaskPriorityDisinherit+0xd8>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	429a      	cmp	r2, r3
 800342e:	d903      	bls.n	8003438 <xTaskPriorityDisinherit+0xa8>
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003434:	4a0c      	ldr	r2, [pc, #48]	@ (8003468 <xTaskPriorityDisinherit+0xd8>)
 8003436:	6013      	str	r3, [r2, #0]
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800343c:	4613      	mov	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4413      	add	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4a09      	ldr	r2, [pc, #36]	@ (800346c <xTaskPriorityDisinherit+0xdc>)
 8003446:	441a      	add	r2, r3
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	3304      	adds	r3, #4
 800344c:	4619      	mov	r1, r3
 800344e:	4610      	mov	r0, r2
 8003450:	f7fe fbb1 	bl	8001bb6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003454:	2301      	movs	r3, #1
 8003456:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003458:	697b      	ldr	r3, [r7, #20]
	}
 800345a:	4618      	mov	r0, r3
 800345c:	3718      	adds	r7, #24
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	20000868 	.word	0x20000868
 8003468:	20000d44 	.word	0x20000d44
 800346c:	2000086c 	.word	0x2000086c

08003470 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800347a:	4b21      	ldr	r3, [pc, #132]	@ (8003500 <prvAddCurrentTaskToDelayedList+0x90>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003480:	4b20      	ldr	r3, [pc, #128]	@ (8003504 <prvAddCurrentTaskToDelayedList+0x94>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	3304      	adds	r3, #4
 8003486:	4618      	mov	r0, r3
 8003488:	f7fe fbf0 	bl	8001c6c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003492:	d10a      	bne.n	80034aa <prvAddCurrentTaskToDelayedList+0x3a>
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d007      	beq.n	80034aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800349a:	4b1a      	ldr	r3, [pc, #104]	@ (8003504 <prvAddCurrentTaskToDelayedList+0x94>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	3304      	adds	r3, #4
 80034a0:	4619      	mov	r1, r3
 80034a2:	4819      	ldr	r0, [pc, #100]	@ (8003508 <prvAddCurrentTaskToDelayedList+0x98>)
 80034a4:	f7fe fb87 	bl	8001bb6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80034a8:	e026      	b.n	80034f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4413      	add	r3, r2
 80034b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80034b2:	4b14      	ldr	r3, [pc, #80]	@ (8003504 <prvAddCurrentTaskToDelayedList+0x94>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d209      	bcs.n	80034d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034c2:	4b12      	ldr	r3, [pc, #72]	@ (800350c <prvAddCurrentTaskToDelayedList+0x9c>)
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	4b0f      	ldr	r3, [pc, #60]	@ (8003504 <prvAddCurrentTaskToDelayedList+0x94>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	3304      	adds	r3, #4
 80034cc:	4619      	mov	r1, r3
 80034ce:	4610      	mov	r0, r2
 80034d0:	f7fe fb94 	bl	8001bfc <vListInsert>
}
 80034d4:	e010      	b.n	80034f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003510 <prvAddCurrentTaskToDelayedList+0xa0>)
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	4b0a      	ldr	r3, [pc, #40]	@ (8003504 <prvAddCurrentTaskToDelayedList+0x94>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	3304      	adds	r3, #4
 80034e0:	4619      	mov	r1, r3
 80034e2:	4610      	mov	r0, r2
 80034e4:	f7fe fb8a 	bl	8001bfc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80034e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003514 <prvAddCurrentTaskToDelayedList+0xa4>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68ba      	ldr	r2, [r7, #8]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d202      	bcs.n	80034f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80034f2:	4a08      	ldr	r2, [pc, #32]	@ (8003514 <prvAddCurrentTaskToDelayedList+0xa4>)
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	6013      	str	r3, [r2, #0]
}
 80034f8:	bf00      	nop
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	20000d40 	.word	0x20000d40
 8003504:	20000868 	.word	0x20000868
 8003508:	20000d28 	.word	0x20000d28
 800350c:	20000cf8 	.word	0x20000cf8
 8003510:	20000cf4 	.word	0x20000cf4
 8003514:	20000d5c 	.word	0x20000d5c

08003518 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b08a      	sub	sp, #40	@ 0x28
 800351c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800351e:	2300      	movs	r3, #0
 8003520:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003522:	f000 fad9 	bl	8003ad8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003526:	4b1d      	ldr	r3, [pc, #116]	@ (800359c <xTimerCreateTimerTask+0x84>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d021      	beq.n	8003572 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800352e:	2300      	movs	r3, #0
 8003530:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003532:	2300      	movs	r3, #0
 8003534:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003536:	1d3a      	adds	r2, r7, #4
 8003538:	f107 0108 	add.w	r1, r7, #8
 800353c:	f107 030c 	add.w	r3, r7, #12
 8003540:	4618      	mov	r0, r3
 8003542:	f7fe faf3 	bl	8001b2c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003546:	6879      	ldr	r1, [r7, #4]
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	9202      	str	r2, [sp, #8]
 800354e:	9301      	str	r3, [sp, #4]
 8003550:	2302      	movs	r3, #2
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	2300      	movs	r3, #0
 8003556:	460a      	mov	r2, r1
 8003558:	4911      	ldr	r1, [pc, #68]	@ (80035a0 <xTimerCreateTimerTask+0x88>)
 800355a:	4812      	ldr	r0, [pc, #72]	@ (80035a4 <xTimerCreateTimerTask+0x8c>)
 800355c:	f7ff f8a6 	bl	80026ac <xTaskCreateStatic>
 8003560:	4603      	mov	r3, r0
 8003562:	4a11      	ldr	r2, [pc, #68]	@ (80035a8 <xTimerCreateTimerTask+0x90>)
 8003564:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003566:	4b10      	ldr	r3, [pc, #64]	@ (80035a8 <xTimerCreateTimerTask+0x90>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800356e:	2301      	movs	r3, #1
 8003570:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10b      	bne.n	8003590 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8003578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800357c:	f383 8811 	msr	BASEPRI, r3
 8003580:	f3bf 8f6f 	isb	sy
 8003584:	f3bf 8f4f 	dsb	sy
 8003588:	613b      	str	r3, [r7, #16]
}
 800358a:	bf00      	nop
 800358c:	bf00      	nop
 800358e:	e7fd      	b.n	800358c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003590:	697b      	ldr	r3, [r7, #20]
}
 8003592:	4618      	mov	r0, r3
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	20000d98 	.word	0x20000d98
 80035a0:	08004514 	.word	0x08004514
 80035a4:	080036cd 	.word	0x080036cd
 80035a8:	20000d9c 	.word	0x20000d9c

080035ac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b08a      	sub	sp, #40	@ 0x28
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
 80035b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80035ba:	2300      	movs	r3, #0
 80035bc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d10b      	bne.n	80035dc <xTimerGenericCommand+0x30>
	__asm volatile
 80035c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035c8:	f383 8811 	msr	BASEPRI, r3
 80035cc:	f3bf 8f6f 	isb	sy
 80035d0:	f3bf 8f4f 	dsb	sy
 80035d4:	623b      	str	r3, [r7, #32]
}
 80035d6:	bf00      	nop
 80035d8:	bf00      	nop
 80035da:	e7fd      	b.n	80035d8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80035dc:	4b19      	ldr	r3, [pc, #100]	@ (8003644 <xTimerGenericCommand+0x98>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d02a      	beq.n	800363a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	2b05      	cmp	r3, #5
 80035f4:	dc18      	bgt.n	8003628 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80035f6:	f7ff fead 	bl	8003354 <xTaskGetSchedulerState>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d109      	bne.n	8003614 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003600:	4b10      	ldr	r3, [pc, #64]	@ (8003644 <xTimerGenericCommand+0x98>)
 8003602:	6818      	ldr	r0, [r3, #0]
 8003604:	f107 0110 	add.w	r1, r7, #16
 8003608:	2300      	movs	r3, #0
 800360a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800360c:	f7fe fc62 	bl	8001ed4 <xQueueGenericSend>
 8003610:	6278      	str	r0, [r7, #36]	@ 0x24
 8003612:	e012      	b.n	800363a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003614:	4b0b      	ldr	r3, [pc, #44]	@ (8003644 <xTimerGenericCommand+0x98>)
 8003616:	6818      	ldr	r0, [r3, #0]
 8003618:	f107 0110 	add.w	r1, r7, #16
 800361c:	2300      	movs	r3, #0
 800361e:	2200      	movs	r2, #0
 8003620:	f7fe fc58 	bl	8001ed4 <xQueueGenericSend>
 8003624:	6278      	str	r0, [r7, #36]	@ 0x24
 8003626:	e008      	b.n	800363a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003628:	4b06      	ldr	r3, [pc, #24]	@ (8003644 <xTimerGenericCommand+0x98>)
 800362a:	6818      	ldr	r0, [r3, #0]
 800362c:	f107 0110 	add.w	r1, r7, #16
 8003630:	2300      	movs	r3, #0
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	f7fe fd50 	bl	80020d8 <xQueueGenericSendFromISR>
 8003638:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800363a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800363c:	4618      	mov	r0, r3
 800363e:	3728      	adds	r7, #40	@ 0x28
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	20000d98 	.word	0x20000d98

08003648 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b088      	sub	sp, #32
 800364c:	af02      	add	r7, sp, #8
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003652:	4b1d      	ldr	r3, [pc, #116]	@ (80036c8 <prvProcessExpiredTimer+0x80>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	3304      	adds	r3, #4
 8003660:	4618      	mov	r0, r3
 8003662:	f7fe fb03 	bl	8001c6c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	69db      	ldr	r3, [r3, #28]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d123      	bne.n	80036b6 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	699a      	ldr	r2, [r3, #24]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	18d1      	adds	r1, r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	683a      	ldr	r2, [r7, #0]
 800367a:	6978      	ldr	r0, [r7, #20]
 800367c:	f000 f8cc 	bl	8003818 <prvInsertTimerInActiveList>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d017      	beq.n	80036b6 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003686:	2300      	movs	r3, #0
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	2300      	movs	r3, #0
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	2100      	movs	r1, #0
 8003690:	6978      	ldr	r0, [r7, #20]
 8003692:	f7ff ff8b 	bl	80035ac <xTimerGenericCommand>
 8003696:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10b      	bne.n	80036b6 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 800369e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036a2:	f383 8811 	msr	BASEPRI, r3
 80036a6:	f3bf 8f6f 	isb	sy
 80036aa:	f3bf 8f4f 	dsb	sy
 80036ae:	60fb      	str	r3, [r7, #12]
}
 80036b0:	bf00      	nop
 80036b2:	bf00      	nop
 80036b4:	e7fd      	b.n	80036b2 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ba:	6978      	ldr	r0, [r7, #20]
 80036bc:	4798      	blx	r3
}
 80036be:	bf00      	nop
 80036c0:	3718      	adds	r7, #24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	20000d90 	.word	0x20000d90

080036cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80036d4:	f107 0308 	add.w	r3, r7, #8
 80036d8:	4618      	mov	r0, r3
 80036da:	f000 f859 	bl	8003790 <prvGetNextExpireTime>
 80036de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	4619      	mov	r1, r3
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f000 f805 	bl	80036f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80036ea:	f000 f8d7 	bl	800389c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80036ee:	bf00      	nop
 80036f0:	e7f0      	b.n	80036d4 <prvTimerTask+0x8>
	...

080036f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80036fe:	f7ff fa2f 	bl	8002b60 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003702:	f107 0308 	add.w	r3, r7, #8
 8003706:	4618      	mov	r0, r3
 8003708:	f000 f866 	bl	80037d8 <prvSampleTimeNow>
 800370c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d130      	bne.n	8003776 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10a      	bne.n	8003730 <prvProcessTimerOrBlockTask+0x3c>
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	429a      	cmp	r2, r3
 8003720:	d806      	bhi.n	8003730 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003722:	f7ff fa2b 	bl	8002b7c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003726:	68f9      	ldr	r1, [r7, #12]
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f7ff ff8d 	bl	8003648 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800372e:	e024      	b.n	800377a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d008      	beq.n	8003748 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003736:	4b13      	ldr	r3, [pc, #76]	@ (8003784 <prvProcessTimerOrBlockTask+0x90>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	bf0c      	ite	eq
 8003740:	2301      	moveq	r3, #1
 8003742:	2300      	movne	r3, #0
 8003744:	b2db      	uxtb	r3, r3
 8003746:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003748:	4b0f      	ldr	r3, [pc, #60]	@ (8003788 <prvProcessTimerOrBlockTask+0x94>)
 800374a:	6818      	ldr	r0, [r3, #0]
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	4619      	mov	r1, r3
 8003756:	f7fe ff75 	bl	8002644 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800375a:	f7ff fa0f 	bl	8002b7c <xTaskResumeAll>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d10a      	bne.n	800377a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003764:	4b09      	ldr	r3, [pc, #36]	@ (800378c <prvProcessTimerOrBlockTask+0x98>)
 8003766:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800376a:	601a      	str	r2, [r3, #0]
 800376c:	f3bf 8f4f 	dsb	sy
 8003770:	f3bf 8f6f 	isb	sy
}
 8003774:	e001      	b.n	800377a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003776:	f7ff fa01 	bl	8002b7c <xTaskResumeAll>
}
 800377a:	bf00      	nop
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	20000d94 	.word	0x20000d94
 8003788:	20000d98 	.word	0x20000d98
 800378c:	e000ed04 	.word	0xe000ed04

08003790 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003798:	4b0e      	ldr	r3, [pc, #56]	@ (80037d4 <prvGetNextExpireTime+0x44>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	bf0c      	ite	eq
 80037a2:	2301      	moveq	r3, #1
 80037a4:	2300      	movne	r3, #0
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	461a      	mov	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d105      	bne.n	80037c2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80037b6:	4b07      	ldr	r3, [pc, #28]	@ (80037d4 <prvGetNextExpireTime+0x44>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	60fb      	str	r3, [r7, #12]
 80037c0:	e001      	b.n	80037c6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80037c2:	2300      	movs	r3, #0
 80037c4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80037c6:	68fb      	ldr	r3, [r7, #12]
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3714      	adds	r7, #20
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bc80      	pop	{r7}
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	20000d90 	.word	0x20000d90

080037d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80037e0:	f7ff fa6a 	bl	8002cb8 <xTaskGetTickCount>
 80037e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80037e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003814 <prvSampleTimeNow+0x3c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d205      	bcs.n	80037fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80037f0:	f000 f910 	bl	8003a14 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	e002      	b.n	8003802 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003802:	4a04      	ldr	r2, [pc, #16]	@ (8003814 <prvSampleTimeNow+0x3c>)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003808:	68fb      	ldr	r3, [r7, #12]
}
 800380a:	4618      	mov	r0, r3
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	20000da0 	.word	0x20000da0

08003818 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
 8003824:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003826:	2300      	movs	r3, #0
 8003828:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	68ba      	ldr	r2, [r7, #8]
 800382e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	429a      	cmp	r2, r3
 800383c:	d812      	bhi.n	8003864 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	1ad2      	subs	r2, r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	429a      	cmp	r2, r3
 800384a:	d302      	bcc.n	8003852 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800384c:	2301      	movs	r3, #1
 800384e:	617b      	str	r3, [r7, #20]
 8003850:	e01b      	b.n	800388a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003852:	4b10      	ldr	r3, [pc, #64]	@ (8003894 <prvInsertTimerInActiveList+0x7c>)
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	3304      	adds	r3, #4
 800385a:	4619      	mov	r1, r3
 800385c:	4610      	mov	r0, r2
 800385e:	f7fe f9cd 	bl	8001bfc <vListInsert>
 8003862:	e012      	b.n	800388a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	429a      	cmp	r2, r3
 800386a:	d206      	bcs.n	800387a <prvInsertTimerInActiveList+0x62>
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	429a      	cmp	r2, r3
 8003872:	d302      	bcc.n	800387a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003874:	2301      	movs	r3, #1
 8003876:	617b      	str	r3, [r7, #20]
 8003878:	e007      	b.n	800388a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800387a:	4b07      	ldr	r3, [pc, #28]	@ (8003898 <prvInsertTimerInActiveList+0x80>)
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	3304      	adds	r3, #4
 8003882:	4619      	mov	r1, r3
 8003884:	4610      	mov	r0, r2
 8003886:	f7fe f9b9 	bl	8001bfc <vListInsert>
		}
	}

	return xProcessTimerNow;
 800388a:	697b      	ldr	r3, [r7, #20]
}
 800388c:	4618      	mov	r0, r3
 800388e:	3718      	adds	r7, #24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	20000d94 	.word	0x20000d94
 8003898:	20000d90 	.word	0x20000d90

0800389c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b08e      	sub	sp, #56	@ 0x38
 80038a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80038a2:	e0a5      	b.n	80039f0 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	da19      	bge.n	80038de <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80038aa:	1d3b      	adds	r3, r7, #4
 80038ac:	3304      	adds	r3, #4
 80038ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80038b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10b      	bne.n	80038ce <prvProcessReceivedCommands+0x32>
	__asm volatile
 80038b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038ba:	f383 8811 	msr	BASEPRI, r3
 80038be:	f3bf 8f6f 	isb	sy
 80038c2:	f3bf 8f4f 	dsb	sy
 80038c6:	61fb      	str	r3, [r7, #28]
}
 80038c8:	bf00      	nop
 80038ca:	bf00      	nop
 80038cc:	e7fd      	b.n	80038ca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80038ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038d4:	6850      	ldr	r0, [r2, #4]
 80038d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038d8:	6892      	ldr	r2, [r2, #8]
 80038da:	4611      	mov	r1, r2
 80038dc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f2c0 8085 	blt.w	80039f0 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80038ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d004      	beq.n	80038fc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80038f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038f4:	3304      	adds	r3, #4
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7fe f9b8 	bl	8001c6c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80038fc:	463b      	mov	r3, r7
 80038fe:	4618      	mov	r0, r3
 8003900:	f7ff ff6a 	bl	80037d8 <prvSampleTimeNow>
 8003904:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b09      	cmp	r3, #9
 800390a:	d86c      	bhi.n	80039e6 <prvProcessReceivedCommands+0x14a>
 800390c:	a201      	add	r2, pc, #4	@ (adr r2, 8003914 <prvProcessReceivedCommands+0x78>)
 800390e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003912:	bf00      	nop
 8003914:	0800393d 	.word	0x0800393d
 8003918:	0800393d 	.word	0x0800393d
 800391c:	0800393d 	.word	0x0800393d
 8003920:	080039e7 	.word	0x080039e7
 8003924:	0800399b 	.word	0x0800399b
 8003928:	080039d5 	.word	0x080039d5
 800392c:	0800393d 	.word	0x0800393d
 8003930:	0800393d 	.word	0x0800393d
 8003934:	080039e7 	.word	0x080039e7
 8003938:	0800399b 	.word	0x0800399b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800393c:	68ba      	ldr	r2, [r7, #8]
 800393e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	18d1      	adds	r1, r2, r3
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003948:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800394a:	f7ff ff65 	bl	8003818 <prvInsertTimerInActiveList>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d04a      	beq.n	80039ea <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003958:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800395a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800395c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800395e:	69db      	ldr	r3, [r3, #28]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d142      	bne.n	80039ea <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003964:	68ba      	ldr	r2, [r7, #8]
 8003966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	441a      	add	r2, r3
 800396c:	2300      	movs	r3, #0
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	2300      	movs	r3, #0
 8003972:	2100      	movs	r1, #0
 8003974:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003976:	f7ff fe19 	bl	80035ac <xTimerGenericCommand>
 800397a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800397c:	6a3b      	ldr	r3, [r7, #32]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d133      	bne.n	80039ea <prvProcessReceivedCommands+0x14e>
	__asm volatile
 8003982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003986:	f383 8811 	msr	BASEPRI, r3
 800398a:	f3bf 8f6f 	isb	sy
 800398e:	f3bf 8f4f 	dsb	sy
 8003992:	61bb      	str	r3, [r7, #24]
}
 8003994:	bf00      	nop
 8003996:	bf00      	nop
 8003998:	e7fd      	b.n	8003996 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800399a:	68ba      	ldr	r2, [r7, #8]
 800399c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800399e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80039a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10b      	bne.n	80039c0 <prvProcessReceivedCommands+0x124>
	__asm volatile
 80039a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039ac:	f383 8811 	msr	BASEPRI, r3
 80039b0:	f3bf 8f6f 	isb	sy
 80039b4:	f3bf 8f4f 	dsb	sy
 80039b8:	617b      	str	r3, [r7, #20]
}
 80039ba:	bf00      	nop
 80039bc:	bf00      	nop
 80039be:	e7fd      	b.n	80039bc <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80039c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039c2:	699a      	ldr	r2, [r3, #24]
 80039c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c6:	18d1      	adds	r1, r2, r3
 80039c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80039ce:	f7ff ff23 	bl	8003818 <prvInsertTimerInActiveList>
					break;
 80039d2:	e00d      	b.n	80039f0 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80039d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d107      	bne.n	80039ee <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 80039de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80039e0:	f000 fb76 	bl	80040d0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80039e4:	e003      	b.n	80039ee <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 80039e6:	bf00      	nop
 80039e8:	e002      	b.n	80039f0 <prvProcessReceivedCommands+0x154>
					break;
 80039ea:	bf00      	nop
 80039ec:	e000      	b.n	80039f0 <prvProcessReceivedCommands+0x154>
					break;
 80039ee:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80039f0:	4b07      	ldr	r3, [pc, #28]	@ (8003a10 <prvProcessReceivedCommands+0x174>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	1d39      	adds	r1, r7, #4
 80039f6:	2200      	movs	r2, #0
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7fe fc09 	bl	8002210 <xQueueReceive>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f47f af4f 	bne.w	80038a4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003a06:	bf00      	nop
 8003a08:	bf00      	nop
 8003a0a:	3730      	adds	r7, #48	@ 0x30
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	20000d98 	.word	0x20000d98

08003a14 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b088      	sub	sp, #32
 8003a18:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003a1a:	e046      	b.n	8003aaa <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a1c:	4b2c      	ldr	r3, [pc, #176]	@ (8003ad0 <prvSwitchTimerLists+0xbc>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a26:	4b2a      	ldr	r3, [pc, #168]	@ (8003ad0 <prvSwitchTimerLists+0xbc>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	3304      	adds	r3, #4
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7fe f919 	bl	8001c6c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	69db      	ldr	r3, [r3, #28]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d12f      	bne.n	8003aaa <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	4413      	add	r3, r2
 8003a52:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003a54:	68ba      	ldr	r2, [r7, #8]
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d90e      	bls.n	8003a7a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	68ba      	ldr	r2, [r7, #8]
 8003a60:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003a68:	4b19      	ldr	r3, [pc, #100]	@ (8003ad0 <prvSwitchTimerLists+0xbc>)
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	3304      	adds	r3, #4
 8003a70:	4619      	mov	r1, r3
 8003a72:	4610      	mov	r0, r2
 8003a74:	f7fe f8c2 	bl	8001bfc <vListInsert>
 8003a78:	e017      	b.n	8003aaa <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	9300      	str	r3, [sp, #0]
 8003a7e:	2300      	movs	r3, #0
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	2100      	movs	r1, #0
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f7ff fd91 	bl	80035ac <xTimerGenericCommand>
 8003a8a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10b      	bne.n	8003aaa <prvSwitchTimerLists+0x96>
	__asm volatile
 8003a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a96:	f383 8811 	msr	BASEPRI, r3
 8003a9a:	f3bf 8f6f 	isb	sy
 8003a9e:	f3bf 8f4f 	dsb	sy
 8003aa2:	603b      	str	r3, [r7, #0]
}
 8003aa4:	bf00      	nop
 8003aa6:	bf00      	nop
 8003aa8:	e7fd      	b.n	8003aa6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003aaa:	4b09      	ldr	r3, [pc, #36]	@ (8003ad0 <prvSwitchTimerLists+0xbc>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1b3      	bne.n	8003a1c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003ab4:	4b06      	ldr	r3, [pc, #24]	@ (8003ad0 <prvSwitchTimerLists+0xbc>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003aba:	4b06      	ldr	r3, [pc, #24]	@ (8003ad4 <prvSwitchTimerLists+0xc0>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a04      	ldr	r2, [pc, #16]	@ (8003ad0 <prvSwitchTimerLists+0xbc>)
 8003ac0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003ac2:	4a04      	ldr	r2, [pc, #16]	@ (8003ad4 <prvSwitchTimerLists+0xc0>)
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	6013      	str	r3, [r2, #0]
}
 8003ac8:	bf00      	nop
 8003aca:	3718      	adds	r7, #24
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	20000d90 	.word	0x20000d90
 8003ad4:	20000d94 	.word	0x20000d94

08003ad8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003ade:	f000 f92d 	bl	8003d3c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003ae2:	4b15      	ldr	r3, [pc, #84]	@ (8003b38 <prvCheckForValidListAndQueue+0x60>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d120      	bne.n	8003b2c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003aea:	4814      	ldr	r0, [pc, #80]	@ (8003b3c <prvCheckForValidListAndQueue+0x64>)
 8003aec:	f7fe f838 	bl	8001b60 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003af0:	4813      	ldr	r0, [pc, #76]	@ (8003b40 <prvCheckForValidListAndQueue+0x68>)
 8003af2:	f7fe f835 	bl	8001b60 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003af6:	4b13      	ldr	r3, [pc, #76]	@ (8003b44 <prvCheckForValidListAndQueue+0x6c>)
 8003af8:	4a10      	ldr	r2, [pc, #64]	@ (8003b3c <prvCheckForValidListAndQueue+0x64>)
 8003afa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003afc:	4b12      	ldr	r3, [pc, #72]	@ (8003b48 <prvCheckForValidListAndQueue+0x70>)
 8003afe:	4a10      	ldr	r2, [pc, #64]	@ (8003b40 <prvCheckForValidListAndQueue+0x68>)
 8003b00:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003b02:	2300      	movs	r3, #0
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	4b11      	ldr	r3, [pc, #68]	@ (8003b4c <prvCheckForValidListAndQueue+0x74>)
 8003b08:	4a11      	ldr	r2, [pc, #68]	@ (8003b50 <prvCheckForValidListAndQueue+0x78>)
 8003b0a:	2110      	movs	r1, #16
 8003b0c:	200a      	movs	r0, #10
 8003b0e:	f7fe f941 	bl	8001d94 <xQueueGenericCreateStatic>
 8003b12:	4603      	mov	r3, r0
 8003b14:	4a08      	ldr	r2, [pc, #32]	@ (8003b38 <prvCheckForValidListAndQueue+0x60>)
 8003b16:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003b18:	4b07      	ldr	r3, [pc, #28]	@ (8003b38 <prvCheckForValidListAndQueue+0x60>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d005      	beq.n	8003b2c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003b20:	4b05      	ldr	r3, [pc, #20]	@ (8003b38 <prvCheckForValidListAndQueue+0x60>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	490b      	ldr	r1, [pc, #44]	@ (8003b54 <prvCheckForValidListAndQueue+0x7c>)
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7fe fd64 	bl	80025f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b2c:	f000 f936 	bl	8003d9c <vPortExitCritical>
}
 8003b30:	bf00      	nop
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	20000d98 	.word	0x20000d98
 8003b3c:	20000d68 	.word	0x20000d68
 8003b40:	20000d7c 	.word	0x20000d7c
 8003b44:	20000d90 	.word	0x20000d90
 8003b48:	20000d94 	.word	0x20000d94
 8003b4c:	20000e44 	.word	0x20000e44
 8003b50:	20000da4 	.word	0x20000da4
 8003b54:	0800451c 	.word	0x0800451c

08003b58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	3b04      	subs	r3, #4
 8003b68:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003b70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	3b04      	subs	r3, #4
 8003b76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	f023 0201 	bic.w	r2, r3, #1
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	3b04      	subs	r3, #4
 8003b86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003b88:	4a08      	ldr	r2, [pc, #32]	@ (8003bac <pxPortInitialiseStack+0x54>)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	3b14      	subs	r3, #20
 8003b92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	3b20      	subs	r3, #32
 8003b9e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3714      	adds	r7, #20
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bc80      	pop	{r7}
 8003baa:	4770      	bx	lr
 8003bac:	08003bb1 	.word	0x08003bb1

08003bb0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003bba:	4b12      	ldr	r3, [pc, #72]	@ (8003c04 <prvTaskExitError+0x54>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc2:	d00b      	beq.n	8003bdc <prvTaskExitError+0x2c>
	__asm volatile
 8003bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bc8:	f383 8811 	msr	BASEPRI, r3
 8003bcc:	f3bf 8f6f 	isb	sy
 8003bd0:	f3bf 8f4f 	dsb	sy
 8003bd4:	60fb      	str	r3, [r7, #12]
}
 8003bd6:	bf00      	nop
 8003bd8:	bf00      	nop
 8003bda:	e7fd      	b.n	8003bd8 <prvTaskExitError+0x28>
	__asm volatile
 8003bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003be0:	f383 8811 	msr	BASEPRI, r3
 8003be4:	f3bf 8f6f 	isb	sy
 8003be8:	f3bf 8f4f 	dsb	sy
 8003bec:	60bb      	str	r3, [r7, #8]
}
 8003bee:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003bf0:	bf00      	nop
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d0fc      	beq.n	8003bf2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003bf8:	bf00      	nop
 8003bfa:	bf00      	nop
 8003bfc:	3714      	adds	r7, #20
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bc80      	pop	{r7}
 8003c02:	4770      	bx	lr
 8003c04:	2000000c 	.word	0x2000000c
	...

08003c10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003c10:	4b07      	ldr	r3, [pc, #28]	@ (8003c30 <pxCurrentTCBConst2>)
 8003c12:	6819      	ldr	r1, [r3, #0]
 8003c14:	6808      	ldr	r0, [r1, #0]
 8003c16:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003c1a:	f380 8809 	msr	PSP, r0
 8003c1e:	f3bf 8f6f 	isb	sy
 8003c22:	f04f 0000 	mov.w	r0, #0
 8003c26:	f380 8811 	msr	BASEPRI, r0
 8003c2a:	f04e 0e0d 	orr.w	lr, lr, #13
 8003c2e:	4770      	bx	lr

08003c30 <pxCurrentTCBConst2>:
 8003c30:	20000868 	.word	0x20000868
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003c34:	bf00      	nop
 8003c36:	bf00      	nop

08003c38 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003c38:	4806      	ldr	r0, [pc, #24]	@ (8003c54 <prvPortStartFirstTask+0x1c>)
 8003c3a:	6800      	ldr	r0, [r0, #0]
 8003c3c:	6800      	ldr	r0, [r0, #0]
 8003c3e:	f380 8808 	msr	MSP, r0
 8003c42:	b662      	cpsie	i
 8003c44:	b661      	cpsie	f
 8003c46:	f3bf 8f4f 	dsb	sy
 8003c4a:	f3bf 8f6f 	isb	sy
 8003c4e:	df00      	svc	0
 8003c50:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003c52:	bf00      	nop
 8003c54:	e000ed08 	.word	0xe000ed08

08003c58 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003c5e:	4b32      	ldr	r3, [pc, #200]	@ (8003d28 <xPortStartScheduler+0xd0>)
 8003c60:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	22ff      	movs	r2, #255	@ 0xff
 8003c6e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003c78:	78fb      	ldrb	r3, [r7, #3]
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003c80:	b2da      	uxtb	r2, r3
 8003c82:	4b2a      	ldr	r3, [pc, #168]	@ (8003d2c <xPortStartScheduler+0xd4>)
 8003c84:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003c86:	4b2a      	ldr	r3, [pc, #168]	@ (8003d30 <xPortStartScheduler+0xd8>)
 8003c88:	2207      	movs	r2, #7
 8003c8a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c8c:	e009      	b.n	8003ca2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003c8e:	4b28      	ldr	r3, [pc, #160]	@ (8003d30 <xPortStartScheduler+0xd8>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	3b01      	subs	r3, #1
 8003c94:	4a26      	ldr	r2, [pc, #152]	@ (8003d30 <xPortStartScheduler+0xd8>)
 8003c96:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003c98:	78fb      	ldrb	r3, [r7, #3]
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ca2:	78fb      	ldrb	r3, [r7, #3]
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003caa:	2b80      	cmp	r3, #128	@ 0x80
 8003cac:	d0ef      	beq.n	8003c8e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003cae:	4b20      	ldr	r3, [pc, #128]	@ (8003d30 <xPortStartScheduler+0xd8>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f1c3 0307 	rsb	r3, r3, #7
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	d00b      	beq.n	8003cd2 <xPortStartScheduler+0x7a>
	__asm volatile
 8003cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cbe:	f383 8811 	msr	BASEPRI, r3
 8003cc2:	f3bf 8f6f 	isb	sy
 8003cc6:	f3bf 8f4f 	dsb	sy
 8003cca:	60bb      	str	r3, [r7, #8]
}
 8003ccc:	bf00      	nop
 8003cce:	bf00      	nop
 8003cd0:	e7fd      	b.n	8003cce <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003cd2:	4b17      	ldr	r3, [pc, #92]	@ (8003d30 <xPortStartScheduler+0xd8>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	021b      	lsls	r3, r3, #8
 8003cd8:	4a15      	ldr	r2, [pc, #84]	@ (8003d30 <xPortStartScheduler+0xd8>)
 8003cda:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003cdc:	4b14      	ldr	r3, [pc, #80]	@ (8003d30 <xPortStartScheduler+0xd8>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003ce4:	4a12      	ldr	r2, [pc, #72]	@ (8003d30 <xPortStartScheduler+0xd8>)
 8003ce6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	b2da      	uxtb	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003cf0:	4b10      	ldr	r3, [pc, #64]	@ (8003d34 <xPortStartScheduler+0xdc>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a0f      	ldr	r2, [pc, #60]	@ (8003d34 <xPortStartScheduler+0xdc>)
 8003cf6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003cfa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003cfc:	4b0d      	ldr	r3, [pc, #52]	@ (8003d34 <xPortStartScheduler+0xdc>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a0c      	ldr	r2, [pc, #48]	@ (8003d34 <xPortStartScheduler+0xdc>)
 8003d02:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003d06:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003d08:	f000 f8b8 	bl	8003e7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8003d38 <xPortStartScheduler+0xe0>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003d12:	f7ff ff91 	bl	8003c38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003d16:	f7ff f89d 	bl	8002e54 <vTaskSwitchContext>
	prvTaskExitError();
 8003d1a:	f7ff ff49 	bl	8003bb0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3710      	adds	r7, #16
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	e000e400 	.word	0xe000e400
 8003d2c:	20000e94 	.word	0x20000e94
 8003d30:	20000e98 	.word	0x20000e98
 8003d34:	e000ed20 	.word	0xe000ed20
 8003d38:	2000000c 	.word	0x2000000c

08003d3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
	__asm volatile
 8003d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d46:	f383 8811 	msr	BASEPRI, r3
 8003d4a:	f3bf 8f6f 	isb	sy
 8003d4e:	f3bf 8f4f 	dsb	sy
 8003d52:	607b      	str	r3, [r7, #4]
}
 8003d54:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003d56:	4b0f      	ldr	r3, [pc, #60]	@ (8003d94 <vPortEnterCritical+0x58>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	4a0d      	ldr	r2, [pc, #52]	@ (8003d94 <vPortEnterCritical+0x58>)
 8003d5e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003d60:	4b0c      	ldr	r3, [pc, #48]	@ (8003d94 <vPortEnterCritical+0x58>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d110      	bne.n	8003d8a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003d68:	4b0b      	ldr	r3, [pc, #44]	@ (8003d98 <vPortEnterCritical+0x5c>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00b      	beq.n	8003d8a <vPortEnterCritical+0x4e>
	__asm volatile
 8003d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d76:	f383 8811 	msr	BASEPRI, r3
 8003d7a:	f3bf 8f6f 	isb	sy
 8003d7e:	f3bf 8f4f 	dsb	sy
 8003d82:	603b      	str	r3, [r7, #0]
}
 8003d84:	bf00      	nop
 8003d86:	bf00      	nop
 8003d88:	e7fd      	b.n	8003d86 <vPortEnterCritical+0x4a>
	}
}
 8003d8a:	bf00      	nop
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bc80      	pop	{r7}
 8003d92:	4770      	bx	lr
 8003d94:	2000000c 	.word	0x2000000c
 8003d98:	e000ed04 	.word	0xe000ed04

08003d9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003da2:	4b12      	ldr	r3, [pc, #72]	@ (8003dec <vPortExitCritical+0x50>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10b      	bne.n	8003dc2 <vPortExitCritical+0x26>
	__asm volatile
 8003daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dae:	f383 8811 	msr	BASEPRI, r3
 8003db2:	f3bf 8f6f 	isb	sy
 8003db6:	f3bf 8f4f 	dsb	sy
 8003dba:	607b      	str	r3, [r7, #4]
}
 8003dbc:	bf00      	nop
 8003dbe:	bf00      	nop
 8003dc0:	e7fd      	b.n	8003dbe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8003dec <vPortExitCritical+0x50>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	4a08      	ldr	r2, [pc, #32]	@ (8003dec <vPortExitCritical+0x50>)
 8003dca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003dcc:	4b07      	ldr	r3, [pc, #28]	@ (8003dec <vPortExitCritical+0x50>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d105      	bne.n	8003de0 <vPortExitCritical+0x44>
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	f383 8811 	msr	BASEPRI, r3
}
 8003dde:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bc80      	pop	{r7}
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	2000000c 	.word	0x2000000c

08003df0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003df0:	f3ef 8009 	mrs	r0, PSP
 8003df4:	f3bf 8f6f 	isb	sy
 8003df8:	4b0d      	ldr	r3, [pc, #52]	@ (8003e30 <pxCurrentTCBConst>)
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003e00:	6010      	str	r0, [r2, #0]
 8003e02:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003e06:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003e0a:	f380 8811 	msr	BASEPRI, r0
 8003e0e:	f7ff f821 	bl	8002e54 <vTaskSwitchContext>
 8003e12:	f04f 0000 	mov.w	r0, #0
 8003e16:	f380 8811 	msr	BASEPRI, r0
 8003e1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003e1e:	6819      	ldr	r1, [r3, #0]
 8003e20:	6808      	ldr	r0, [r1, #0]
 8003e22:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003e26:	f380 8809 	msr	PSP, r0
 8003e2a:	f3bf 8f6f 	isb	sy
 8003e2e:	4770      	bx	lr

08003e30 <pxCurrentTCBConst>:
 8003e30:	20000868 	.word	0x20000868
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003e34:	bf00      	nop
 8003e36:	bf00      	nop

08003e38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
	__asm volatile
 8003e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e42:	f383 8811 	msr	BASEPRI, r3
 8003e46:	f3bf 8f6f 	isb	sy
 8003e4a:	f3bf 8f4f 	dsb	sy
 8003e4e:	607b      	str	r3, [r7, #4]
}
 8003e50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003e52:	f7fe ff3f 	bl	8002cd4 <xTaskIncrementTick>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d003      	beq.n	8003e64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003e5c:	4b06      	ldr	r3, [pc, #24]	@ (8003e78 <SysTick_Handler+0x40>)
 8003e5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	2300      	movs	r3, #0
 8003e66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	f383 8811 	msr	BASEPRI, r3
}
 8003e6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003e70:	bf00      	nop
 8003e72:	3708      	adds	r7, #8
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	e000ed04 	.word	0xe000ed04

08003e7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003e80:	4b0a      	ldr	r3, [pc, #40]	@ (8003eac <vPortSetupTimerInterrupt+0x30>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003e86:	4b0a      	ldr	r3, [pc, #40]	@ (8003eb0 <vPortSetupTimerInterrupt+0x34>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003e8c:	4b09      	ldr	r3, [pc, #36]	@ (8003eb4 <vPortSetupTimerInterrupt+0x38>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a09      	ldr	r2, [pc, #36]	@ (8003eb8 <vPortSetupTimerInterrupt+0x3c>)
 8003e92:	fba2 2303 	umull	r2, r3, r2, r3
 8003e96:	099b      	lsrs	r3, r3, #6
 8003e98:	4a08      	ldr	r2, [pc, #32]	@ (8003ebc <vPortSetupTimerInterrupt+0x40>)
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003e9e:	4b03      	ldr	r3, [pc, #12]	@ (8003eac <vPortSetupTimerInterrupt+0x30>)
 8003ea0:	2207      	movs	r2, #7
 8003ea2:	601a      	str	r2, [r3, #0]
}
 8003ea4:	bf00      	nop
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bc80      	pop	{r7}
 8003eaa:	4770      	bx	lr
 8003eac:	e000e010 	.word	0xe000e010
 8003eb0:	e000e018 	.word	0xe000e018
 8003eb4:	20000000 	.word	0x20000000
 8003eb8:	10624dd3 	.word	0x10624dd3
 8003ebc:	e000e014 	.word	0xe000e014

08003ec0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003ec6:	f3ef 8305 	mrs	r3, IPSR
 8003eca:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2b0f      	cmp	r3, #15
 8003ed0:	d915      	bls.n	8003efe <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003ed2:	4a17      	ldr	r2, [pc, #92]	@ (8003f30 <vPortValidateInterruptPriority+0x70>)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003edc:	4b15      	ldr	r3, [pc, #84]	@ (8003f34 <vPortValidateInterruptPriority+0x74>)
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	7afa      	ldrb	r2, [r7, #11]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d20b      	bcs.n	8003efe <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8003ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eea:	f383 8811 	msr	BASEPRI, r3
 8003eee:	f3bf 8f6f 	isb	sy
 8003ef2:	f3bf 8f4f 	dsb	sy
 8003ef6:	607b      	str	r3, [r7, #4]
}
 8003ef8:	bf00      	nop
 8003efa:	bf00      	nop
 8003efc:	e7fd      	b.n	8003efa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003efe:	4b0e      	ldr	r3, [pc, #56]	@ (8003f38 <vPortValidateInterruptPriority+0x78>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003f06:	4b0d      	ldr	r3, [pc, #52]	@ (8003f3c <vPortValidateInterruptPriority+0x7c>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d90b      	bls.n	8003f26 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8003f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f12:	f383 8811 	msr	BASEPRI, r3
 8003f16:	f3bf 8f6f 	isb	sy
 8003f1a:	f3bf 8f4f 	dsb	sy
 8003f1e:	603b      	str	r3, [r7, #0]
}
 8003f20:	bf00      	nop
 8003f22:	bf00      	nop
 8003f24:	e7fd      	b.n	8003f22 <vPortValidateInterruptPriority+0x62>
	}
 8003f26:	bf00      	nop
 8003f28:	3714      	adds	r7, #20
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bc80      	pop	{r7}
 8003f2e:	4770      	bx	lr
 8003f30:	e000e3f0 	.word	0xe000e3f0
 8003f34:	20000e94 	.word	0x20000e94
 8003f38:	e000ed0c 	.word	0xe000ed0c
 8003f3c:	20000e98 	.word	0x20000e98

08003f40 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b08a      	sub	sp, #40	@ 0x28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003f4c:	f7fe fe08 	bl	8002b60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003f50:	4b5a      	ldr	r3, [pc, #360]	@ (80040bc <pvPortMalloc+0x17c>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d101      	bne.n	8003f5c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003f58:	f000 f916 	bl	8004188 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003f5c:	4b58      	ldr	r3, [pc, #352]	@ (80040c0 <pvPortMalloc+0x180>)
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4013      	ands	r3, r2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f040 8090 	bne.w	800408a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d01e      	beq.n	8003fae <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003f70:	2208      	movs	r2, #8
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4413      	add	r3, r2
 8003f76:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f003 0307 	and.w	r3, r3, #7
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d015      	beq.n	8003fae <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f023 0307 	bic.w	r3, r3, #7
 8003f88:	3308      	adds	r3, #8
 8003f8a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f003 0307 	and.w	r3, r3, #7
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00b      	beq.n	8003fae <pvPortMalloc+0x6e>
	__asm volatile
 8003f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f9a:	f383 8811 	msr	BASEPRI, r3
 8003f9e:	f3bf 8f6f 	isb	sy
 8003fa2:	f3bf 8f4f 	dsb	sy
 8003fa6:	617b      	str	r3, [r7, #20]
}
 8003fa8:	bf00      	nop
 8003faa:	bf00      	nop
 8003fac:	e7fd      	b.n	8003faa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d06a      	beq.n	800408a <pvPortMalloc+0x14a>
 8003fb4:	4b43      	ldr	r3, [pc, #268]	@ (80040c4 <pvPortMalloc+0x184>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d865      	bhi.n	800408a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003fbe:	4b42      	ldr	r3, [pc, #264]	@ (80040c8 <pvPortMalloc+0x188>)
 8003fc0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003fc2:	4b41      	ldr	r3, [pc, #260]	@ (80040c8 <pvPortMalloc+0x188>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003fc8:	e004      	b.n	8003fd4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fcc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d903      	bls.n	8003fe6 <pvPortMalloc+0xa6>
 8003fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1f1      	bne.n	8003fca <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003fe6:	4b35      	ldr	r3, [pc, #212]	@ (80040bc <pvPortMalloc+0x17c>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d04c      	beq.n	800408a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003ff0:	6a3b      	ldr	r3, [r7, #32]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2208      	movs	r2, #8
 8003ff6:	4413      	add	r3, r2
 8003ff8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	6a3b      	ldr	r3, [r7, #32]
 8004000:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	1ad2      	subs	r2, r2, r3
 800400a:	2308      	movs	r3, #8
 800400c:	005b      	lsls	r3, r3, #1
 800400e:	429a      	cmp	r2, r3
 8004010:	d920      	bls.n	8004054 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004012:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4413      	add	r3, r2
 8004018:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	f003 0307 	and.w	r3, r3, #7
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00b      	beq.n	800403c <pvPortMalloc+0xfc>
	__asm volatile
 8004024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004028:	f383 8811 	msr	BASEPRI, r3
 800402c:	f3bf 8f6f 	isb	sy
 8004030:	f3bf 8f4f 	dsb	sy
 8004034:	613b      	str	r3, [r7, #16]
}
 8004036:	bf00      	nop
 8004038:	bf00      	nop
 800403a:	e7fd      	b.n	8004038 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800403c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800403e:	685a      	ldr	r2, [r3, #4]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	1ad2      	subs	r2, r2, r3
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800404e:	69b8      	ldr	r0, [r7, #24]
 8004050:	f000 f8fc 	bl	800424c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004054:	4b1b      	ldr	r3, [pc, #108]	@ (80040c4 <pvPortMalloc+0x184>)
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	4a19      	ldr	r2, [pc, #100]	@ (80040c4 <pvPortMalloc+0x184>)
 8004060:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004062:	4b18      	ldr	r3, [pc, #96]	@ (80040c4 <pvPortMalloc+0x184>)
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	4b19      	ldr	r3, [pc, #100]	@ (80040cc <pvPortMalloc+0x18c>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	429a      	cmp	r2, r3
 800406c:	d203      	bcs.n	8004076 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800406e:	4b15      	ldr	r3, [pc, #84]	@ (80040c4 <pvPortMalloc+0x184>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a16      	ldr	r2, [pc, #88]	@ (80040cc <pvPortMalloc+0x18c>)
 8004074:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	4b11      	ldr	r3, [pc, #68]	@ (80040c0 <pvPortMalloc+0x180>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	431a      	orrs	r2, r3
 8004080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004082:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004086:	2200      	movs	r2, #0
 8004088:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800408a:	f7fe fd77 	bl	8002b7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	f003 0307 	and.w	r3, r3, #7
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00b      	beq.n	80040b0 <pvPortMalloc+0x170>
	__asm volatile
 8004098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800409c:	f383 8811 	msr	BASEPRI, r3
 80040a0:	f3bf 8f6f 	isb	sy
 80040a4:	f3bf 8f4f 	dsb	sy
 80040a8:	60fb      	str	r3, [r7, #12]
}
 80040aa:	bf00      	nop
 80040ac:	bf00      	nop
 80040ae:	e7fd      	b.n	80040ac <pvPortMalloc+0x16c>
	return pvReturn;
 80040b0:	69fb      	ldr	r3, [r7, #28]
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3728      	adds	r7, #40	@ 0x28
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	20001aa4 	.word	0x20001aa4
 80040c0:	20001ab0 	.word	0x20001ab0
 80040c4:	20001aa8 	.word	0x20001aa8
 80040c8:	20001a9c 	.word	0x20001a9c
 80040cc:	20001aac 	.word	0x20001aac

080040d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d04a      	beq.n	8004178 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80040e2:	2308      	movs	r3, #8
 80040e4:	425b      	negs	r3, r3
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	4413      	add	r3, r2
 80040ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	685a      	ldr	r2, [r3, #4]
 80040f4:	4b22      	ldr	r3, [pc, #136]	@ (8004180 <vPortFree+0xb0>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4013      	ands	r3, r2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d10b      	bne.n	8004116 <vPortFree+0x46>
	__asm volatile
 80040fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004102:	f383 8811 	msr	BASEPRI, r3
 8004106:	f3bf 8f6f 	isb	sy
 800410a:	f3bf 8f4f 	dsb	sy
 800410e:	60fb      	str	r3, [r7, #12]
}
 8004110:	bf00      	nop
 8004112:	bf00      	nop
 8004114:	e7fd      	b.n	8004112 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00b      	beq.n	8004136 <vPortFree+0x66>
	__asm volatile
 800411e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004122:	f383 8811 	msr	BASEPRI, r3
 8004126:	f3bf 8f6f 	isb	sy
 800412a:	f3bf 8f4f 	dsb	sy
 800412e:	60bb      	str	r3, [r7, #8]
}
 8004130:	bf00      	nop
 8004132:	bf00      	nop
 8004134:	e7fd      	b.n	8004132 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	685a      	ldr	r2, [r3, #4]
 800413a:	4b11      	ldr	r3, [pc, #68]	@ (8004180 <vPortFree+0xb0>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4013      	ands	r3, r2
 8004140:	2b00      	cmp	r3, #0
 8004142:	d019      	beq.n	8004178 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d115      	bne.n	8004178 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	685a      	ldr	r2, [r3, #4]
 8004150:	4b0b      	ldr	r3, [pc, #44]	@ (8004180 <vPortFree+0xb0>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	43db      	mvns	r3, r3
 8004156:	401a      	ands	r2, r3
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800415c:	f7fe fd00 	bl	8002b60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	4b07      	ldr	r3, [pc, #28]	@ (8004184 <vPortFree+0xb4>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4413      	add	r3, r2
 800416a:	4a06      	ldr	r2, [pc, #24]	@ (8004184 <vPortFree+0xb4>)
 800416c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800416e:	6938      	ldr	r0, [r7, #16]
 8004170:	f000 f86c 	bl	800424c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004174:	f7fe fd02 	bl	8002b7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004178:	bf00      	nop
 800417a:	3718      	adds	r7, #24
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	20001ab0 	.word	0x20001ab0
 8004184:	20001aa8 	.word	0x20001aa8

08004188 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800418e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004192:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004194:	4b27      	ldr	r3, [pc, #156]	@ (8004234 <prvHeapInit+0xac>)
 8004196:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f003 0307 	and.w	r3, r3, #7
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00c      	beq.n	80041bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	3307      	adds	r3, #7
 80041a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f023 0307 	bic.w	r3, r3, #7
 80041ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80041b0:	68ba      	ldr	r2, [r7, #8]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	4a1f      	ldr	r2, [pc, #124]	@ (8004234 <prvHeapInit+0xac>)
 80041b8:	4413      	add	r3, r2
 80041ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80041c0:	4a1d      	ldr	r2, [pc, #116]	@ (8004238 <prvHeapInit+0xb0>)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80041c6:	4b1c      	ldr	r3, [pc, #112]	@ (8004238 <prvHeapInit+0xb0>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68ba      	ldr	r2, [r7, #8]
 80041d0:	4413      	add	r3, r2
 80041d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80041d4:	2208      	movs	r2, #8
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	1a9b      	subs	r3, r3, r2
 80041da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f023 0307 	bic.w	r3, r3, #7
 80041e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4a15      	ldr	r2, [pc, #84]	@ (800423c <prvHeapInit+0xb4>)
 80041e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80041ea:	4b14      	ldr	r3, [pc, #80]	@ (800423c <prvHeapInit+0xb4>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2200      	movs	r2, #0
 80041f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80041f2:	4b12      	ldr	r3, [pc, #72]	@ (800423c <prvHeapInit+0xb4>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2200      	movs	r2, #0
 80041f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	1ad2      	subs	r2, r2, r3
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004208:	4b0c      	ldr	r3, [pc, #48]	@ (800423c <prvHeapInit+0xb4>)
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	4a0a      	ldr	r2, [pc, #40]	@ (8004240 <prvHeapInit+0xb8>)
 8004216:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	4a09      	ldr	r2, [pc, #36]	@ (8004244 <prvHeapInit+0xbc>)
 800421e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004220:	4b09      	ldr	r3, [pc, #36]	@ (8004248 <prvHeapInit+0xc0>)
 8004222:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004226:	601a      	str	r2, [r3, #0]
}
 8004228:	bf00      	nop
 800422a:	3714      	adds	r7, #20
 800422c:	46bd      	mov	sp, r7
 800422e:	bc80      	pop	{r7}
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	20000e9c 	.word	0x20000e9c
 8004238:	20001a9c 	.word	0x20001a9c
 800423c:	20001aa4 	.word	0x20001aa4
 8004240:	20001aac 	.word	0x20001aac
 8004244:	20001aa8 	.word	0x20001aa8
 8004248:	20001ab0 	.word	0x20001ab0

0800424c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004254:	4b27      	ldr	r3, [pc, #156]	@ (80042f4 <prvInsertBlockIntoFreeList+0xa8>)
 8004256:	60fb      	str	r3, [r7, #12]
 8004258:	e002      	b.n	8004260 <prvInsertBlockIntoFreeList+0x14>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	60fb      	str	r3, [r7, #12]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	429a      	cmp	r2, r3
 8004268:	d8f7      	bhi.n	800425a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	68ba      	ldr	r2, [r7, #8]
 8004274:	4413      	add	r3, r2
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	429a      	cmp	r2, r3
 800427a:	d108      	bne.n	800428e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	685a      	ldr	r2, [r3, #4]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	441a      	add	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	68ba      	ldr	r2, [r7, #8]
 8004298:	441a      	add	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d118      	bne.n	80042d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	4b14      	ldr	r3, [pc, #80]	@ (80042f8 <prvInsertBlockIntoFreeList+0xac>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d00d      	beq.n	80042ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	441a      	add	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	601a      	str	r2, [r3, #0]
 80042c8:	e008      	b.n	80042dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80042ca:	4b0b      	ldr	r3, [pc, #44]	@ (80042f8 <prvInsertBlockIntoFreeList+0xac>)
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	e003      	b.n	80042dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d002      	beq.n	80042ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042ea:	bf00      	nop
 80042ec:	3714      	adds	r7, #20
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bc80      	pop	{r7}
 80042f2:	4770      	bx	lr
 80042f4:	20001a9c 	.word	0x20001a9c
 80042f8:	20001aa4 	.word	0x20001aa4

080042fc <memset>:
 80042fc:	4603      	mov	r3, r0
 80042fe:	4402      	add	r2, r0
 8004300:	4293      	cmp	r3, r2
 8004302:	d100      	bne.n	8004306 <memset+0xa>
 8004304:	4770      	bx	lr
 8004306:	f803 1b01 	strb.w	r1, [r3], #1
 800430a:	e7f9      	b.n	8004300 <memset+0x4>

0800430c <_reclaim_reent>:
 800430c:	4b29      	ldr	r3, [pc, #164]	@ (80043b4 <_reclaim_reent+0xa8>)
 800430e:	b570      	push	{r4, r5, r6, lr}
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4604      	mov	r4, r0
 8004314:	4283      	cmp	r3, r0
 8004316:	d04b      	beq.n	80043b0 <_reclaim_reent+0xa4>
 8004318:	69c3      	ldr	r3, [r0, #28]
 800431a:	b1ab      	cbz	r3, 8004348 <_reclaim_reent+0x3c>
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	b16b      	cbz	r3, 800433c <_reclaim_reent+0x30>
 8004320:	2500      	movs	r5, #0
 8004322:	69e3      	ldr	r3, [r4, #28]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	5959      	ldr	r1, [r3, r5]
 8004328:	2900      	cmp	r1, #0
 800432a:	d13b      	bne.n	80043a4 <_reclaim_reent+0x98>
 800432c:	3504      	adds	r5, #4
 800432e:	2d80      	cmp	r5, #128	@ 0x80
 8004330:	d1f7      	bne.n	8004322 <_reclaim_reent+0x16>
 8004332:	69e3      	ldr	r3, [r4, #28]
 8004334:	4620      	mov	r0, r4
 8004336:	68d9      	ldr	r1, [r3, #12]
 8004338:	f000 f872 	bl	8004420 <_free_r>
 800433c:	69e3      	ldr	r3, [r4, #28]
 800433e:	6819      	ldr	r1, [r3, #0]
 8004340:	b111      	cbz	r1, 8004348 <_reclaim_reent+0x3c>
 8004342:	4620      	mov	r0, r4
 8004344:	f000 f86c 	bl	8004420 <_free_r>
 8004348:	6961      	ldr	r1, [r4, #20]
 800434a:	b111      	cbz	r1, 8004352 <_reclaim_reent+0x46>
 800434c:	4620      	mov	r0, r4
 800434e:	f000 f867 	bl	8004420 <_free_r>
 8004352:	69e1      	ldr	r1, [r4, #28]
 8004354:	b111      	cbz	r1, 800435c <_reclaim_reent+0x50>
 8004356:	4620      	mov	r0, r4
 8004358:	f000 f862 	bl	8004420 <_free_r>
 800435c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800435e:	b111      	cbz	r1, 8004366 <_reclaim_reent+0x5a>
 8004360:	4620      	mov	r0, r4
 8004362:	f000 f85d 	bl	8004420 <_free_r>
 8004366:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004368:	b111      	cbz	r1, 8004370 <_reclaim_reent+0x64>
 800436a:	4620      	mov	r0, r4
 800436c:	f000 f858 	bl	8004420 <_free_r>
 8004370:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004372:	b111      	cbz	r1, 800437a <_reclaim_reent+0x6e>
 8004374:	4620      	mov	r0, r4
 8004376:	f000 f853 	bl	8004420 <_free_r>
 800437a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800437c:	b111      	cbz	r1, 8004384 <_reclaim_reent+0x78>
 800437e:	4620      	mov	r0, r4
 8004380:	f000 f84e 	bl	8004420 <_free_r>
 8004384:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004386:	b111      	cbz	r1, 800438e <_reclaim_reent+0x82>
 8004388:	4620      	mov	r0, r4
 800438a:	f000 f849 	bl	8004420 <_free_r>
 800438e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004390:	b111      	cbz	r1, 8004398 <_reclaim_reent+0x8c>
 8004392:	4620      	mov	r0, r4
 8004394:	f000 f844 	bl	8004420 <_free_r>
 8004398:	6a23      	ldr	r3, [r4, #32]
 800439a:	b14b      	cbz	r3, 80043b0 <_reclaim_reent+0xa4>
 800439c:	4620      	mov	r0, r4
 800439e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80043a2:	4718      	bx	r3
 80043a4:	680e      	ldr	r6, [r1, #0]
 80043a6:	4620      	mov	r0, r4
 80043a8:	f000 f83a 	bl	8004420 <_free_r>
 80043ac:	4631      	mov	r1, r6
 80043ae:	e7bb      	b.n	8004328 <_reclaim_reent+0x1c>
 80043b0:	bd70      	pop	{r4, r5, r6, pc}
 80043b2:	bf00      	nop
 80043b4:	20000010 	.word	0x20000010

080043b8 <__libc_init_array>:
 80043b8:	b570      	push	{r4, r5, r6, lr}
 80043ba:	2600      	movs	r6, #0
 80043bc:	4d0c      	ldr	r5, [pc, #48]	@ (80043f0 <__libc_init_array+0x38>)
 80043be:	4c0d      	ldr	r4, [pc, #52]	@ (80043f4 <__libc_init_array+0x3c>)
 80043c0:	1b64      	subs	r4, r4, r5
 80043c2:	10a4      	asrs	r4, r4, #2
 80043c4:	42a6      	cmp	r6, r4
 80043c6:	d109      	bne.n	80043dc <__libc_init_array+0x24>
 80043c8:	f000 f87e 	bl	80044c8 <_init>
 80043cc:	2600      	movs	r6, #0
 80043ce:	4d0a      	ldr	r5, [pc, #40]	@ (80043f8 <__libc_init_array+0x40>)
 80043d0:	4c0a      	ldr	r4, [pc, #40]	@ (80043fc <__libc_init_array+0x44>)
 80043d2:	1b64      	subs	r4, r4, r5
 80043d4:	10a4      	asrs	r4, r4, #2
 80043d6:	42a6      	cmp	r6, r4
 80043d8:	d105      	bne.n	80043e6 <__libc_init_array+0x2e>
 80043da:	bd70      	pop	{r4, r5, r6, pc}
 80043dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80043e0:	4798      	blx	r3
 80043e2:	3601      	adds	r6, #1
 80043e4:	e7ee      	b.n	80043c4 <__libc_init_array+0xc>
 80043e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80043ea:	4798      	blx	r3
 80043ec:	3601      	adds	r6, #1
 80043ee:	e7f2      	b.n	80043d6 <__libc_init_array+0x1e>
 80043f0:	080045bc 	.word	0x080045bc
 80043f4:	080045bc 	.word	0x080045bc
 80043f8:	080045bc 	.word	0x080045bc
 80043fc:	080045c0 	.word	0x080045c0

08004400 <__retarget_lock_acquire_recursive>:
 8004400:	4770      	bx	lr

08004402 <__retarget_lock_release_recursive>:
 8004402:	4770      	bx	lr

08004404 <memcpy>:
 8004404:	440a      	add	r2, r1
 8004406:	4291      	cmp	r1, r2
 8004408:	f100 33ff 	add.w	r3, r0, #4294967295
 800440c:	d100      	bne.n	8004410 <memcpy+0xc>
 800440e:	4770      	bx	lr
 8004410:	b510      	push	{r4, lr}
 8004412:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004416:	4291      	cmp	r1, r2
 8004418:	f803 4f01 	strb.w	r4, [r3, #1]!
 800441c:	d1f9      	bne.n	8004412 <memcpy+0xe>
 800441e:	bd10      	pop	{r4, pc}

08004420 <_free_r>:
 8004420:	b538      	push	{r3, r4, r5, lr}
 8004422:	4605      	mov	r5, r0
 8004424:	2900      	cmp	r1, #0
 8004426:	d040      	beq.n	80044aa <_free_r+0x8a>
 8004428:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800442c:	1f0c      	subs	r4, r1, #4
 800442e:	2b00      	cmp	r3, #0
 8004430:	bfb8      	it	lt
 8004432:	18e4      	addlt	r4, r4, r3
 8004434:	f000 f83c 	bl	80044b0 <__malloc_lock>
 8004438:	4a1c      	ldr	r2, [pc, #112]	@ (80044ac <_free_r+0x8c>)
 800443a:	6813      	ldr	r3, [r2, #0]
 800443c:	b933      	cbnz	r3, 800444c <_free_r+0x2c>
 800443e:	6063      	str	r3, [r4, #4]
 8004440:	6014      	str	r4, [r2, #0]
 8004442:	4628      	mov	r0, r5
 8004444:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004448:	f000 b838 	b.w	80044bc <__malloc_unlock>
 800444c:	42a3      	cmp	r3, r4
 800444e:	d908      	bls.n	8004462 <_free_r+0x42>
 8004450:	6820      	ldr	r0, [r4, #0]
 8004452:	1821      	adds	r1, r4, r0
 8004454:	428b      	cmp	r3, r1
 8004456:	bf01      	itttt	eq
 8004458:	6819      	ldreq	r1, [r3, #0]
 800445a:	685b      	ldreq	r3, [r3, #4]
 800445c:	1809      	addeq	r1, r1, r0
 800445e:	6021      	streq	r1, [r4, #0]
 8004460:	e7ed      	b.n	800443e <_free_r+0x1e>
 8004462:	461a      	mov	r2, r3
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	b10b      	cbz	r3, 800446c <_free_r+0x4c>
 8004468:	42a3      	cmp	r3, r4
 800446a:	d9fa      	bls.n	8004462 <_free_r+0x42>
 800446c:	6811      	ldr	r1, [r2, #0]
 800446e:	1850      	adds	r0, r2, r1
 8004470:	42a0      	cmp	r0, r4
 8004472:	d10b      	bne.n	800448c <_free_r+0x6c>
 8004474:	6820      	ldr	r0, [r4, #0]
 8004476:	4401      	add	r1, r0
 8004478:	1850      	adds	r0, r2, r1
 800447a:	4283      	cmp	r3, r0
 800447c:	6011      	str	r1, [r2, #0]
 800447e:	d1e0      	bne.n	8004442 <_free_r+0x22>
 8004480:	6818      	ldr	r0, [r3, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	4408      	add	r0, r1
 8004486:	6010      	str	r0, [r2, #0]
 8004488:	6053      	str	r3, [r2, #4]
 800448a:	e7da      	b.n	8004442 <_free_r+0x22>
 800448c:	d902      	bls.n	8004494 <_free_r+0x74>
 800448e:	230c      	movs	r3, #12
 8004490:	602b      	str	r3, [r5, #0]
 8004492:	e7d6      	b.n	8004442 <_free_r+0x22>
 8004494:	6820      	ldr	r0, [r4, #0]
 8004496:	1821      	adds	r1, r4, r0
 8004498:	428b      	cmp	r3, r1
 800449a:	bf01      	itttt	eq
 800449c:	6819      	ldreq	r1, [r3, #0]
 800449e:	685b      	ldreq	r3, [r3, #4]
 80044a0:	1809      	addeq	r1, r1, r0
 80044a2:	6021      	streq	r1, [r4, #0]
 80044a4:	6063      	str	r3, [r4, #4]
 80044a6:	6054      	str	r4, [r2, #4]
 80044a8:	e7cb      	b.n	8004442 <_free_r+0x22>
 80044aa:	bd38      	pop	{r3, r4, r5, pc}
 80044ac:	20001bf0 	.word	0x20001bf0

080044b0 <__malloc_lock>:
 80044b0:	4801      	ldr	r0, [pc, #4]	@ (80044b8 <__malloc_lock+0x8>)
 80044b2:	f7ff bfa5 	b.w	8004400 <__retarget_lock_acquire_recursive>
 80044b6:	bf00      	nop
 80044b8:	20001bec 	.word	0x20001bec

080044bc <__malloc_unlock>:
 80044bc:	4801      	ldr	r0, [pc, #4]	@ (80044c4 <__malloc_unlock+0x8>)
 80044be:	f7ff bfa0 	b.w	8004402 <__retarget_lock_release_recursive>
 80044c2:	bf00      	nop
 80044c4:	20001bec 	.word	0x20001bec

080044c8 <_init>:
 80044c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ca:	bf00      	nop
 80044cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ce:	bc08      	pop	{r3}
 80044d0:	469e      	mov	lr, r3
 80044d2:	4770      	bx	lr

080044d4 <_fini>:
 80044d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044d6:	bf00      	nop
 80044d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044da:	bc08      	pop	{r3}
 80044dc:	469e      	mov	lr, r3
 80044de:	4770      	bx	lr
