
project2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000678c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  0800692c  0800692c  0000792c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ab4  08006ab4  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  08006ab4  08006ab4  00007ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006abc  08006abc  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006abc  08006abc  00007abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006ac0  08006ac0  00007ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006ac4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c4c  20000060  08006b24  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004cac  08006b24  00008cac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018b7b  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034a4  00000000  00000000  00020c0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001500  00000000  00000000  000240b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001057  00000000  00000000  000255b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000036c1  00000000  00000000  00026607  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000173bd  00000000  00000000  00029cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4374  00000000  00000000  00041085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e53f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005dc0  00000000  00000000  000e543c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000eb1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006914 	.word	0x08006914

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08006914 	.word	0x08006914

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <Light_LED>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Light_LED(){
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	if(x_val < 4096/2){
 8000574:	4b0d      	ldr	r3, [pc, #52]	@ (80005ac <Light_LED+0x3c>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800057c:	da0a      	bge.n	8000594 <Light_LED+0x24>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 800057e:	2201      	movs	r2, #1
 8000580:	2140      	movs	r1, #64	@ 0x40
 8000582:	480b      	ldr	r0, [pc, #44]	@ (80005b0 <Light_LED+0x40>)
 8000584:	f001 fb26 	bl	8001bd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 8000588:	2200      	movs	r2, #0
 800058a:	2180      	movs	r1, #128	@ 0x80
 800058c:	4808      	ldr	r0, [pc, #32]	@ (80005b0 <Light_LED+0x40>)
 800058e:	f001 fb21 	bl	8001bd4 <HAL_GPIO_WritePin>
		} else{
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
		}
}
 8000592:	e009      	b.n	80005a8 <Light_LED+0x38>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 8000594:	2200      	movs	r2, #0
 8000596:	2140      	movs	r1, #64	@ 0x40
 8000598:	4805      	ldr	r0, [pc, #20]	@ (80005b0 <Light_LED+0x40>)
 800059a:	f001 fb1b 	bl	8001bd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 800059e:	2201      	movs	r2, #1
 80005a0:	2180      	movs	r1, #128	@ 0x80
 80005a2:	4803      	ldr	r0, [pc, #12]	@ (80005b0 <Light_LED+0x40>)
 80005a4:	f001 fb16 	bl	8001bd4 <HAL_GPIO_WritePin>
}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	2000007c 	.word	0x2000007c
 80005b0:	40020000 	.word	0x40020000

080005b4 <Tf_LED>:

void Tf_LED(){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2140      	movs	r1, #64	@ 0x40
 80005bc:	4804      	ldr	r0, [pc, #16]	@ (80005d0 <Tf_LED+0x1c>)
 80005be:	f001 fb09 	bl	8001bd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2180      	movs	r1, #128	@ 0x80
 80005c6:	4802      	ldr	r0, [pc, #8]	@ (80005d0 <Tf_LED+0x1c>)
 80005c8:	f001 fb04 	bl	8001bd4 <HAL_GPIO_WritePin>
}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40020000 	.word	0x40020000

080005d4 <Menu_Display>:

void Menu_Display(){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af00      	add	r7, sp, #0
	char buffer[20] = "_";
 80005da:	235f      	movs	r3, #95	@ 0x5f
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	f107 0308 	add.w	r3, r7, #8
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
	sprintf(buffer, "Voltage = %d\r\n",x_val);
 80005ec:	4b08      	ldr	r3, [pc, #32]	@ (8000610 <Menu_Display+0x3c>)
 80005ee:	681a      	ldr	r2, [r3, #0]
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	4908      	ldr	r1, [pc, #32]	@ (8000614 <Menu_Display+0x40>)
 80005f4:	4618      	mov	r0, r3
 80005f6:	f005 fc97 	bl	8005f28 <siprintf>
	HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 20);
 80005fa:	1d39      	adds	r1, r7, #4
 80005fc:	2314      	movs	r3, #20
 80005fe:	2214      	movs	r2, #20
 8000600:	4805      	ldr	r0, [pc, #20]	@ (8000618 <Menu_Display+0x44>)
 8000602:	f002 fa4f 	bl	8002aa4 <HAL_UART_Transmit>
}
 8000606:	bf00      	nop
 8000608:	3718      	adds	r7, #24
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	2000007c 	.word	0x2000007c
 8000614:	08006968 	.word	0x08006968
 8000618:	200000d0 	.word	0x200000d0

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f000 fc26 	bl	8000e70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 f852 	bl	80006cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 f934 	bl	8000894 <MX_GPIO_Init>
  MX_ADC1_Init();
 800062c:	f000 f8b6 	bl	800079c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000630:	f000 f906 	bl	8000840 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000634:	f002 fecc 	bl	80033d0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000638:	4a15      	ldr	r2, [pc, #84]	@ (8000690 <main+0x74>)
 800063a:	2100      	movs	r1, #0
 800063c:	4815      	ldr	r0, [pc, #84]	@ (8000694 <main+0x78>)
 800063e:	f002 ff11 	bl	8003464 <osThreadNew>
 8000642:	4603      	mov	r3, r0
 8000644:	4a14      	ldr	r2, [pc, #80]	@ (8000698 <main+0x7c>)
 8000646:	6013      	str	r3, [r2, #0]

  /* creation of pickButtonTask */
  pickButtonTaskHandle = osThreadNew(pickButton, NULL, &pickButtonTask_attributes);
 8000648:	4a14      	ldr	r2, [pc, #80]	@ (800069c <main+0x80>)
 800064a:	2100      	movs	r1, #0
 800064c:	4814      	ldr	r0, [pc, #80]	@ (80006a0 <main+0x84>)
 800064e:	f002 ff09 	bl	8003464 <osThreadNew>
 8000652:	4603      	mov	r3, r0
 8000654:	4a13      	ldr	r2, [pc, #76]	@ (80006a4 <main+0x88>)
 8000656:	6013      	str	r3, [r2, #0]

  /* creation of LED */
  LEDHandle = osThreadNew(onLED, NULL, &LED_attributes);
 8000658:	4a13      	ldr	r2, [pc, #76]	@ (80006a8 <main+0x8c>)
 800065a:	2100      	movs	r1, #0
 800065c:	4813      	ldr	r0, [pc, #76]	@ (80006ac <main+0x90>)
 800065e:	f002 ff01 	bl	8003464 <osThreadNew>
 8000662:	4603      	mov	r3, r0
 8000664:	4a12      	ldr	r2, [pc, #72]	@ (80006b0 <main+0x94>)
 8000666:	6013      	str	r3, [r2, #0]

  /* creation of getADCTask */
  getADCTaskHandle = osThreadNew(getADC, NULL, &getADCTask_attributes);
 8000668:	4a12      	ldr	r2, [pc, #72]	@ (80006b4 <main+0x98>)
 800066a:	2100      	movs	r1, #0
 800066c:	4812      	ldr	r0, [pc, #72]	@ (80006b8 <main+0x9c>)
 800066e:	f002 fef9 	bl	8003464 <osThreadNew>
 8000672:	4603      	mov	r3, r0
 8000674:	4a11      	ldr	r2, [pc, #68]	@ (80006bc <main+0xa0>)
 8000676:	6013      	str	r3, [r2, #0]

  /* creation of dispUARTTask */
  dispUARTTaskHandle = osThreadNew(dispUART, NULL, &dispUARTTask_attributes);
 8000678:	4a11      	ldr	r2, [pc, #68]	@ (80006c0 <main+0xa4>)
 800067a:	2100      	movs	r1, #0
 800067c:	4811      	ldr	r0, [pc, #68]	@ (80006c4 <main+0xa8>)
 800067e:	f002 fef1 	bl	8003464 <osThreadNew>
 8000682:	4603      	mov	r3, r0
 8000684:	4a10      	ldr	r2, [pc, #64]	@ (80006c8 <main+0xac>)
 8000686:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000688:	f002 fec6 	bl	8003418 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800068c:	bf00      	nop
 800068e:	e7fd      	b.n	800068c <main+0x70>
 8000690:	080069b4 	.word	0x080069b4
 8000694:	08000935 	.word	0x08000935
 8000698:	20000118 	.word	0x20000118
 800069c:	080069d8 	.word	0x080069d8
 80006a0:	08000945 	.word	0x08000945
 80006a4:	2000011c 	.word	0x2000011c
 80006a8:	080069fc 	.word	0x080069fc
 80006ac:	08000985 	.word	0x08000985
 80006b0:	20000120 	.word	0x20000120
 80006b4:	08006a20 	.word	0x08006a20
 80006b8:	080009b9 	.word	0x080009b9
 80006bc:	20000124 	.word	0x20000124
 80006c0:	08006a44 	.word	0x08006a44
 80006c4:	080009f5 	.word	0x080009f5
 80006c8:	20000128 	.word	0x20000128

080006cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b094      	sub	sp, #80	@ 0x50
 80006d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d2:	f107 0320 	add.w	r3, r7, #32
 80006d6:	2230      	movs	r2, #48	@ 0x30
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f005 fc44 	bl	8005f68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f0:	2300      	movs	r3, #0
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	4b27      	ldr	r3, [pc, #156]	@ (8000794 <SystemClock_Config+0xc8>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f8:	4a26      	ldr	r2, [pc, #152]	@ (8000794 <SystemClock_Config+0xc8>)
 80006fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000700:	4b24      	ldr	r3, [pc, #144]	@ (8000794 <SystemClock_Config+0xc8>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000704:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800070c:	2300      	movs	r3, #0
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	4b21      	ldr	r3, [pc, #132]	@ (8000798 <SystemClock_Config+0xcc>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a20      	ldr	r2, [pc, #128]	@ (8000798 <SystemClock_Config+0xcc>)
 8000716:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800071a:	6013      	str	r3, [r2, #0]
 800071c:	4b1e      	ldr	r3, [pc, #120]	@ (8000798 <SystemClock_Config+0xcc>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000728:	2301      	movs	r3, #1
 800072a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800072c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000730:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000732:	2302      	movs	r3, #2
 8000734:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000736:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800073a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800073c:	230c      	movs	r3, #12
 800073e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000740:	2360      	movs	r3, #96	@ 0x60
 8000742:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000744:	2302      	movs	r3, #2
 8000746:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000748:	2304      	movs	r3, #4
 800074a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074c:	f107 0320 	add.w	r3, r7, #32
 8000750:	4618      	mov	r0, r3
 8000752:	f001 fa59 	bl	8001c08 <HAL_RCC_OscConfig>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800075c:	f000 f9b6 	bl	8000acc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000760:	230f      	movs	r3, #15
 8000762:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000764:	2302      	movs	r3, #2
 8000766:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800076c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000770:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000772:	2300      	movs	r3, #0
 8000774:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000776:	f107 030c 	add.w	r3, r7, #12
 800077a:	2103      	movs	r1, #3
 800077c:	4618      	mov	r0, r3
 800077e:	f001 fcbb 	bl	80020f8 <HAL_RCC_ClockConfig>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000788:	f000 f9a0 	bl	8000acc <Error_Handler>
  }
}
 800078c:	bf00      	nop
 800078e:	3750      	adds	r7, #80	@ 0x50
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40023800 	.word	0x40023800
 8000798:	40007000 	.word	0x40007000

0800079c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007a2:	463b      	mov	r3, r7
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007ae:	4b21      	ldr	r3, [pc, #132]	@ (8000834 <MX_ADC1_Init+0x98>)
 80007b0:	4a21      	ldr	r2, [pc, #132]	@ (8000838 <MX_ADC1_Init+0x9c>)
 80007b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000834 <MX_ADC1_Init+0x98>)
 80007b6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80007ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000834 <MX_ADC1_Init+0x98>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80007c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000834 <MX_ADC1_Init+0x98>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007c8:	4b1a      	ldr	r3, [pc, #104]	@ (8000834 <MX_ADC1_Init+0x98>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007ce:	4b19      	ldr	r3, [pc, #100]	@ (8000834 <MX_ADC1_Init+0x98>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007d6:	4b17      	ldr	r3, [pc, #92]	@ (8000834 <MX_ADC1_Init+0x98>)
 80007d8:	2200      	movs	r2, #0
 80007da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007dc:	4b15      	ldr	r3, [pc, #84]	@ (8000834 <MX_ADC1_Init+0x98>)
 80007de:	4a17      	ldr	r2, [pc, #92]	@ (800083c <MX_ADC1_Init+0xa0>)
 80007e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007e2:	4b14      	ldr	r3, [pc, #80]	@ (8000834 <MX_ADC1_Init+0x98>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007e8:	4b12      	ldr	r3, [pc, #72]	@ (8000834 <MX_ADC1_Init+0x98>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007ee:	4b11      	ldr	r3, [pc, #68]	@ (8000834 <MX_ADC1_Init+0x98>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000834 <MX_ADC1_Init+0x98>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007fc:	480d      	ldr	r0, [pc, #52]	@ (8000834 <MX_ADC1_Init+0x98>)
 80007fe:	f000 fb79 	bl	8000ef4 <HAL_ADC_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000808:	f000 f960 	bl	8000acc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800080c:	2300      	movs	r3, #0
 800080e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000810:	2301      	movs	r3, #1
 8000812:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000814:	2300      	movs	r3, #0
 8000816:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000818:	463b      	mov	r3, r7
 800081a:	4619      	mov	r1, r3
 800081c:	4805      	ldr	r0, [pc, #20]	@ (8000834 <MX_ADC1_Init+0x98>)
 800081e:	f000 fd2d 	bl	800127c <HAL_ADC_ConfigChannel>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000828:	f000 f950 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800082c:	bf00      	nop
 800082e:	3710      	adds	r7, #16
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000088 	.word	0x20000088
 8000838:	40012000 	.word	0x40012000
 800083c:	0f000001 	.word	0x0f000001

08000840 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000844:	4b11      	ldr	r3, [pc, #68]	@ (800088c <MX_USART2_UART_Init+0x4c>)
 8000846:	4a12      	ldr	r2, [pc, #72]	@ (8000890 <MX_USART2_UART_Init+0x50>)
 8000848:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800084a:	4b10      	ldr	r3, [pc, #64]	@ (800088c <MX_USART2_UART_Init+0x4c>)
 800084c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000850:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000852:	4b0e      	ldr	r3, [pc, #56]	@ (800088c <MX_USART2_UART_Init+0x4c>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000858:	4b0c      	ldr	r3, [pc, #48]	@ (800088c <MX_USART2_UART_Init+0x4c>)
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800085e:	4b0b      	ldr	r3, [pc, #44]	@ (800088c <MX_USART2_UART_Init+0x4c>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000864:	4b09      	ldr	r3, [pc, #36]	@ (800088c <MX_USART2_UART_Init+0x4c>)
 8000866:	220c      	movs	r2, #12
 8000868:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086a:	4b08      	ldr	r3, [pc, #32]	@ (800088c <MX_USART2_UART_Init+0x4c>)
 800086c:	2200      	movs	r2, #0
 800086e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000870:	4b06      	ldr	r3, [pc, #24]	@ (800088c <MX_USART2_UART_Init+0x4c>)
 8000872:	2200      	movs	r2, #0
 8000874:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000876:	4805      	ldr	r0, [pc, #20]	@ (800088c <MX_USART2_UART_Init+0x4c>)
 8000878:	f002 f8c4 	bl	8002a04 <HAL_UART_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000882:	f000 f923 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	200000d0 	.word	0x200000d0
 8000890:	40004400 	.word	0x40004400

08000894 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b088      	sub	sp, #32
 8000898:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089a:	f107 030c 	add.w	r3, r7, #12
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
 80008a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	4b1f      	ldr	r3, [pc, #124]	@ (800092c <MX_GPIO_Init+0x98>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	4a1e      	ldr	r2, [pc, #120]	@ (800092c <MX_GPIO_Init+0x98>)
 80008b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ba:	4b1c      	ldr	r3, [pc, #112]	@ (800092c <MX_GPIO_Init+0x98>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	4b18      	ldr	r3, [pc, #96]	@ (800092c <MX_GPIO_Init+0x98>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4a17      	ldr	r2, [pc, #92]	@ (800092c <MX_GPIO_Init+0x98>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d6:	4b15      	ldr	r3, [pc, #84]	@ (800092c <MX_GPIO_Init+0x98>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	21c0      	movs	r1, #192	@ 0xc0
 80008e6:	4812      	ldr	r0, [pc, #72]	@ (8000930 <MX_GPIO_Init+0x9c>)
 80008e8:	f001 f974 	bl	8001bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80008ec:	23c0      	movs	r3, #192	@ 0xc0
 80008ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fc:	f107 030c 	add.w	r3, r7, #12
 8000900:	4619      	mov	r1, r3
 8000902:	480b      	ldr	r0, [pc, #44]	@ (8000930 <MX_GPIO_Init+0x9c>)
 8000904:	f000 ffca 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000908:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800090c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000912:	2301      	movs	r3, #1
 8000914:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 030c 	add.w	r3, r7, #12
 800091a:	4619      	mov	r1, r3
 800091c:	4804      	ldr	r0, [pc, #16]	@ (8000930 <MX_GPIO_Init+0x9c>)
 800091e:	f000 ffbd 	bl	800189c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000922:	bf00      	nop
 8000924:	3720      	adds	r7, #32
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40023800 	.word	0x40023800
 8000930:	40020000 	.word	0x40020000

08000934 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800093c:	2001      	movs	r0, #1
 800093e:	f002 fe23 	bl	8003588 <osDelay>
 8000942:	e7fb      	b.n	800093c <StartDefaultTask+0x8>

08000944 <pickButton>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pickButton */
void pickButton(void *argument)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pickButton */
  /* Infinite loop */
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == GPIO_PIN_RESET)
 800094c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000950:	480a      	ldr	r0, [pc, #40]	@ (800097c <pickButton+0x38>)
 8000952:	f001 f927 	bl	8001ba4 <HAL_GPIO_ReadPin>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d107      	bne.n	800096c <pickButton+0x28>
	  	  {
	  		  osDelay(300);	// debounce
 800095c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000960:	f002 fe12 	bl	8003588 <osDelay>
	  		  button1_pressed = 1;
 8000964:	4b06      	ldr	r3, [pc, #24]	@ (8000980 <pickButton+0x3c>)
 8000966:	2201      	movs	r2, #1
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	e002      	b.n	8000972 <pickButton+0x2e>
	  	  }
	  	  else button1_pressed = 0;
 800096c:	4b04      	ldr	r3, [pc, #16]	@ (8000980 <pickButton+0x3c>)
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
	  //	  {
	  //		  osDelay(300);	// debounce
	  //		  button2_pressed = 1;
	  //	  }

    osDelay(100);
 8000972:	2064      	movs	r0, #100	@ 0x64
 8000974:	f002 fe08 	bl	8003588 <osDelay>
	  if(HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == GPIO_PIN_RESET)
 8000978:	e7e8      	b.n	800094c <pickButton+0x8>
 800097a:	bf00      	nop
 800097c:	40020000 	.word	0x40020000
 8000980:	20000080 	.word	0x20000080

08000984 <onLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_onLED */
void onLED(void *argument)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN onLED */
  /* Infinite loop */
    while (1)
    {
        if (button1_pressed == 1)
 800098c:	4b09      	ldr	r3, [pc, #36]	@ (80009b4 <onLED+0x30>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2b01      	cmp	r3, #1
 8000992:	d10c      	bne.n	80009ae <onLED+0x2a>
        {
            Light_LED();
 8000994:	f7ff fdec 	bl	8000570 <Light_LED>
            osDelay(300);
 8000998:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800099c:	f002 fdf4 	bl	8003588 <osDelay>
            Tf_LED();
 80009a0:	f7ff fe08 	bl	80005b4 <Tf_LED>
            osDelay(300);
 80009a4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80009a8:	f002 fdee 	bl	8003588 <osDelay>
 80009ac:	e7ee      	b.n	800098c <onLED+0x8>
        }
        else
            Light_LED();
 80009ae:	f7ff fddf 	bl	8000570 <Light_LED>
        if (button1_pressed == 1)
 80009b2:	e7eb      	b.n	800098c <onLED+0x8>
 80009b4:	20000080 	.word	0x20000080

080009b8 <getADC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_getADC */
void getADC(void *argument)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN getADC */
  /* Infinite loop */
	while (1)
	    {

	        HAL_ADC_Start(&hadc1);
 80009c0:	480a      	ldr	r0, [pc, #40]	@ (80009ec <getADC+0x34>)
 80009c2:	f000 fadb 	bl	8000f7c <HAL_ADC_Start>
	        HAL_ADC_PollForConversion(&hadc1, 10);
 80009c6:	210a      	movs	r1, #10
 80009c8:	4808      	ldr	r0, [pc, #32]	@ (80009ec <getADC+0x34>)
 80009ca:	f000 fbbe 	bl	800114a <HAL_ADC_PollForConversion>
	        x_val = (HAL_ADC_GetValue(&hadc1));
 80009ce:	4807      	ldr	r0, [pc, #28]	@ (80009ec <getADC+0x34>)
 80009d0:	f000 fc46 	bl	8001260 <HAL_ADC_GetValue>
 80009d4:	4603      	mov	r3, r0
 80009d6:	461a      	mov	r2, r3
 80009d8:	4b05      	ldr	r3, [pc, #20]	@ (80009f0 <getADC+0x38>)
 80009da:	601a      	str	r2, [r3, #0]
	        HAL_ADC_Stop(&hadc1);
 80009dc:	4803      	ldr	r0, [pc, #12]	@ (80009ec <getADC+0x34>)
 80009de:	f000 fb81 	bl	80010e4 <HAL_ADC_Stop>

	        // process ADC values here

	        osDelay(10);
 80009e2:	200a      	movs	r0, #10
 80009e4:	f002 fdd0 	bl	8003588 <osDelay>
	        HAL_ADC_Start(&hadc1);
 80009e8:	bf00      	nop
 80009ea:	e7e9      	b.n	80009c0 <getADC+0x8>
 80009ec:	20000088 	.word	0x20000088
 80009f0:	2000007c 	.word	0x2000007c

080009f4 <dispUART>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_dispUART */
void dispUART(void *argument)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b088      	sub	sp, #32
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN dispUART */
  /* Infinite loop */
	Menu_Display();
 80009fc:	f7ff fdea 	bl	80005d4 <Menu_Display>
	    char buffer2[20] = "_";
 8000a00:	235f      	movs	r3, #95	@ 0x5f
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	f107 0310 	add.w	r3, r7, #16
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]

	    for (;;)
	    {
	        // select user input
	        if (HAL_UART_Receive(&huart2, &choice, sizeof(choice), 10) == HAL_OK)
 8000a12:	230a      	movs	r3, #10
 8000a14:	2201      	movs	r2, #1
 8000a16:	491d      	ldr	r1, [pc, #116]	@ (8000a8c <dispUART+0x98>)
 8000a18:	481d      	ldr	r0, [pc, #116]	@ (8000a90 <dispUART+0x9c>)
 8000a1a:	f002 f8ce 	bl	8002bba <HAL_UART_Receive>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d124      	bne.n	8000a6e <dispUART+0x7a>
	        {
	            switch (choice)
 8000a24:	4b19      	ldr	r3, [pc, #100]	@ (8000a8c <dispUART+0x98>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b31      	cmp	r3, #49	@ 0x31
 8000a2a:	d002      	beq.n	8000a32 <dispUART+0x3e>
 8000a2c:	2b32      	cmp	r3, #50	@ 0x32
 8000a2e:	d010      	beq.n	8000a52 <dispUART+0x5e>
	            case '2':
	            	sprintf(buffer2, "Hello World!");
	            	HAL_UART_Transmit(&huart2, buffer2, sizeof(buffer2), 20);
	                break;
	            default:
	                break;
 8000a30:	e01d      	b.n	8000a6e <dispUART+0x7a>
	                sprintf(buffer2, "Voltage = %d\r\n", x_val);
 8000a32:	4b18      	ldr	r3, [pc, #96]	@ (8000a94 <dispUART+0xa0>)
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	f107 030c 	add.w	r3, r7, #12
 8000a3a:	4917      	ldr	r1, [pc, #92]	@ (8000a98 <dispUART+0xa4>)
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f005 fa73 	bl	8005f28 <siprintf>
	                HAL_UART_Transmit(&huart2, buffer2, sizeof(buffer2), 20);
 8000a42:	f107 010c 	add.w	r1, r7, #12
 8000a46:	2314      	movs	r3, #20
 8000a48:	2214      	movs	r2, #20
 8000a4a:	4811      	ldr	r0, [pc, #68]	@ (8000a90 <dispUART+0x9c>)
 8000a4c:	f002 f82a 	bl	8002aa4 <HAL_UART_Transmit>
	                break;
 8000a50:	e00d      	b.n	8000a6e <dispUART+0x7a>
	            	sprintf(buffer2, "Hello World!");
 8000a52:	f107 030c 	add.w	r3, r7, #12
 8000a56:	4911      	ldr	r1, [pc, #68]	@ (8000a9c <dispUART+0xa8>)
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f005 fa65 	bl	8005f28 <siprintf>
	            	HAL_UART_Transmit(&huart2, buffer2, sizeof(buffer2), 20);
 8000a5e:	f107 010c 	add.w	r1, r7, #12
 8000a62:	2314      	movs	r3, #20
 8000a64:	2214      	movs	r2, #20
 8000a66:	480a      	ldr	r0, [pc, #40]	@ (8000a90 <dispUART+0x9c>)
 8000a68:	f002 f81c 	bl	8002aa4 <HAL_UART_Transmit>
	                break;
 8000a6c:	bf00      	nop
	        }
	        else
	        {
	        }

	        if (button1_pressed)
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa0 <dispUART+0xac>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d005      	beq.n	8000a82 <dispUART+0x8e>
	        {
	            HAL_UART_Transmit(&huart2, (uint8_t *)"Button1 pressed\r\n", sizeof("Button1 pressed\r\n"), 10);
 8000a76:	230a      	movs	r3, #10
 8000a78:	2212      	movs	r2, #18
 8000a7a:	490a      	ldr	r1, [pc, #40]	@ (8000aa4 <dispUART+0xb0>)
 8000a7c:	4804      	ldr	r0, [pc, #16]	@ (8000a90 <dispUART+0x9c>)
 8000a7e:	f002 f811 	bl	8002aa4 <HAL_UART_Transmit>
	        //		  {
	        //			  HAL_UART_Transmit(&huart1, (uint8_t*)"Button2 pressed\r\n", sizeof("Button2 pressed\r\n"), 10);
	        //			  button2_pressed = 0;
	        //		  }

	        osDelay(100);
 8000a82:	2064      	movs	r0, #100	@ 0x64
 8000a84:	f002 fd80 	bl	8003588 <osDelay>
	        if (HAL_UART_Receive(&huart2, &choice, sizeof(choice), 10) == HAL_OK)
 8000a88:	e7c3      	b.n	8000a12 <dispUART+0x1e>
 8000a8a:	bf00      	nop
 8000a8c:	20000084 	.word	0x20000084
 8000a90:	200000d0 	.word	0x200000d0
 8000a94:	2000007c 	.word	0x2000007c
 8000a98:	08006968 	.word	0x08006968
 8000a9c:	08006978 	.word	0x08006978
 8000aa0:	20000080 	.word	0x20000080
 8000aa4:	08006988 	.word	0x08006988

08000aa8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a04      	ldr	r2, [pc, #16]	@ (8000ac8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d101      	bne.n	8000abe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aba:	f000 f9fb 	bl	8000eb4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40000800 	.word	0x40000800

08000acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad0:	b672      	cpsid	i
}
 8000ad2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <Error_Handler+0x8>

08000ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	4b12      	ldr	r3, [pc, #72]	@ (8000b2c <HAL_MspInit+0x54>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ae6:	4a11      	ldr	r2, [pc, #68]	@ (8000b2c <HAL_MspInit+0x54>)
 8000ae8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aee:	4b0f      	ldr	r3, [pc, #60]	@ (8000b2c <HAL_MspInit+0x54>)
 8000af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000af2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	603b      	str	r3, [r7, #0]
 8000afe:	4b0b      	ldr	r3, [pc, #44]	@ (8000b2c <HAL_MspInit+0x54>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b02:	4a0a      	ldr	r2, [pc, #40]	@ (8000b2c <HAL_MspInit+0x54>)
 8000b04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b0a:	4b08      	ldr	r3, [pc, #32]	@ (8000b2c <HAL_MspInit+0x54>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b16:	2200      	movs	r2, #0
 8000b18:	210f      	movs	r1, #15
 8000b1a:	f06f 0001 	mvn.w	r0, #1
 8000b1e:	f000 fe93 	bl	8001848 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40023800 	.word	0x40023800

08000b30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08a      	sub	sp, #40	@ 0x28
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a17      	ldr	r2, [pc, #92]	@ (8000bac <HAL_ADC_MspInit+0x7c>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d127      	bne.n	8000ba2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	613b      	str	r3, [r7, #16]
 8000b56:	4b16      	ldr	r3, [pc, #88]	@ (8000bb0 <HAL_ADC_MspInit+0x80>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b5a:	4a15      	ldr	r2, [pc, #84]	@ (8000bb0 <HAL_ADC_MspInit+0x80>)
 8000b5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b60:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b62:	4b13      	ldr	r3, [pc, #76]	@ (8000bb0 <HAL_ADC_MspInit+0x80>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b6a:	613b      	str	r3, [r7, #16]
 8000b6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb0 <HAL_ADC_MspInit+0x80>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b76:	4a0e      	ldr	r2, [pc, #56]	@ (8000bb0 <HAL_ADC_MspInit+0x80>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb0 <HAL_ADC_MspInit+0x80>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b96:	f107 0314 	add.w	r3, r7, #20
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4805      	ldr	r0, [pc, #20]	@ (8000bb4 <HAL_ADC_MspInit+0x84>)
 8000b9e:	f000 fe7d 	bl	800189c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000ba2:	bf00      	nop
 8000ba4:	3728      	adds	r7, #40	@ 0x28
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40012000 	.word	0x40012000
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40020000 	.word	0x40020000

08000bb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08a      	sub	sp, #40	@ 0x28
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a19      	ldr	r2, [pc, #100]	@ (8000c3c <HAL_UART_MspInit+0x84>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d12b      	bne.n	8000c32 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	613b      	str	r3, [r7, #16]
 8000bde:	4b18      	ldr	r3, [pc, #96]	@ (8000c40 <HAL_UART_MspInit+0x88>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be2:	4a17      	ldr	r2, [pc, #92]	@ (8000c40 <HAL_UART_MspInit+0x88>)
 8000be4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000be8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bea:	4b15      	ldr	r3, [pc, #84]	@ (8000c40 <HAL_UART_MspInit+0x88>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	4b11      	ldr	r3, [pc, #68]	@ (8000c40 <HAL_UART_MspInit+0x88>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	4a10      	ldr	r2, [pc, #64]	@ (8000c40 <HAL_UART_MspInit+0x88>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c06:	4b0e      	ldr	r3, [pc, #56]	@ (8000c40 <HAL_UART_MspInit+0x88>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c12:	230c      	movs	r3, #12
 8000c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	2302      	movs	r3, #2
 8000c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c22:	2307      	movs	r3, #7
 8000c24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4805      	ldr	r0, [pc, #20]	@ (8000c44 <HAL_UART_MspInit+0x8c>)
 8000c2e:	f000 fe35 	bl	800189c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c32:	bf00      	nop
 8000c34:	3728      	adds	r7, #40	@ 0x28
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40004400 	.word	0x40004400
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40020000 	.word	0x40020000

08000c48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08e      	sub	sp, #56	@ 0x38
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c54:	2300      	movs	r3, #0
 8000c56:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	4b33      	ldr	r3, [pc, #204]	@ (8000d2c <HAL_InitTick+0xe4>)
 8000c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c60:	4a32      	ldr	r2, [pc, #200]	@ (8000d2c <HAL_InitTick+0xe4>)
 8000c62:	f043 0304 	orr.w	r3, r3, #4
 8000c66:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c68:	4b30      	ldr	r3, [pc, #192]	@ (8000d2c <HAL_InitTick+0xe4>)
 8000c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6c:	f003 0304 	and.w	r3, r3, #4
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c74:	f107 0210 	add.w	r2, r7, #16
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	4611      	mov	r1, r2
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f001 fc1a 	bl	80024b8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c84:	6a3b      	ldr	r3, [r7, #32]
 8000c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d103      	bne.n	8000c96 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c8e:	f001 fbeb 	bl	8002468 <HAL_RCC_GetPCLK1Freq>
 8000c92:	6378      	str	r0, [r7, #52]	@ 0x34
 8000c94:	e004      	b.n	8000ca0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c96:	f001 fbe7 	bl	8002468 <HAL_RCC_GetPCLK1Freq>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ca2:	4a23      	ldr	r2, [pc, #140]	@ (8000d30 <HAL_InitTick+0xe8>)
 8000ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ca8:	0c9b      	lsrs	r3, r3, #18
 8000caa:	3b01      	subs	r3, #1
 8000cac:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000cae:	4b21      	ldr	r3, [pc, #132]	@ (8000d34 <HAL_InitTick+0xec>)
 8000cb0:	4a21      	ldr	r2, [pc, #132]	@ (8000d38 <HAL_InitTick+0xf0>)
 8000cb2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000cb4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d34 <HAL_InitTick+0xec>)
 8000cb6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000cba:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000cbc:	4a1d      	ldr	r2, [pc, #116]	@ (8000d34 <HAL_InitTick+0xec>)
 8000cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cc0:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000cc2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d34 <HAL_InitTick+0xec>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d34 <HAL_InitTick+0xec>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cce:	4b19      	ldr	r3, [pc, #100]	@ (8000d34 <HAL_InitTick+0xec>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000cd4:	4817      	ldr	r0, [pc, #92]	@ (8000d34 <HAL_InitTick+0xec>)
 8000cd6:	f001 fc21 	bl	800251c <HAL_TIM_Base_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000ce0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d11b      	bne.n	8000d20 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000ce8:	4812      	ldr	r0, [pc, #72]	@ (8000d34 <HAL_InitTick+0xec>)
 8000cea:	f001 fc71 	bl	80025d0 <HAL_TIM_Base_Start_IT>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000cf4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d111      	bne.n	8000d20 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000cfc:	201e      	movs	r0, #30
 8000cfe:	f000 fdbf 	bl	8001880 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2b0f      	cmp	r3, #15
 8000d06:	d808      	bhi.n	8000d1a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	6879      	ldr	r1, [r7, #4]
 8000d0c:	201e      	movs	r0, #30
 8000d0e:	f000 fd9b 	bl	8001848 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d12:	4a0a      	ldr	r2, [pc, #40]	@ (8000d3c <HAL_InitTick+0xf4>)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6013      	str	r3, [r2, #0]
 8000d18:	e002      	b.n	8000d20 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d20:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3738      	adds	r7, #56	@ 0x38
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	431bde83 	.word	0x431bde83
 8000d34:	2000012c 	.word	0x2000012c
 8000d38:	40000800 	.word	0x40000800
 8000d3c:	20000004 	.word	0x20000004

08000d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <NMI_Handler+0x4>

08000d48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d4c:	bf00      	nop
 8000d4e:	e7fd      	b.n	8000d4c <HardFault_Handler+0x4>

08000d50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <MemManage_Handler+0x4>

08000d58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d5c:	bf00      	nop
 8000d5e:	e7fd      	b.n	8000d5c <BusFault_Handler+0x4>

08000d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <UsageFault_Handler+0x4>

08000d68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
	...

08000d78 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000d7c:	4802      	ldr	r0, [pc, #8]	@ (8000d88 <TIM4_IRQHandler+0x10>)
 8000d7e:	f001 fc89 	bl	8002694 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	2000012c 	.word	0x2000012c

08000d8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d94:	4a14      	ldr	r2, [pc, #80]	@ (8000de8 <_sbrk+0x5c>)
 8000d96:	4b15      	ldr	r3, [pc, #84]	@ (8000dec <_sbrk+0x60>)
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000da0:	4b13      	ldr	r3, [pc, #76]	@ (8000df0 <_sbrk+0x64>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d102      	bne.n	8000dae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da8:	4b11      	ldr	r3, [pc, #68]	@ (8000df0 <_sbrk+0x64>)
 8000daa:	4a12      	ldr	r2, [pc, #72]	@ (8000df4 <_sbrk+0x68>)
 8000dac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dae:	4b10      	ldr	r3, [pc, #64]	@ (8000df0 <_sbrk+0x64>)
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4413      	add	r3, r2
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d207      	bcs.n	8000dcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dbc:	f005 f932 	bl	8006024 <__errno>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	220c      	movs	r2, #12
 8000dc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dca:	e009      	b.n	8000de0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dcc:	4b08      	ldr	r3, [pc, #32]	@ (8000df0 <_sbrk+0x64>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dd2:	4b07      	ldr	r3, [pc, #28]	@ (8000df0 <_sbrk+0x64>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4413      	add	r3, r2
 8000dda:	4a05      	ldr	r2, [pc, #20]	@ (8000df0 <_sbrk+0x64>)
 8000ddc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dde:	68fb      	ldr	r3, [r7, #12]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3718      	adds	r7, #24
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20020000 	.word	0x20020000
 8000dec:	00000400 	.word	0x00000400
 8000df0:	20000174 	.word	0x20000174
 8000df4:	20004cb0 	.word	0x20004cb0

08000df8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dfc:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <SystemInit+0x20>)
 8000dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e02:	4a05      	ldr	r2, [pc, #20]	@ (8000e18 <SystemInit+0x20>)
 8000e04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e54 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e20:	f7ff ffea 	bl	8000df8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e24:	480c      	ldr	r0, [pc, #48]	@ (8000e58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e26:	490d      	ldr	r1, [pc, #52]	@ (8000e5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e28:	4a0d      	ldr	r2, [pc, #52]	@ (8000e60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e2c:	e002      	b.n	8000e34 <LoopCopyDataInit>

08000e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e32:	3304      	adds	r3, #4

08000e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e38:	d3f9      	bcc.n	8000e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e3c:	4c0a      	ldr	r4, [pc, #40]	@ (8000e68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e40:	e001      	b.n	8000e46 <LoopFillZerobss>

08000e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e44:	3204      	adds	r2, #4

08000e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e48:	d3fb      	bcc.n	8000e42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e4a:	f005 f8f1 	bl	8006030 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e4e:	f7ff fbe5 	bl	800061c <main>
  bx  lr    
 8000e52:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e5c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000e60:	08006ac4 	.word	0x08006ac4
  ldr r2, =_sbss
 8000e64:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000e68:	20004cac 	.word	0x20004cac

08000e6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e6c:	e7fe      	b.n	8000e6c <ADC_IRQHandler>
	...

08000e70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e74:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb0 <HAL_Init+0x40>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a0d      	ldr	r2, [pc, #52]	@ (8000eb0 <HAL_Init+0x40>)
 8000e7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e80:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb0 <HAL_Init+0x40>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb0 <HAL_Init+0x40>)
 8000e86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e8c:	4b08      	ldr	r3, [pc, #32]	@ (8000eb0 <HAL_Init+0x40>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a07      	ldr	r2, [pc, #28]	@ (8000eb0 <HAL_Init+0x40>)
 8000e92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e98:	2003      	movs	r0, #3
 8000e9a:	f000 fcca 	bl	8001832 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e9e:	200f      	movs	r0, #15
 8000ea0:	f7ff fed2 	bl	8000c48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea4:	f7ff fe18 	bl	8000ad8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40023c00 	.word	0x40023c00

08000eb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	@ (8000ed4 <HAL_IncTick+0x20>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4b06      	ldr	r3, [pc, #24]	@ (8000ed8 <HAL_IncTick+0x24>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	4a04      	ldr	r2, [pc, #16]	@ (8000ed8 <HAL_IncTick+0x24>)
 8000ec6:	6013      	str	r3, [r2, #0]
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	20000008 	.word	0x20000008
 8000ed8:	20000178 	.word	0x20000178

08000edc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee0:	4b03      	ldr	r3, [pc, #12]	@ (8000ef0 <HAL_GetTick+0x14>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	20000178 	.word	0x20000178

08000ef4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000efc:	2300      	movs	r3, #0
 8000efe:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d101      	bne.n	8000f0a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e033      	b.n	8000f72 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d109      	bne.n	8000f26 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f7ff fe0c 	bl	8000b30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2200      	movs	r2, #0
 8000f22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2a:	f003 0310 	and.w	r3, r3, #16
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d118      	bne.n	8000f64 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f36:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000f3a:	f023 0302 	bic.w	r3, r3, #2
 8000f3e:	f043 0202 	orr.w	r2, r3, #2
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f000 faca 	bl	80014e0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f56:	f023 0303 	bic.w	r3, r3, #3
 8000f5a:	f043 0201 	orr.w	r2, r3, #1
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f62:	e001      	b.n	8000f68 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000f84:	2300      	movs	r3, #0
 8000f86:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d101      	bne.n	8000f96 <HAL_ADC_Start+0x1a>
 8000f92:	2302      	movs	r3, #2
 8000f94:	e097      	b.n	80010c6 <HAL_ADC_Start+0x14a>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2201      	movs	r2, #1
 8000f9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	f003 0301 	and.w	r3, r3, #1
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d018      	beq.n	8000fde <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	689a      	ldr	r2, [r3, #8]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f042 0201 	orr.w	r2, r2, #1
 8000fba:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000fbc:	4b45      	ldr	r3, [pc, #276]	@ (80010d4 <HAL_ADC_Start+0x158>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a45      	ldr	r2, [pc, #276]	@ (80010d8 <HAL_ADC_Start+0x15c>)
 8000fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc6:	0c9a      	lsrs	r2, r3, #18
 8000fc8:	4613      	mov	r3, r2
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	4413      	add	r3, r2
 8000fce:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000fd0:	e002      	b.n	8000fd8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	3b01      	subs	r3, #1
 8000fd6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d1f9      	bne.n	8000fd2 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	f003 0301 	and.w	r3, r3, #1
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d15f      	bne.n	80010ac <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000ff4:	f023 0301 	bic.w	r3, r3, #1
 8000ff8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800100a:	2b00      	cmp	r3, #0
 800100c:	d007      	beq.n	800101e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001012:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001016:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001022:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001026:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800102a:	d106      	bne.n	800103a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001030:	f023 0206 	bic.w	r2, r3, #6
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	645a      	str	r2, [r3, #68]	@ 0x44
 8001038:	e002      	b.n	8001040 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2200      	movs	r2, #0
 8001044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001048:	4b24      	ldr	r3, [pc, #144]	@ (80010dc <HAL_ADC_Start+0x160>)
 800104a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001054:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f003 031f 	and.w	r3, r3, #31
 800105e:	2b00      	cmp	r3, #0
 8001060:	d10f      	bne.n	8001082 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d129      	bne.n	80010c4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	689a      	ldr	r2, [r3, #8]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	e020      	b.n	80010c4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a16      	ldr	r2, [pc, #88]	@ (80010e0 <HAL_ADC_Start+0x164>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d11b      	bne.n	80010c4 <HAL_ADC_Start+0x148>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d114      	bne.n	80010c4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	689a      	ldr	r2, [r3, #8]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	e00b      	b.n	80010c4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b0:	f043 0210 	orr.w	r2, r3, #16
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010bc:	f043 0201 	orr.w	r2, r3, #1
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3714      	adds	r7, #20
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	20000000 	.word	0x20000000
 80010d8:	431bde83 	.word	0x431bde83
 80010dc:	40012300 	.word	0x40012300
 80010e0:	40012000 	.word	0x40012000

080010e4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d101      	bne.n	80010fa <HAL_ADC_Stop+0x16>
 80010f6:	2302      	movs	r3, #2
 80010f8:	e021      	b.n	800113e <HAL_ADC_Stop+0x5a>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2201      	movs	r2, #1
 80010fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	689a      	ldr	r2, [r3, #8]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f022 0201 	bic.w	r2, r2, #1
 8001110:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	2b00      	cmp	r3, #0
 800111e:	d109      	bne.n	8001134 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001124:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001128:	f023 0301 	bic.w	r3, r3, #1
 800112c:	f043 0201 	orr.w	r2, r3, #1
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b084      	sub	sp, #16
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
 8001152:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001154:	2300      	movs	r3, #0
 8001156:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001162:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001166:	d113      	bne.n	8001190 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001172:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001176:	d10b      	bne.n	8001190 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117c:	f043 0220 	orr.w	r2, r3, #32
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e063      	b.n	8001258 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001190:	f7ff fea4 	bl	8000edc <HAL_GetTick>
 8001194:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001196:	e021      	b.n	80011dc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800119e:	d01d      	beq.n	80011dc <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d007      	beq.n	80011b6 <HAL_ADC_PollForConversion+0x6c>
 80011a6:	f7ff fe99 	bl	8000edc <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	683a      	ldr	r2, [r7, #0]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d212      	bcs.n	80011dc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0302 	and.w	r3, r3, #2
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d00b      	beq.n	80011dc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c8:	f043 0204 	orr.w	r2, r3, #4
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80011d8:	2303      	movs	r3, #3
 80011da:	e03d      	b.n	8001258 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d1d6      	bne.n	8001198 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f06f 0212 	mvn.w	r2, #18
 80011f2:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d123      	bne.n	8001256 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001212:	2b00      	cmp	r3, #0
 8001214:	d11f      	bne.n	8001256 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800121c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001220:	2b00      	cmp	r3, #0
 8001222:	d006      	beq.n	8001232 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800122e:	2b00      	cmp	r3, #0
 8001230:	d111      	bne.n	8001256 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001236:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001242:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d105      	bne.n	8001256 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800124e:	f043 0201 	orr.w	r2, r3, #1
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001256:	2300      	movs	r3, #0
}
 8001258:	4618      	mov	r0, r3
 800125a:	3710      	adds	r7, #16
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800126e:	4618      	mov	r0, r3
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
	...

0800127c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001286:	2300      	movs	r3, #0
 8001288:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001290:	2b01      	cmp	r3, #1
 8001292:	d101      	bne.n	8001298 <HAL_ADC_ConfigChannel+0x1c>
 8001294:	2302      	movs	r3, #2
 8001296:	e113      	b.n	80014c0 <HAL_ADC_ConfigChannel+0x244>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2201      	movs	r2, #1
 800129c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b09      	cmp	r3, #9
 80012a6:	d925      	bls.n	80012f4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	68d9      	ldr	r1, [r3, #12]
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	461a      	mov	r2, r3
 80012b6:	4613      	mov	r3, r2
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	4413      	add	r3, r2
 80012bc:	3b1e      	subs	r3, #30
 80012be:	2207      	movs	r2, #7
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43da      	mvns	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	400a      	ands	r2, r1
 80012cc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	68d9      	ldr	r1, [r3, #12]
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	689a      	ldr	r2, [r3, #8]
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	b29b      	uxth	r3, r3
 80012de:	4618      	mov	r0, r3
 80012e0:	4603      	mov	r3, r0
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	4403      	add	r3, r0
 80012e6:	3b1e      	subs	r3, #30
 80012e8:	409a      	lsls	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	430a      	orrs	r2, r1
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	e022      	b.n	800133a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6919      	ldr	r1, [r3, #16]
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	b29b      	uxth	r3, r3
 8001300:	461a      	mov	r2, r3
 8001302:	4613      	mov	r3, r2
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	4413      	add	r3, r2
 8001308:	2207      	movs	r2, #7
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43da      	mvns	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	400a      	ands	r2, r1
 8001316:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6919      	ldr	r1, [r3, #16]
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	689a      	ldr	r2, [r3, #8]
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	b29b      	uxth	r3, r3
 8001328:	4618      	mov	r0, r3
 800132a:	4603      	mov	r3, r0
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	4403      	add	r3, r0
 8001330:	409a      	lsls	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	430a      	orrs	r2, r1
 8001338:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	2b06      	cmp	r3, #6
 8001340:	d824      	bhi.n	800138c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685a      	ldr	r2, [r3, #4]
 800134c:	4613      	mov	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4413      	add	r3, r2
 8001352:	3b05      	subs	r3, #5
 8001354:	221f      	movs	r2, #31
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43da      	mvns	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	400a      	ands	r2, r1
 8001362:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	b29b      	uxth	r3, r3
 8001370:	4618      	mov	r0, r3
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685a      	ldr	r2, [r3, #4]
 8001376:	4613      	mov	r3, r2
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	4413      	add	r3, r2
 800137c:	3b05      	subs	r3, #5
 800137e:	fa00 f203 	lsl.w	r2, r0, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	430a      	orrs	r2, r1
 8001388:	635a      	str	r2, [r3, #52]	@ 0x34
 800138a:	e04c      	b.n	8001426 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b0c      	cmp	r3, #12
 8001392:	d824      	bhi.n	80013de <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685a      	ldr	r2, [r3, #4]
 800139e:	4613      	mov	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	3b23      	subs	r3, #35	@ 0x23
 80013a6:	221f      	movs	r2, #31
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	43da      	mvns	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	400a      	ands	r2, r1
 80013b4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	4618      	mov	r0, r3
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685a      	ldr	r2, [r3, #4]
 80013c8:	4613      	mov	r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	4413      	add	r3, r2
 80013ce:	3b23      	subs	r3, #35	@ 0x23
 80013d0:	fa00 f203 	lsl.w	r2, r0, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	430a      	orrs	r2, r1
 80013da:	631a      	str	r2, [r3, #48]	@ 0x30
 80013dc:	e023      	b.n	8001426 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685a      	ldr	r2, [r3, #4]
 80013e8:	4613      	mov	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	4413      	add	r3, r2
 80013ee:	3b41      	subs	r3, #65	@ 0x41
 80013f0:	221f      	movs	r2, #31
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43da      	mvns	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	400a      	ands	r2, r1
 80013fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	b29b      	uxth	r3, r3
 800140c:	4618      	mov	r0, r3
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	4613      	mov	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4413      	add	r3, r2
 8001418:	3b41      	subs	r3, #65	@ 0x41
 800141a:	fa00 f203 	lsl.w	r2, r0, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	430a      	orrs	r2, r1
 8001424:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001426:	4b29      	ldr	r3, [pc, #164]	@ (80014cc <HAL_ADC_ConfigChannel+0x250>)
 8001428:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a28      	ldr	r2, [pc, #160]	@ (80014d0 <HAL_ADC_ConfigChannel+0x254>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d10f      	bne.n	8001454 <HAL_ADC_ConfigChannel+0x1d8>
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b12      	cmp	r3, #18
 800143a:	d10b      	bne.n	8001454 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a1d      	ldr	r2, [pc, #116]	@ (80014d0 <HAL_ADC_ConfigChannel+0x254>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d12b      	bne.n	80014b6 <HAL_ADC_ConfigChannel+0x23a>
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a1c      	ldr	r2, [pc, #112]	@ (80014d4 <HAL_ADC_ConfigChannel+0x258>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d003      	beq.n	8001470 <HAL_ADC_ConfigChannel+0x1f4>
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b11      	cmp	r3, #17
 800146e:	d122      	bne.n	80014b6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a11      	ldr	r2, [pc, #68]	@ (80014d4 <HAL_ADC_ConfigChannel+0x258>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d111      	bne.n	80014b6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001492:	4b11      	ldr	r3, [pc, #68]	@ (80014d8 <HAL_ADC_ConfigChannel+0x25c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a11      	ldr	r2, [pc, #68]	@ (80014dc <HAL_ADC_ConfigChannel+0x260>)
 8001498:	fba2 2303 	umull	r2, r3, r2, r3
 800149c:	0c9a      	lsrs	r2, r3, #18
 800149e:	4613      	mov	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80014a8:	e002      	b.n	80014b0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	3b01      	subs	r3, #1
 80014ae:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1f9      	bne.n	80014aa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80014be:	2300      	movs	r3, #0
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	40012300 	.word	0x40012300
 80014d0:	40012000 	.word	0x40012000
 80014d4:	10000012 	.word	0x10000012
 80014d8:	20000000 	.word	0x20000000
 80014dc:	431bde83 	.word	0x431bde83

080014e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014e8:	4b79      	ldr	r3, [pc, #484]	@ (80016d0 <ADC_Init+0x1f0>)
 80014ea:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	685a      	ldr	r2, [r3, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	431a      	orrs	r2, r3
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001514:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6859      	ldr	r1, [r3, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	021a      	lsls	r2, r3, #8
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	430a      	orrs	r2, r1
 8001528:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	685a      	ldr	r2, [r3, #4]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001538:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	6859      	ldr	r1, [r3, #4]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689a      	ldr	r2, [r3, #8]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	430a      	orrs	r2, r1
 800154a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	689a      	ldr	r2, [r3, #8]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800155a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6899      	ldr	r1, [r3, #8]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	68da      	ldr	r2, [r3, #12]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	430a      	orrs	r2, r1
 800156c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001572:	4a58      	ldr	r2, [pc, #352]	@ (80016d4 <ADC_Init+0x1f4>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d022      	beq.n	80015be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	689a      	ldr	r2, [r3, #8]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001586:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6899      	ldr	r1, [r3, #8]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	430a      	orrs	r2, r1
 8001598:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80015a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6899      	ldr	r1, [r3, #8]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	430a      	orrs	r2, r1
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	e00f      	b.n	80015de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	689a      	ldr	r2, [r3, #8]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80015cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	689a      	ldr	r2, [r3, #8]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80015dc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	689a      	ldr	r2, [r3, #8]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f022 0202 	bic.w	r2, r2, #2
 80015ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	6899      	ldr	r1, [r3, #8]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	7e1b      	ldrb	r3, [r3, #24]
 80015f8:	005a      	lsls	r2, r3, #1
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	430a      	orrs	r2, r1
 8001600:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d01b      	beq.n	8001644 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	685a      	ldr	r2, [r3, #4]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800161a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	685a      	ldr	r2, [r3, #4]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800162a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6859      	ldr	r1, [r3, #4]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001636:	3b01      	subs	r3, #1
 8001638:	035a      	lsls	r2, r3, #13
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	430a      	orrs	r2, r1
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	e007      	b.n	8001654 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001652:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001662:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	3b01      	subs	r3, #1
 8001670:	051a      	lsls	r2, r3, #20
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	430a      	orrs	r2, r1
 8001678:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001688:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6899      	ldr	r1, [r3, #8]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001696:	025a      	lsls	r2, r3, #9
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	430a      	orrs	r2, r1
 800169e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	689a      	ldr	r2, [r3, #8]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80016ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6899      	ldr	r1, [r3, #8]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	029a      	lsls	r2, r3, #10
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	430a      	orrs	r2, r1
 80016c2:	609a      	str	r2, [r3, #8]
}
 80016c4:	bf00      	nop
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	40012300 	.word	0x40012300
 80016d4:	0f000001 	.word	0x0f000001

080016d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e8:	4b0c      	ldr	r3, [pc, #48]	@ (800171c <__NVIC_SetPriorityGrouping+0x44>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ee:	68ba      	ldr	r2, [r7, #8]
 80016f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016f4:	4013      	ands	r3, r2
 80016f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001700:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001704:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001708:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800170a:	4a04      	ldr	r2, [pc, #16]	@ (800171c <__NVIC_SetPriorityGrouping+0x44>)
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	60d3      	str	r3, [r2, #12]
}
 8001710:	bf00      	nop
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	e000ed00 	.word	0xe000ed00

08001720 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001724:	4b04      	ldr	r3, [pc, #16]	@ (8001738 <__NVIC_GetPriorityGrouping+0x18>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	0a1b      	lsrs	r3, r3, #8
 800172a:	f003 0307 	and.w	r3, r3, #7
}
 800172e:	4618      	mov	r0, r3
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174a:	2b00      	cmp	r3, #0
 800174c:	db0b      	blt.n	8001766 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	f003 021f 	and.w	r2, r3, #31
 8001754:	4907      	ldr	r1, [pc, #28]	@ (8001774 <__NVIC_EnableIRQ+0x38>)
 8001756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175a:	095b      	lsrs	r3, r3, #5
 800175c:	2001      	movs	r0, #1
 800175e:	fa00 f202 	lsl.w	r2, r0, r2
 8001762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	e000e100 	.word	0xe000e100

08001778 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	6039      	str	r1, [r7, #0]
 8001782:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001788:	2b00      	cmp	r3, #0
 800178a:	db0a      	blt.n	80017a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	b2da      	uxtb	r2, r3
 8001790:	490c      	ldr	r1, [pc, #48]	@ (80017c4 <__NVIC_SetPriority+0x4c>)
 8001792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001796:	0112      	lsls	r2, r2, #4
 8001798:	b2d2      	uxtb	r2, r2
 800179a:	440b      	add	r3, r1
 800179c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a0:	e00a      	b.n	80017b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	4908      	ldr	r1, [pc, #32]	@ (80017c8 <__NVIC_SetPriority+0x50>)
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	f003 030f 	and.w	r3, r3, #15
 80017ae:	3b04      	subs	r3, #4
 80017b0:	0112      	lsls	r2, r2, #4
 80017b2:	b2d2      	uxtb	r2, r2
 80017b4:	440b      	add	r3, r1
 80017b6:	761a      	strb	r2, [r3, #24]
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	e000e100 	.word	0xe000e100
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b089      	sub	sp, #36	@ 0x24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	f1c3 0307 	rsb	r3, r3, #7
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	bf28      	it	cs
 80017ea:	2304      	movcs	r3, #4
 80017ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	3304      	adds	r3, #4
 80017f2:	2b06      	cmp	r3, #6
 80017f4:	d902      	bls.n	80017fc <NVIC_EncodePriority+0x30>
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	3b03      	subs	r3, #3
 80017fa:	e000      	b.n	80017fe <NVIC_EncodePriority+0x32>
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001800:	f04f 32ff 	mov.w	r2, #4294967295
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43da      	mvns	r2, r3
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	401a      	ands	r2, r3
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001814:	f04f 31ff 	mov.w	r1, #4294967295
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	fa01 f303 	lsl.w	r3, r1, r3
 800181e:	43d9      	mvns	r1, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001824:	4313      	orrs	r3, r2
         );
}
 8001826:	4618      	mov	r0, r3
 8001828:	3724      	adds	r7, #36	@ 0x24
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f7ff ff4c 	bl	80016d8 <__NVIC_SetPriorityGrouping>
}
 8001840:	bf00      	nop
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
 8001854:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001856:	2300      	movs	r3, #0
 8001858:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800185a:	f7ff ff61 	bl	8001720 <__NVIC_GetPriorityGrouping>
 800185e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	68b9      	ldr	r1, [r7, #8]
 8001864:	6978      	ldr	r0, [r7, #20]
 8001866:	f7ff ffb1 	bl	80017cc <NVIC_EncodePriority>
 800186a:	4602      	mov	r2, r0
 800186c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001870:	4611      	mov	r1, r2
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff ff80 	bl	8001778 <__NVIC_SetPriority>
}
 8001878:	bf00      	nop
 800187a:	3718      	adds	r7, #24
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800188a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff ff54 	bl	800173c <__NVIC_EnableIRQ>
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800189c:	b480      	push	{r7}
 800189e:	b089      	sub	sp, #36	@ 0x24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018a6:	2300      	movs	r3, #0
 80018a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018aa:	2300      	movs	r3, #0
 80018ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018ae:	2300      	movs	r3, #0
 80018b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018b2:	2300      	movs	r3, #0
 80018b4:	61fb      	str	r3, [r7, #28]
 80018b6:	e159      	b.n	8001b6c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018b8:	2201      	movs	r2, #1
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	4013      	ands	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	f040 8148 	bne.w	8001b66 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f003 0303 	and.w	r3, r3, #3
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d005      	beq.n	80018ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d130      	bne.n	8001950 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	2203      	movs	r2, #3
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43db      	mvns	r3, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4013      	ands	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	68da      	ldr	r2, [r3, #12]
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	4313      	orrs	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001924:	2201      	movs	r2, #1
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	43db      	mvns	r3, r3
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4013      	ands	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	091b      	lsrs	r3, r3, #4
 800193a:	f003 0201 	and.w	r2, r3, #1
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4313      	orrs	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 0303 	and.w	r3, r3, #3
 8001958:	2b03      	cmp	r3, #3
 800195a:	d017      	beq.n	800198c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	2203      	movs	r2, #3
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4013      	ands	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	689a      	ldr	r2, [r3, #8]
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	4313      	orrs	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 0303 	and.w	r3, r3, #3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d123      	bne.n	80019e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	08da      	lsrs	r2, r3, #3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3208      	adds	r2, #8
 80019a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	f003 0307 	and.w	r3, r3, #7
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	220f      	movs	r2, #15
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4013      	ands	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	691a      	ldr	r2, [r3, #16]
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	08da      	lsrs	r2, r3, #3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	3208      	adds	r2, #8
 80019da:	69b9      	ldr	r1, [r7, #24]
 80019dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	2203      	movs	r2, #3
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	43db      	mvns	r3, r3
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4013      	ands	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f003 0203 	and.w	r2, r3, #3
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f000 80a2 	beq.w	8001b66 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	4b57      	ldr	r3, [pc, #348]	@ (8001b84 <HAL_GPIO_Init+0x2e8>)
 8001a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a2a:	4a56      	ldr	r2, [pc, #344]	@ (8001b84 <HAL_GPIO_Init+0x2e8>)
 8001a2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a30:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a32:	4b54      	ldr	r3, [pc, #336]	@ (8001b84 <HAL_GPIO_Init+0x2e8>)
 8001a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a3e:	4a52      	ldr	r2, [pc, #328]	@ (8001b88 <HAL_GPIO_Init+0x2ec>)
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	089b      	lsrs	r3, r3, #2
 8001a44:	3302      	adds	r3, #2
 8001a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	f003 0303 	and.w	r3, r3, #3
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	220f      	movs	r2, #15
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a49      	ldr	r2, [pc, #292]	@ (8001b8c <HAL_GPIO_Init+0x2f0>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d019      	beq.n	8001a9e <HAL_GPIO_Init+0x202>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a48      	ldr	r2, [pc, #288]	@ (8001b90 <HAL_GPIO_Init+0x2f4>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d013      	beq.n	8001a9a <HAL_GPIO_Init+0x1fe>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a47      	ldr	r2, [pc, #284]	@ (8001b94 <HAL_GPIO_Init+0x2f8>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d00d      	beq.n	8001a96 <HAL_GPIO_Init+0x1fa>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a46      	ldr	r2, [pc, #280]	@ (8001b98 <HAL_GPIO_Init+0x2fc>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d007      	beq.n	8001a92 <HAL_GPIO_Init+0x1f6>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a45      	ldr	r2, [pc, #276]	@ (8001b9c <HAL_GPIO_Init+0x300>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d101      	bne.n	8001a8e <HAL_GPIO_Init+0x1f2>
 8001a8a:	2304      	movs	r3, #4
 8001a8c:	e008      	b.n	8001aa0 <HAL_GPIO_Init+0x204>
 8001a8e:	2307      	movs	r3, #7
 8001a90:	e006      	b.n	8001aa0 <HAL_GPIO_Init+0x204>
 8001a92:	2303      	movs	r3, #3
 8001a94:	e004      	b.n	8001aa0 <HAL_GPIO_Init+0x204>
 8001a96:	2302      	movs	r3, #2
 8001a98:	e002      	b.n	8001aa0 <HAL_GPIO_Init+0x204>
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e000      	b.n	8001aa0 <HAL_GPIO_Init+0x204>
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	69fa      	ldr	r2, [r7, #28]
 8001aa2:	f002 0203 	and.w	r2, r2, #3
 8001aa6:	0092      	lsls	r2, r2, #2
 8001aa8:	4093      	lsls	r3, r2
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ab0:	4935      	ldr	r1, [pc, #212]	@ (8001b88 <HAL_GPIO_Init+0x2ec>)
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	089b      	lsrs	r3, r3, #2
 8001ab6:	3302      	adds	r3, #2
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001abe:	4b38      	ldr	r3, [pc, #224]	@ (8001ba0 <HAL_GPIO_Init+0x304>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	4013      	ands	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ae2:	4a2f      	ldr	r2, [pc, #188]	@ (8001ba0 <HAL_GPIO_Init+0x304>)
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ae8:	4b2d      	ldr	r3, [pc, #180]	@ (8001ba0 <HAL_GPIO_Init+0x304>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	43db      	mvns	r3, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4013      	ands	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d003      	beq.n	8001b0c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b0c:	4a24      	ldr	r2, [pc, #144]	@ (8001ba0 <HAL_GPIO_Init+0x304>)
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b12:	4b23      	ldr	r3, [pc, #140]	@ (8001ba0 <HAL_GPIO_Init+0x304>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b36:	4a1a      	ldr	r2, [pc, #104]	@ (8001ba0 <HAL_GPIO_Init+0x304>)
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b3c:	4b18      	ldr	r3, [pc, #96]	@ (8001ba0 <HAL_GPIO_Init+0x304>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	43db      	mvns	r3, r3
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d003      	beq.n	8001b60 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b60:	4a0f      	ldr	r2, [pc, #60]	@ (8001ba0 <HAL_GPIO_Init+0x304>)
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	61fb      	str	r3, [r7, #28]
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	2b0f      	cmp	r3, #15
 8001b70:	f67f aea2 	bls.w	80018b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b74:	bf00      	nop
 8001b76:	bf00      	nop
 8001b78:	3724      	adds	r7, #36	@ 0x24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	40023800 	.word	0x40023800
 8001b88:	40013800 	.word	0x40013800
 8001b8c:	40020000 	.word	0x40020000
 8001b90:	40020400 	.word	0x40020400
 8001b94:	40020800 	.word	0x40020800
 8001b98:	40020c00 	.word	0x40020c00
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	40013c00 	.word	0x40013c00

08001ba4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	460b      	mov	r3, r1
 8001bae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	691a      	ldr	r2, [r3, #16]
 8001bb4:	887b      	ldrh	r3, [r7, #2]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d002      	beq.n	8001bc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	73fb      	strb	r3, [r7, #15]
 8001bc0:	e001      	b.n	8001bc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	807b      	strh	r3, [r7, #2]
 8001be0:	4613      	mov	r3, r2
 8001be2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001be4:	787b      	ldrb	r3, [r7, #1]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bea:	887a      	ldrh	r2, [r7, #2]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bf0:	e003      	b.n	8001bfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bf2:	887b      	ldrh	r3, [r7, #2]
 8001bf4:	041a      	lsls	r2, r3, #16
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	619a      	str	r2, [r3, #24]
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
	...

08001c08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e267      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d075      	beq.n	8001d12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001c26:	4b88      	ldr	r3, [pc, #544]	@ (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 030c 	and.w	r3, r3, #12
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	d00c      	beq.n	8001c4c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c32:	4b85      	ldr	r3, [pc, #532]	@ (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001c3a:	2b08      	cmp	r3, #8
 8001c3c:	d112      	bne.n	8001c64 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c3e:	4b82      	ldr	r3, [pc, #520]	@ (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c4a:	d10b      	bne.n	8001c64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c4c:	4b7e      	ldr	r3, [pc, #504]	@ (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d05b      	beq.n	8001d10 <HAL_RCC_OscConfig+0x108>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d157      	bne.n	8001d10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e242      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c6c:	d106      	bne.n	8001c7c <HAL_RCC_OscConfig+0x74>
 8001c6e:	4b76      	ldr	r3, [pc, #472]	@ (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a75      	ldr	r2, [pc, #468]	@ (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001c74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	e01d      	b.n	8001cb8 <HAL_RCC_OscConfig+0xb0>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c84:	d10c      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x98>
 8001c86:	4b70      	ldr	r3, [pc, #448]	@ (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a6f      	ldr	r2, [pc, #444]	@ (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001c8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	4b6d      	ldr	r3, [pc, #436]	@ (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a6c      	ldr	r2, [pc, #432]	@ (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001c98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	e00b      	b.n	8001cb8 <HAL_RCC_OscConfig+0xb0>
 8001ca0:	4b69      	ldr	r3, [pc, #420]	@ (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a68      	ldr	r2, [pc, #416]	@ (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001ca6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001caa:	6013      	str	r3, [r2, #0]
 8001cac:	4b66      	ldr	r3, [pc, #408]	@ (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a65      	ldr	r2, [pc, #404]	@ (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001cb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d013      	beq.n	8001ce8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc0:	f7ff f90c 	bl	8000edc <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc8:	f7ff f908 	bl	8000edc <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b64      	cmp	r3, #100	@ 0x64
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e207      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cda:	4b5b      	ldr	r3, [pc, #364]	@ (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0f0      	beq.n	8001cc8 <HAL_RCC_OscConfig+0xc0>
 8001ce6:	e014      	b.n	8001d12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce8:	f7ff f8f8 	bl	8000edc <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cf0:	f7ff f8f4 	bl	8000edc <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b64      	cmp	r3, #100	@ 0x64
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e1f3      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d02:	4b51      	ldr	r3, [pc, #324]	@ (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f0      	bne.n	8001cf0 <HAL_RCC_OscConfig+0xe8>
 8001d0e:	e000      	b.n	8001d12 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d063      	beq.n	8001de6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001d1e:	4b4a      	ldr	r3, [pc, #296]	@ (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 030c 	and.w	r3, r3, #12
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00b      	beq.n	8001d42 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d2a:	4b47      	ldr	r3, [pc, #284]	@ (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001d32:	2b08      	cmp	r3, #8
 8001d34:	d11c      	bne.n	8001d70 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d36:	4b44      	ldr	r3, [pc, #272]	@ (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d116      	bne.n	8001d70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d42:	4b41      	ldr	r3, [pc, #260]	@ (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d005      	beq.n	8001d5a <HAL_RCC_OscConfig+0x152>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d001      	beq.n	8001d5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e1c7      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5a:	4b3b      	ldr	r3, [pc, #236]	@ (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	4937      	ldr	r1, [pc, #220]	@ (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d6e:	e03a      	b.n	8001de6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d020      	beq.n	8001dba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d78:	4b34      	ldr	r3, [pc, #208]	@ (8001e4c <HAL_RCC_OscConfig+0x244>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7e:	f7ff f8ad 	bl	8000edc <HAL_GetTick>
 8001d82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d84:	e008      	b.n	8001d98 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d86:	f7ff f8a9 	bl	8000edc <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e1a8      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d98:	4b2b      	ldr	r3, [pc, #172]	@ (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d0f0      	beq.n	8001d86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da4:	4b28      	ldr	r3, [pc, #160]	@ (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	4925      	ldr	r1, [pc, #148]	@ (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	600b      	str	r3, [r1, #0]
 8001db8:	e015      	b.n	8001de6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dba:	4b24      	ldr	r3, [pc, #144]	@ (8001e4c <HAL_RCC_OscConfig+0x244>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc0:	f7ff f88c 	bl	8000edc <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dc8:	f7ff f888 	bl	8000edc <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e187      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dda:	4b1b      	ldr	r3, [pc, #108]	@ (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f0      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0308 	and.w	r3, r3, #8
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d036      	beq.n	8001e60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d016      	beq.n	8001e28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dfa:	4b15      	ldr	r3, [pc, #84]	@ (8001e50 <HAL_RCC_OscConfig+0x248>)
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e00:	f7ff f86c 	bl	8000edc <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e08:	f7ff f868 	bl	8000edc <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e167      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001e1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d0f0      	beq.n	8001e08 <HAL_RCC_OscConfig+0x200>
 8001e26:	e01b      	b.n	8001e60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e28:	4b09      	ldr	r3, [pc, #36]	@ (8001e50 <HAL_RCC_OscConfig+0x248>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e2e:	f7ff f855 	bl	8000edc <HAL_GetTick>
 8001e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e34:	e00e      	b.n	8001e54 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e36:	f7ff f851 	bl	8000edc <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d907      	bls.n	8001e54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e150      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	42470000 	.word	0x42470000
 8001e50:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e54:	4b88      	ldr	r3, [pc, #544]	@ (8002078 <HAL_RCC_OscConfig+0x470>)
 8001e56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d1ea      	bne.n	8001e36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0304 	and.w	r3, r3, #4
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f000 8097 	beq.w	8001f9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e72:	4b81      	ldr	r3, [pc, #516]	@ (8002078 <HAL_RCC_OscConfig+0x470>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10f      	bne.n	8001e9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60bb      	str	r3, [r7, #8]
 8001e82:	4b7d      	ldr	r3, [pc, #500]	@ (8002078 <HAL_RCC_OscConfig+0x470>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e86:	4a7c      	ldr	r2, [pc, #496]	@ (8002078 <HAL_RCC_OscConfig+0x470>)
 8001e88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e8e:	4b7a      	ldr	r3, [pc, #488]	@ (8002078 <HAL_RCC_OscConfig+0x470>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e96:	60bb      	str	r3, [r7, #8]
 8001e98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e9e:	4b77      	ldr	r3, [pc, #476]	@ (800207c <HAL_RCC_OscConfig+0x474>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d118      	bne.n	8001edc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eaa:	4b74      	ldr	r3, [pc, #464]	@ (800207c <HAL_RCC_OscConfig+0x474>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a73      	ldr	r2, [pc, #460]	@ (800207c <HAL_RCC_OscConfig+0x474>)
 8001eb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eb6:	f7ff f811 	bl	8000edc <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ebe:	f7ff f80d 	bl	8000edc <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e10c      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed0:	4b6a      	ldr	r3, [pc, #424]	@ (800207c <HAL_RCC_OscConfig+0x474>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0f0      	beq.n	8001ebe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d106      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x2ea>
 8001ee4:	4b64      	ldr	r3, [pc, #400]	@ (8002078 <HAL_RCC_OscConfig+0x470>)
 8001ee6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ee8:	4a63      	ldr	r2, [pc, #396]	@ (8002078 <HAL_RCC_OscConfig+0x470>)
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ef0:	e01c      	b.n	8001f2c <HAL_RCC_OscConfig+0x324>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	2b05      	cmp	r3, #5
 8001ef8:	d10c      	bne.n	8001f14 <HAL_RCC_OscConfig+0x30c>
 8001efa:	4b5f      	ldr	r3, [pc, #380]	@ (8002078 <HAL_RCC_OscConfig+0x470>)
 8001efc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001efe:	4a5e      	ldr	r2, [pc, #376]	@ (8002078 <HAL_RCC_OscConfig+0x470>)
 8001f00:	f043 0304 	orr.w	r3, r3, #4
 8001f04:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f06:	4b5c      	ldr	r3, [pc, #368]	@ (8002078 <HAL_RCC_OscConfig+0x470>)
 8001f08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f0a:	4a5b      	ldr	r2, [pc, #364]	@ (8002078 <HAL_RCC_OscConfig+0x470>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f12:	e00b      	b.n	8001f2c <HAL_RCC_OscConfig+0x324>
 8001f14:	4b58      	ldr	r3, [pc, #352]	@ (8002078 <HAL_RCC_OscConfig+0x470>)
 8001f16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f18:	4a57      	ldr	r2, [pc, #348]	@ (8002078 <HAL_RCC_OscConfig+0x470>)
 8001f1a:	f023 0301 	bic.w	r3, r3, #1
 8001f1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f20:	4b55      	ldr	r3, [pc, #340]	@ (8002078 <HAL_RCC_OscConfig+0x470>)
 8001f22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f24:	4a54      	ldr	r2, [pc, #336]	@ (8002078 <HAL_RCC_OscConfig+0x470>)
 8001f26:	f023 0304 	bic.w	r3, r3, #4
 8001f2a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d015      	beq.n	8001f60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f34:	f7fe ffd2 	bl	8000edc <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f3a:	e00a      	b.n	8001f52 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f3c:	f7fe ffce 	bl	8000edc <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e0cb      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f52:	4b49      	ldr	r3, [pc, #292]	@ (8002078 <HAL_RCC_OscConfig+0x470>)
 8001f54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0ee      	beq.n	8001f3c <HAL_RCC_OscConfig+0x334>
 8001f5e:	e014      	b.n	8001f8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f60:	f7fe ffbc 	bl	8000edc <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f66:	e00a      	b.n	8001f7e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f68:	f7fe ffb8 	bl	8000edc <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e0b5      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f7e:	4b3e      	ldr	r3, [pc, #248]	@ (8002078 <HAL_RCC_OscConfig+0x470>)
 8001f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1ee      	bne.n	8001f68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f8a:	7dfb      	ldrb	r3, [r7, #23]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d105      	bne.n	8001f9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f90:	4b39      	ldr	r3, [pc, #228]	@ (8002078 <HAL_RCC_OscConfig+0x470>)
 8001f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f94:	4a38      	ldr	r2, [pc, #224]	@ (8002078 <HAL_RCC_OscConfig+0x470>)
 8001f96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f9a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f000 80a1 	beq.w	80020e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fa6:	4b34      	ldr	r3, [pc, #208]	@ (8002078 <HAL_RCC_OscConfig+0x470>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 030c 	and.w	r3, r3, #12
 8001fae:	2b08      	cmp	r3, #8
 8001fb0:	d05c      	beq.n	800206c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d141      	bne.n	800203e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fba:	4b31      	ldr	r3, [pc, #196]	@ (8002080 <HAL_RCC_OscConfig+0x478>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc0:	f7fe ff8c 	bl	8000edc <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc8:	f7fe ff88 	bl	8000edc <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e087      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fda:	4b27      	ldr	r3, [pc, #156]	@ (8002078 <HAL_RCC_OscConfig+0x470>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f0      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69da      	ldr	r2, [r3, #28]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff4:	019b      	lsls	r3, r3, #6
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ffc:	085b      	lsrs	r3, r3, #1
 8001ffe:	3b01      	subs	r3, #1
 8002000:	041b      	lsls	r3, r3, #16
 8002002:	431a      	orrs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002008:	061b      	lsls	r3, r3, #24
 800200a:	491b      	ldr	r1, [pc, #108]	@ (8002078 <HAL_RCC_OscConfig+0x470>)
 800200c:	4313      	orrs	r3, r2
 800200e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002010:	4b1b      	ldr	r3, [pc, #108]	@ (8002080 <HAL_RCC_OscConfig+0x478>)
 8002012:	2201      	movs	r2, #1
 8002014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002016:	f7fe ff61 	bl	8000edc <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800201e:	f7fe ff5d 	bl	8000edc <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e05c      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002030:	4b11      	ldr	r3, [pc, #68]	@ (8002078 <HAL_RCC_OscConfig+0x470>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0f0      	beq.n	800201e <HAL_RCC_OscConfig+0x416>
 800203c:	e054      	b.n	80020e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800203e:	4b10      	ldr	r3, [pc, #64]	@ (8002080 <HAL_RCC_OscConfig+0x478>)
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002044:	f7fe ff4a 	bl	8000edc <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800204c:	f7fe ff46 	bl	8000edc <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e045      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800205e:	4b06      	ldr	r3, [pc, #24]	@ (8002078 <HAL_RCC_OscConfig+0x470>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f0      	bne.n	800204c <HAL_RCC_OscConfig+0x444>
 800206a:	e03d      	b.n	80020e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d107      	bne.n	8002084 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e038      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
 8002078:	40023800 	.word	0x40023800
 800207c:	40007000 	.word	0x40007000
 8002080:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002084:	4b1b      	ldr	r3, [pc, #108]	@ (80020f4 <HAL_RCC_OscConfig+0x4ec>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d028      	beq.n	80020e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800209c:	429a      	cmp	r2, r3
 800209e:	d121      	bne.n	80020e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d11a      	bne.n	80020e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80020b4:	4013      	ands	r3, r2
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80020ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020bc:	4293      	cmp	r3, r2
 80020be:	d111      	bne.n	80020e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ca:	085b      	lsrs	r3, r3, #1
 80020cc:	3b01      	subs	r3, #1
 80020ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d107      	bne.n	80020e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d001      	beq.n	80020e8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e000      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3718      	adds	r7, #24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40023800 	.word	0x40023800

080020f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d101      	bne.n	800210c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e0cc      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800210c:	4b68      	ldr	r3, [pc, #416]	@ (80022b0 <HAL_RCC_ClockConfig+0x1b8>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0307 	and.w	r3, r3, #7
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	429a      	cmp	r2, r3
 8002118:	d90c      	bls.n	8002134 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800211a:	4b65      	ldr	r3, [pc, #404]	@ (80022b0 <HAL_RCC_ClockConfig+0x1b8>)
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	b2d2      	uxtb	r2, r2
 8002120:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002122:	4b63      	ldr	r3, [pc, #396]	@ (80022b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	429a      	cmp	r2, r3
 800212e:	d001      	beq.n	8002134 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e0b8      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d020      	beq.n	8002182 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	2b00      	cmp	r3, #0
 800214a:	d005      	beq.n	8002158 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800214c:	4b59      	ldr	r3, [pc, #356]	@ (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	4a58      	ldr	r2, [pc, #352]	@ (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002152:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002156:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0308 	and.w	r3, r3, #8
 8002160:	2b00      	cmp	r3, #0
 8002162:	d005      	beq.n	8002170 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002164:	4b53      	ldr	r3, [pc, #332]	@ (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	4a52      	ldr	r2, [pc, #328]	@ (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 800216a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800216e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002170:	4b50      	ldr	r3, [pc, #320]	@ (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	494d      	ldr	r1, [pc, #308]	@ (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 800217e:	4313      	orrs	r3, r2
 8002180:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	d044      	beq.n	8002218 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d107      	bne.n	80021a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002196:	4b47      	ldr	r3, [pc, #284]	@ (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d119      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e07f      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d003      	beq.n	80021b6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021b2:	2b03      	cmp	r3, #3
 80021b4:	d107      	bne.n	80021c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021b6:	4b3f      	ldr	r3, [pc, #252]	@ (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d109      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e06f      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c6:	4b3b      	ldr	r3, [pc, #236]	@ (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e067      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021d6:	4b37      	ldr	r3, [pc, #220]	@ (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f023 0203 	bic.w	r2, r3, #3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	4934      	ldr	r1, [pc, #208]	@ (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021e8:	f7fe fe78 	bl	8000edc <HAL_GetTick>
 80021ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ee:	e00a      	b.n	8002206 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021f0:	f7fe fe74 	bl	8000edc <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021fe:	4293      	cmp	r3, r2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e04f      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002206:	4b2b      	ldr	r3, [pc, #172]	@ (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 020c 	and.w	r2, r3, #12
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	429a      	cmp	r2, r3
 8002216:	d1eb      	bne.n	80021f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002218:	4b25      	ldr	r3, [pc, #148]	@ (80022b0 <HAL_RCC_ClockConfig+0x1b8>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	429a      	cmp	r2, r3
 8002224:	d20c      	bcs.n	8002240 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002226:	4b22      	ldr	r3, [pc, #136]	@ (80022b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800222e:	4b20      	ldr	r3, [pc, #128]	@ (80022b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	429a      	cmp	r2, r3
 800223a:	d001      	beq.n	8002240 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e032      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0304 	and.w	r3, r3, #4
 8002248:	2b00      	cmp	r3, #0
 800224a:	d008      	beq.n	800225e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800224c:	4b19      	ldr	r3, [pc, #100]	@ (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	4916      	ldr	r1, [pc, #88]	@ (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 800225a:	4313      	orrs	r3, r2
 800225c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0308 	and.w	r3, r3, #8
 8002266:	2b00      	cmp	r3, #0
 8002268:	d009      	beq.n	800227e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800226a:	4b12      	ldr	r3, [pc, #72]	@ (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	490e      	ldr	r1, [pc, #56]	@ (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 800227a:	4313      	orrs	r3, r2
 800227c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800227e:	f000 f821 	bl	80022c4 <HAL_RCC_GetSysClockFreq>
 8002282:	4602      	mov	r2, r0
 8002284:	4b0b      	ldr	r3, [pc, #44]	@ (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	091b      	lsrs	r3, r3, #4
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	490a      	ldr	r1, [pc, #40]	@ (80022b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002290:	5ccb      	ldrb	r3, [r1, r3]
 8002292:	fa22 f303 	lsr.w	r3, r2, r3
 8002296:	4a09      	ldr	r2, [pc, #36]	@ (80022bc <HAL_RCC_ClockConfig+0x1c4>)
 8002298:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800229a:	4b09      	ldr	r3, [pc, #36]	@ (80022c0 <HAL_RCC_ClockConfig+0x1c8>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4618      	mov	r0, r3
 80022a0:	f7fe fcd2 	bl	8000c48 <HAL_InitTick>

  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40023c00 	.word	0x40023c00
 80022b4:	40023800 	.word	0x40023800
 80022b8:	08006a68 	.word	0x08006a68
 80022bc:	20000000 	.word	0x20000000
 80022c0:	20000004 	.word	0x20000004

080022c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022c8:	b090      	sub	sp, #64	@ 0x40
 80022ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80022d0:	2300      	movs	r3, #0
 80022d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80022d4:	2300      	movs	r3, #0
 80022d6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80022d8:	2300      	movs	r3, #0
 80022da:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022dc:	4b59      	ldr	r3, [pc, #356]	@ (8002444 <HAL_RCC_GetSysClockFreq+0x180>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 030c 	and.w	r3, r3, #12
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	d00d      	beq.n	8002304 <HAL_RCC_GetSysClockFreq+0x40>
 80022e8:	2b08      	cmp	r3, #8
 80022ea:	f200 80a1 	bhi.w	8002430 <HAL_RCC_GetSysClockFreq+0x16c>
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d002      	beq.n	80022f8 <HAL_RCC_GetSysClockFreq+0x34>
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	d003      	beq.n	80022fe <HAL_RCC_GetSysClockFreq+0x3a>
 80022f6:	e09b      	b.n	8002430 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022f8:	4b53      	ldr	r3, [pc, #332]	@ (8002448 <HAL_RCC_GetSysClockFreq+0x184>)
 80022fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022fc:	e09b      	b.n	8002436 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022fe:	4b53      	ldr	r3, [pc, #332]	@ (800244c <HAL_RCC_GetSysClockFreq+0x188>)
 8002300:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002302:	e098      	b.n	8002436 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002304:	4b4f      	ldr	r3, [pc, #316]	@ (8002444 <HAL_RCC_GetSysClockFreq+0x180>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800230c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800230e:	4b4d      	ldr	r3, [pc, #308]	@ (8002444 <HAL_RCC_GetSysClockFreq+0x180>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d028      	beq.n	800236c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800231a:	4b4a      	ldr	r3, [pc, #296]	@ (8002444 <HAL_RCC_GetSysClockFreq+0x180>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	099b      	lsrs	r3, r3, #6
 8002320:	2200      	movs	r2, #0
 8002322:	623b      	str	r3, [r7, #32]
 8002324:	627a      	str	r2, [r7, #36]	@ 0x24
 8002326:	6a3b      	ldr	r3, [r7, #32]
 8002328:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800232c:	2100      	movs	r1, #0
 800232e:	4b47      	ldr	r3, [pc, #284]	@ (800244c <HAL_RCC_GetSysClockFreq+0x188>)
 8002330:	fb03 f201 	mul.w	r2, r3, r1
 8002334:	2300      	movs	r3, #0
 8002336:	fb00 f303 	mul.w	r3, r0, r3
 800233a:	4413      	add	r3, r2
 800233c:	4a43      	ldr	r2, [pc, #268]	@ (800244c <HAL_RCC_GetSysClockFreq+0x188>)
 800233e:	fba0 1202 	umull	r1, r2, r0, r2
 8002342:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002344:	460a      	mov	r2, r1
 8002346:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002348:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800234a:	4413      	add	r3, r2
 800234c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800234e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002350:	2200      	movs	r2, #0
 8002352:	61bb      	str	r3, [r7, #24]
 8002354:	61fa      	str	r2, [r7, #28]
 8002356:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800235a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800235e:	f7fd ff8f 	bl	8000280 <__aeabi_uldivmod>
 8002362:	4602      	mov	r2, r0
 8002364:	460b      	mov	r3, r1
 8002366:	4613      	mov	r3, r2
 8002368:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800236a:	e053      	b.n	8002414 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800236c:	4b35      	ldr	r3, [pc, #212]	@ (8002444 <HAL_RCC_GetSysClockFreq+0x180>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	099b      	lsrs	r3, r3, #6
 8002372:	2200      	movs	r2, #0
 8002374:	613b      	str	r3, [r7, #16]
 8002376:	617a      	str	r2, [r7, #20]
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800237e:	f04f 0b00 	mov.w	fp, #0
 8002382:	4652      	mov	r2, sl
 8002384:	465b      	mov	r3, fp
 8002386:	f04f 0000 	mov.w	r0, #0
 800238a:	f04f 0100 	mov.w	r1, #0
 800238e:	0159      	lsls	r1, r3, #5
 8002390:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002394:	0150      	lsls	r0, r2, #5
 8002396:	4602      	mov	r2, r0
 8002398:	460b      	mov	r3, r1
 800239a:	ebb2 080a 	subs.w	r8, r2, sl
 800239e:	eb63 090b 	sbc.w	r9, r3, fp
 80023a2:	f04f 0200 	mov.w	r2, #0
 80023a6:	f04f 0300 	mov.w	r3, #0
 80023aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80023ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80023b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80023b6:	ebb2 0408 	subs.w	r4, r2, r8
 80023ba:	eb63 0509 	sbc.w	r5, r3, r9
 80023be:	f04f 0200 	mov.w	r2, #0
 80023c2:	f04f 0300 	mov.w	r3, #0
 80023c6:	00eb      	lsls	r3, r5, #3
 80023c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023cc:	00e2      	lsls	r2, r4, #3
 80023ce:	4614      	mov	r4, r2
 80023d0:	461d      	mov	r5, r3
 80023d2:	eb14 030a 	adds.w	r3, r4, sl
 80023d6:	603b      	str	r3, [r7, #0]
 80023d8:	eb45 030b 	adc.w	r3, r5, fp
 80023dc:	607b      	str	r3, [r7, #4]
 80023de:	f04f 0200 	mov.w	r2, #0
 80023e2:	f04f 0300 	mov.w	r3, #0
 80023e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023ea:	4629      	mov	r1, r5
 80023ec:	028b      	lsls	r3, r1, #10
 80023ee:	4621      	mov	r1, r4
 80023f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023f4:	4621      	mov	r1, r4
 80023f6:	028a      	lsls	r2, r1, #10
 80023f8:	4610      	mov	r0, r2
 80023fa:	4619      	mov	r1, r3
 80023fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023fe:	2200      	movs	r2, #0
 8002400:	60bb      	str	r3, [r7, #8]
 8002402:	60fa      	str	r2, [r7, #12]
 8002404:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002408:	f7fd ff3a 	bl	8000280 <__aeabi_uldivmod>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	4613      	mov	r3, r2
 8002412:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002414:	4b0b      	ldr	r3, [pc, #44]	@ (8002444 <HAL_RCC_GetSysClockFreq+0x180>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	0c1b      	lsrs	r3, r3, #16
 800241a:	f003 0303 	and.w	r3, r3, #3
 800241e:	3301      	adds	r3, #1
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002424:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002428:	fbb2 f3f3 	udiv	r3, r2, r3
 800242c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800242e:	e002      	b.n	8002436 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002430:	4b05      	ldr	r3, [pc, #20]	@ (8002448 <HAL_RCC_GetSysClockFreq+0x184>)
 8002432:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002434:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002438:	4618      	mov	r0, r3
 800243a:	3740      	adds	r7, #64	@ 0x40
 800243c:	46bd      	mov	sp, r7
 800243e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002442:	bf00      	nop
 8002444:	40023800 	.word	0x40023800
 8002448:	00f42400 	.word	0x00f42400
 800244c:	017d7840 	.word	0x017d7840

08002450 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002454:	4b03      	ldr	r3, [pc, #12]	@ (8002464 <HAL_RCC_GetHCLKFreq+0x14>)
 8002456:	681b      	ldr	r3, [r3, #0]
}
 8002458:	4618      	mov	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	20000000 	.word	0x20000000

08002468 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800246c:	f7ff fff0 	bl	8002450 <HAL_RCC_GetHCLKFreq>
 8002470:	4602      	mov	r2, r0
 8002472:	4b05      	ldr	r3, [pc, #20]	@ (8002488 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	0a9b      	lsrs	r3, r3, #10
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	4903      	ldr	r1, [pc, #12]	@ (800248c <HAL_RCC_GetPCLK1Freq+0x24>)
 800247e:	5ccb      	ldrb	r3, [r1, r3]
 8002480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002484:	4618      	mov	r0, r3
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40023800 	.word	0x40023800
 800248c:	08006a78 	.word	0x08006a78

08002490 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002494:	f7ff ffdc 	bl	8002450 <HAL_RCC_GetHCLKFreq>
 8002498:	4602      	mov	r2, r0
 800249a:	4b05      	ldr	r3, [pc, #20]	@ (80024b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	0b5b      	lsrs	r3, r3, #13
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	4903      	ldr	r1, [pc, #12]	@ (80024b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024a6:	5ccb      	ldrb	r3, [r1, r3]
 80024a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40023800 	.word	0x40023800
 80024b4:	08006a78 	.word	0x08006a78

080024b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	220f      	movs	r2, #15
 80024c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80024c8:	4b12      	ldr	r3, [pc, #72]	@ (8002514 <HAL_RCC_GetClockConfig+0x5c>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f003 0203 	and.w	r2, r3, #3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80024d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002514 <HAL_RCC_GetClockConfig+0x5c>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80024e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002514 <HAL_RCC_GetClockConfig+0x5c>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80024ec:	4b09      	ldr	r3, [pc, #36]	@ (8002514 <HAL_RCC_GetClockConfig+0x5c>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	08db      	lsrs	r3, r3, #3
 80024f2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80024fa:	4b07      	ldr	r3, [pc, #28]	@ (8002518 <HAL_RCC_GetClockConfig+0x60>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0207 	and.w	r2, r3, #7
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	601a      	str	r2, [r3, #0]
}
 8002506:	bf00      	nop
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	40023800 	.word	0x40023800
 8002518:	40023c00 	.word	0x40023c00

0800251c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e041      	b.n	80025b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d106      	bne.n	8002548 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 f839 	bl	80025ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2202      	movs	r2, #2
 800254c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3304      	adds	r3, #4
 8002558:	4619      	mov	r1, r3
 800255a:	4610      	mov	r0, r2
 800255c:	f000 f9b2 	bl	80028c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b083      	sub	sp, #12
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80025c2:	bf00      	nop
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
	...

080025d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d001      	beq.n	80025e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e044      	b.n	8002672 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2202      	movs	r2, #2
 80025ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	68da      	ldr	r2, [r3, #12]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f042 0201 	orr.w	r2, r2, #1
 80025fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a1e      	ldr	r2, [pc, #120]	@ (8002680 <HAL_TIM_Base_Start_IT+0xb0>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d018      	beq.n	800263c <HAL_TIM_Base_Start_IT+0x6c>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002612:	d013      	beq.n	800263c <HAL_TIM_Base_Start_IT+0x6c>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a1a      	ldr	r2, [pc, #104]	@ (8002684 <HAL_TIM_Base_Start_IT+0xb4>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d00e      	beq.n	800263c <HAL_TIM_Base_Start_IT+0x6c>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a19      	ldr	r2, [pc, #100]	@ (8002688 <HAL_TIM_Base_Start_IT+0xb8>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d009      	beq.n	800263c <HAL_TIM_Base_Start_IT+0x6c>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a17      	ldr	r2, [pc, #92]	@ (800268c <HAL_TIM_Base_Start_IT+0xbc>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d004      	beq.n	800263c <HAL_TIM_Base_Start_IT+0x6c>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a16      	ldr	r2, [pc, #88]	@ (8002690 <HAL_TIM_Base_Start_IT+0xc0>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d111      	bne.n	8002660 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2b06      	cmp	r3, #6
 800264c:	d010      	beq.n	8002670 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f042 0201 	orr.w	r2, r2, #1
 800265c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800265e:	e007      	b.n	8002670 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f042 0201 	orr.w	r2, r2, #1
 800266e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3714      	adds	r7, #20
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	40010000 	.word	0x40010000
 8002684:	40000400 	.word	0x40000400
 8002688:	40000800 	.word	0x40000800
 800268c:	40000c00 	.word	0x40000c00
 8002690:	40014000 	.word	0x40014000

08002694 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d020      	beq.n	80026f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d01b      	beq.n	80026f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f06f 0202 	mvn.w	r2, #2
 80026c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	f003 0303 	and.w	r3, r3, #3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f8d2 	bl	8002888 <HAL_TIM_IC_CaptureCallback>
 80026e4:	e005      	b.n	80026f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f8c4 	bl	8002874 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 f8d5 	bl	800289c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d020      	beq.n	8002744 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b00      	cmp	r3, #0
 800270a:	d01b      	beq.n	8002744 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f06f 0204 	mvn.w	r2, #4
 8002714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2202      	movs	r2, #2
 800271a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 f8ac 	bl	8002888 <HAL_TIM_IC_CaptureCallback>
 8002730:	e005      	b.n	800273e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f89e 	bl	8002874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f000 f8af 	bl	800289c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	f003 0308 	and.w	r3, r3, #8
 800274a:	2b00      	cmp	r3, #0
 800274c:	d020      	beq.n	8002790 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f003 0308 	and.w	r3, r3, #8
 8002754:	2b00      	cmp	r3, #0
 8002756:	d01b      	beq.n	8002790 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f06f 0208 	mvn.w	r2, #8
 8002760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2204      	movs	r2, #4
 8002766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f886 	bl	8002888 <HAL_TIM_IC_CaptureCallback>
 800277c:	e005      	b.n	800278a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 f878 	bl	8002874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 f889 	bl	800289c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	f003 0310 	and.w	r3, r3, #16
 8002796:	2b00      	cmp	r3, #0
 8002798:	d020      	beq.n	80027dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f003 0310 	and.w	r3, r3, #16
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d01b      	beq.n	80027dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f06f 0210 	mvn.w	r2, #16
 80027ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2208      	movs	r2, #8
 80027b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	69db      	ldr	r3, [r3, #28]
 80027ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 f860 	bl	8002888 <HAL_TIM_IC_CaptureCallback>
 80027c8:	e005      	b.n	80027d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 f852 	bl	8002874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f000 f863 	bl	800289c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00c      	beq.n	8002800 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d007      	beq.n	8002800 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f06f 0201 	mvn.w	r2, #1
 80027f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7fe f954 	bl	8000aa8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00c      	beq.n	8002824 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002810:	2b00      	cmp	r3, #0
 8002812:	d007      	beq.n	8002824 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800281c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f8e6 	bl	80029f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00c      	beq.n	8002848 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002834:	2b00      	cmp	r3, #0
 8002836:	d007      	beq.n	8002848 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f834 	bl	80028b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	f003 0320 	and.w	r3, r3, #32
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00c      	beq.n	800286c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f003 0320 	and.w	r3, r3, #32
 8002858:	2b00      	cmp	r3, #0
 800285a:	d007      	beq.n	800286c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f06f 0220 	mvn.w	r2, #32
 8002864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 f8b8 	bl	80029dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800286c:	bf00      	nop
 800286e:	3710      	adds	r7, #16
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a3a      	ldr	r2, [pc, #232]	@ (80029c0 <TIM_Base_SetConfig+0xfc>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d00f      	beq.n	80028fc <TIM_Base_SetConfig+0x38>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028e2:	d00b      	beq.n	80028fc <TIM_Base_SetConfig+0x38>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a37      	ldr	r2, [pc, #220]	@ (80029c4 <TIM_Base_SetConfig+0x100>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d007      	beq.n	80028fc <TIM_Base_SetConfig+0x38>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a36      	ldr	r2, [pc, #216]	@ (80029c8 <TIM_Base_SetConfig+0x104>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d003      	beq.n	80028fc <TIM_Base_SetConfig+0x38>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a35      	ldr	r2, [pc, #212]	@ (80029cc <TIM_Base_SetConfig+0x108>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d108      	bne.n	800290e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002902:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	4313      	orrs	r3, r2
 800290c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a2b      	ldr	r2, [pc, #172]	@ (80029c0 <TIM_Base_SetConfig+0xfc>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d01b      	beq.n	800294e <TIM_Base_SetConfig+0x8a>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800291c:	d017      	beq.n	800294e <TIM_Base_SetConfig+0x8a>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a28      	ldr	r2, [pc, #160]	@ (80029c4 <TIM_Base_SetConfig+0x100>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d013      	beq.n	800294e <TIM_Base_SetConfig+0x8a>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a27      	ldr	r2, [pc, #156]	@ (80029c8 <TIM_Base_SetConfig+0x104>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d00f      	beq.n	800294e <TIM_Base_SetConfig+0x8a>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a26      	ldr	r2, [pc, #152]	@ (80029cc <TIM_Base_SetConfig+0x108>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d00b      	beq.n	800294e <TIM_Base_SetConfig+0x8a>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a25      	ldr	r2, [pc, #148]	@ (80029d0 <TIM_Base_SetConfig+0x10c>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d007      	beq.n	800294e <TIM_Base_SetConfig+0x8a>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a24      	ldr	r2, [pc, #144]	@ (80029d4 <TIM_Base_SetConfig+0x110>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d003      	beq.n	800294e <TIM_Base_SetConfig+0x8a>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a23      	ldr	r2, [pc, #140]	@ (80029d8 <TIM_Base_SetConfig+0x114>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d108      	bne.n	8002960 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002954:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	4313      	orrs	r3, r2
 800295e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	4313      	orrs	r3, r2
 800296c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a0e      	ldr	r2, [pc, #56]	@ (80029c0 <TIM_Base_SetConfig+0xfc>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d103      	bne.n	8002994 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	691a      	ldr	r2, [r3, #16]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d105      	bne.n	80029b2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	f023 0201 	bic.w	r2, r3, #1
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	611a      	str	r2, [r3, #16]
  }
}
 80029b2:	bf00      	nop
 80029b4:	3714      	adds	r7, #20
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	40010000 	.word	0x40010000
 80029c4:	40000400 	.word	0x40000400
 80029c8:	40000800 	.word	0x40000800
 80029cc:	40000c00 	.word	0x40000c00
 80029d0:	40014000 	.word	0x40014000
 80029d4:	40014400 	.word	0x40014400
 80029d8:	40014800 	.word	0x40014800

080029dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e042      	b.n	8002a9c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d106      	bne.n	8002a30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7fe f8c4 	bl	8000bb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2224      	movs	r2, #36	@ 0x24
 8002a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68da      	ldr	r2, [r3, #12]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 fa09 	bl	8002e60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	691a      	ldr	r2, [r3, #16]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002a5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	695a      	ldr	r2, [r3, #20]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002a6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68da      	ldr	r2, [r3, #12]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002a7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2220      	movs	r2, #32
 8002a88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b08a      	sub	sp, #40	@ 0x28
 8002aa8:	af02      	add	r7, sp, #8
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	603b      	str	r3, [r7, #0]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b20      	cmp	r3, #32
 8002ac2:	d175      	bne.n	8002bb0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d002      	beq.n	8002ad0 <HAL_UART_Transmit+0x2c>
 8002aca:	88fb      	ldrh	r3, [r7, #6]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e06e      	b.n	8002bb2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2221      	movs	r2, #33	@ 0x21
 8002ade:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ae2:	f7fe f9fb 	bl	8000edc <HAL_GetTick>
 8002ae6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	88fa      	ldrh	r2, [r7, #6]
 8002aec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	88fa      	ldrh	r2, [r7, #6]
 8002af2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002afc:	d108      	bne.n	8002b10 <HAL_UART_Transmit+0x6c>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d104      	bne.n	8002b10 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002b06:	2300      	movs	r3, #0
 8002b08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	61bb      	str	r3, [r7, #24]
 8002b0e:	e003      	b.n	8002b18 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b14:	2300      	movs	r3, #0
 8002b16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b18:	e02e      	b.n	8002b78 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	9300      	str	r3, [sp, #0]
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	2200      	movs	r2, #0
 8002b22:	2180      	movs	r1, #128	@ 0x80
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f000 f8df 	bl	8002ce8 <UART_WaitOnFlagUntilTimeout>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d005      	beq.n	8002b3c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2220      	movs	r2, #32
 8002b34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e03a      	b.n	8002bb2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d10b      	bne.n	8002b5a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	881b      	ldrh	r3, [r3, #0]
 8002b46:	461a      	mov	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	3302      	adds	r3, #2
 8002b56:	61bb      	str	r3, [r7, #24]
 8002b58:	e007      	b.n	8002b6a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	781a      	ldrb	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	3301      	adds	r3, #1
 8002b68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	3b01      	subs	r3, #1
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1cb      	bne.n	8002b1a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	2140      	movs	r1, #64	@ 0x40
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f000 f8ab 	bl	8002ce8 <UART_WaitOnFlagUntilTimeout>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d005      	beq.n	8002ba4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e006      	b.n	8002bb2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002bac:	2300      	movs	r3, #0
 8002bae:	e000      	b.n	8002bb2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002bb0:	2302      	movs	r3, #2
  }
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3720      	adds	r7, #32
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b08a      	sub	sp, #40	@ 0x28
 8002bbe:	af02      	add	r7, sp, #8
 8002bc0:	60f8      	str	r0, [r7, #12]
 8002bc2:	60b9      	str	r1, [r7, #8]
 8002bc4:	603b      	str	r3, [r7, #0]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b20      	cmp	r3, #32
 8002bd8:	f040 8081 	bne.w	8002cde <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d002      	beq.n	8002be8 <HAL_UART_Receive+0x2e>
 8002be2:	88fb      	ldrh	r3, [r7, #6]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d101      	bne.n	8002bec <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e079      	b.n	8002ce0 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2222      	movs	r2, #34	@ 0x22
 8002bf6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c00:	f7fe f96c 	bl	8000edc <HAL_GetTick>
 8002c04:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	88fa      	ldrh	r2, [r7, #6]
 8002c0a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	88fa      	ldrh	r2, [r7, #6]
 8002c10:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c1a:	d108      	bne.n	8002c2e <HAL_UART_Receive+0x74>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d104      	bne.n	8002c2e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	61bb      	str	r3, [r7, #24]
 8002c2c:	e003      	b.n	8002c36 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c32:	2300      	movs	r3, #0
 8002c34:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002c36:	e047      	b.n	8002cc8 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	2120      	movs	r1, #32
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f000 f850 	bl	8002ce8 <UART_WaitOnFlagUntilTimeout>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d005      	beq.n	8002c5a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2220      	movs	r2, #32
 8002c52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e042      	b.n	8002ce0 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10c      	bne.n	8002c7a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	3302      	adds	r3, #2
 8002c76:	61bb      	str	r3, [r7, #24]
 8002c78:	e01f      	b.n	8002cba <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c82:	d007      	beq.n	8002c94 <HAL_UART_Receive+0xda>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10a      	bne.n	8002ca2 <HAL_UART_Receive+0xe8>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d106      	bne.n	8002ca2 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	b2da      	uxtb	r2, r3
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	701a      	strb	r2, [r3, #0]
 8002ca0:	e008      	b.n	8002cb4 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1b2      	bne.n	8002c38 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	e000      	b.n	8002ce0 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002cde:	2302      	movs	r3, #2
  }
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3720      	adds	r7, #32
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	603b      	str	r3, [r7, #0]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cf8:	e03b      	b.n	8002d72 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cfa:	6a3b      	ldr	r3, [r7, #32]
 8002cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d00:	d037      	beq.n	8002d72 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d02:	f7fe f8eb 	bl	8000edc <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	6a3a      	ldr	r2, [r7, #32]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d302      	bcc.n	8002d18 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d12:	6a3b      	ldr	r3, [r7, #32]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d101      	bne.n	8002d1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e03a      	b.n	8002d92 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	f003 0304 	and.w	r3, r3, #4
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d023      	beq.n	8002d72 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	2b80      	cmp	r3, #128	@ 0x80
 8002d2e:	d020      	beq.n	8002d72 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	2b40      	cmp	r3, #64	@ 0x40
 8002d34:	d01d      	beq.n	8002d72 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0308 	and.w	r3, r3, #8
 8002d40:	2b08      	cmp	r3, #8
 8002d42:	d116      	bne.n	8002d72 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002d44:	2300      	movs	r3, #0
 8002d46:	617b      	str	r3, [r7, #20]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	617b      	str	r3, [r7, #20]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	617b      	str	r3, [r7, #20]
 8002d58:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 f81d 	bl	8002d9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2208      	movs	r2, #8
 8002d64:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e00f      	b.n	8002d92 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	68ba      	ldr	r2, [r7, #8]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	bf0c      	ite	eq
 8002d82:	2301      	moveq	r3, #1
 8002d84:	2300      	movne	r3, #0
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	461a      	mov	r2, r3
 8002d8a:	79fb      	ldrb	r3, [r7, #7]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d0b4      	beq.n	8002cfa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3718      	adds	r7, #24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b095      	sub	sp, #84	@ 0x54
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	330c      	adds	r3, #12
 8002da8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002daa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dac:	e853 3f00 	ldrex	r3, [r3]
 8002db0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002db4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002db8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	330c      	adds	r3, #12
 8002dc0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002dc2:	643a      	str	r2, [r7, #64]	@ 0x40
 8002dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002dc8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002dca:	e841 2300 	strex	r3, r2, [r1]
 8002dce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1e5      	bne.n	8002da2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	3314      	adds	r3, #20
 8002ddc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dde:	6a3b      	ldr	r3, [r7, #32]
 8002de0:	e853 3f00 	ldrex	r3, [r3]
 8002de4:	61fb      	str	r3, [r7, #28]
   return(result);
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	f023 0301 	bic.w	r3, r3, #1
 8002dec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	3314      	adds	r3, #20
 8002df4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002df6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002df8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002dfc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002dfe:	e841 2300 	strex	r3, r2, [r1]
 8002e02:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1e5      	bne.n	8002dd6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d119      	bne.n	8002e46 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	330c      	adds	r3, #12
 8002e18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	e853 3f00 	ldrex	r3, [r3]
 8002e20:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	f023 0310 	bic.w	r3, r3, #16
 8002e28:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	330c      	adds	r3, #12
 8002e30:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e32:	61ba      	str	r2, [r7, #24]
 8002e34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e36:	6979      	ldr	r1, [r7, #20]
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	e841 2300 	strex	r3, r2, [r1]
 8002e3e:	613b      	str	r3, [r7, #16]
   return(result);
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1e5      	bne.n	8002e12 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002e54:	bf00      	nop
 8002e56:	3754      	adds	r7, #84	@ 0x54
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e64:	b0c0      	sub	sp, #256	@ 0x100
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e7c:	68d9      	ldr	r1, [r3, #12]
 8002e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	ea40 0301 	orr.w	r3, r0, r1
 8002e88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	431a      	orrs	r2, r3
 8002e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002eb8:	f021 010c 	bic.w	r1, r1, #12
 8002ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002ec6:	430b      	orrs	r3, r1
 8002ec8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eda:	6999      	ldr	r1, [r3, #24]
 8002edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	ea40 0301 	orr.w	r3, r0, r1
 8002ee6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	4b8f      	ldr	r3, [pc, #572]	@ (800312c <UART_SetConfig+0x2cc>)
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d005      	beq.n	8002f00 <UART_SetConfig+0xa0>
 8002ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	4b8d      	ldr	r3, [pc, #564]	@ (8003130 <UART_SetConfig+0x2d0>)
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d104      	bne.n	8002f0a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f00:	f7ff fac6 	bl	8002490 <HAL_RCC_GetPCLK2Freq>
 8002f04:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002f08:	e003      	b.n	8002f12 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f0a:	f7ff faad 	bl	8002468 <HAL_RCC_GetPCLK1Freq>
 8002f0e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f16:	69db      	ldr	r3, [r3, #28]
 8002f18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f1c:	f040 810c 	bne.w	8003138 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f24:	2200      	movs	r2, #0
 8002f26:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002f2a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002f2e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002f32:	4622      	mov	r2, r4
 8002f34:	462b      	mov	r3, r5
 8002f36:	1891      	adds	r1, r2, r2
 8002f38:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002f3a:	415b      	adcs	r3, r3
 8002f3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f3e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002f42:	4621      	mov	r1, r4
 8002f44:	eb12 0801 	adds.w	r8, r2, r1
 8002f48:	4629      	mov	r1, r5
 8002f4a:	eb43 0901 	adc.w	r9, r3, r1
 8002f4e:	f04f 0200 	mov.w	r2, #0
 8002f52:	f04f 0300 	mov.w	r3, #0
 8002f56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f62:	4690      	mov	r8, r2
 8002f64:	4699      	mov	r9, r3
 8002f66:	4623      	mov	r3, r4
 8002f68:	eb18 0303 	adds.w	r3, r8, r3
 8002f6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002f70:	462b      	mov	r3, r5
 8002f72:	eb49 0303 	adc.w	r3, r9, r3
 8002f76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002f86:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002f8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002f8e:	460b      	mov	r3, r1
 8002f90:	18db      	adds	r3, r3, r3
 8002f92:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f94:	4613      	mov	r3, r2
 8002f96:	eb42 0303 	adc.w	r3, r2, r3
 8002f9a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f9c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002fa0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002fa4:	f7fd f96c 	bl	8000280 <__aeabi_uldivmod>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	460b      	mov	r3, r1
 8002fac:	4b61      	ldr	r3, [pc, #388]	@ (8003134 <UART_SetConfig+0x2d4>)
 8002fae:	fba3 2302 	umull	r2, r3, r3, r2
 8002fb2:	095b      	lsrs	r3, r3, #5
 8002fb4:	011c      	lsls	r4, r3, #4
 8002fb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002fc0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002fc4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002fc8:	4642      	mov	r2, r8
 8002fca:	464b      	mov	r3, r9
 8002fcc:	1891      	adds	r1, r2, r2
 8002fce:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002fd0:	415b      	adcs	r3, r3
 8002fd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fd4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002fd8:	4641      	mov	r1, r8
 8002fda:	eb12 0a01 	adds.w	sl, r2, r1
 8002fde:	4649      	mov	r1, r9
 8002fe0:	eb43 0b01 	adc.w	fp, r3, r1
 8002fe4:	f04f 0200 	mov.w	r2, #0
 8002fe8:	f04f 0300 	mov.w	r3, #0
 8002fec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ff0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ff4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ff8:	4692      	mov	sl, r2
 8002ffa:	469b      	mov	fp, r3
 8002ffc:	4643      	mov	r3, r8
 8002ffe:	eb1a 0303 	adds.w	r3, sl, r3
 8003002:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003006:	464b      	mov	r3, r9
 8003008:	eb4b 0303 	adc.w	r3, fp, r3
 800300c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800301c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003020:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003024:	460b      	mov	r3, r1
 8003026:	18db      	adds	r3, r3, r3
 8003028:	643b      	str	r3, [r7, #64]	@ 0x40
 800302a:	4613      	mov	r3, r2
 800302c:	eb42 0303 	adc.w	r3, r2, r3
 8003030:	647b      	str	r3, [r7, #68]	@ 0x44
 8003032:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003036:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800303a:	f7fd f921 	bl	8000280 <__aeabi_uldivmod>
 800303e:	4602      	mov	r2, r0
 8003040:	460b      	mov	r3, r1
 8003042:	4611      	mov	r1, r2
 8003044:	4b3b      	ldr	r3, [pc, #236]	@ (8003134 <UART_SetConfig+0x2d4>)
 8003046:	fba3 2301 	umull	r2, r3, r3, r1
 800304a:	095b      	lsrs	r3, r3, #5
 800304c:	2264      	movs	r2, #100	@ 0x64
 800304e:	fb02 f303 	mul.w	r3, r2, r3
 8003052:	1acb      	subs	r3, r1, r3
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800305a:	4b36      	ldr	r3, [pc, #216]	@ (8003134 <UART_SetConfig+0x2d4>)
 800305c:	fba3 2302 	umull	r2, r3, r3, r2
 8003060:	095b      	lsrs	r3, r3, #5
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003068:	441c      	add	r4, r3
 800306a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800306e:	2200      	movs	r2, #0
 8003070:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003074:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003078:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800307c:	4642      	mov	r2, r8
 800307e:	464b      	mov	r3, r9
 8003080:	1891      	adds	r1, r2, r2
 8003082:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003084:	415b      	adcs	r3, r3
 8003086:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003088:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800308c:	4641      	mov	r1, r8
 800308e:	1851      	adds	r1, r2, r1
 8003090:	6339      	str	r1, [r7, #48]	@ 0x30
 8003092:	4649      	mov	r1, r9
 8003094:	414b      	adcs	r3, r1
 8003096:	637b      	str	r3, [r7, #52]	@ 0x34
 8003098:	f04f 0200 	mov.w	r2, #0
 800309c:	f04f 0300 	mov.w	r3, #0
 80030a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80030a4:	4659      	mov	r1, fp
 80030a6:	00cb      	lsls	r3, r1, #3
 80030a8:	4651      	mov	r1, sl
 80030aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030ae:	4651      	mov	r1, sl
 80030b0:	00ca      	lsls	r2, r1, #3
 80030b2:	4610      	mov	r0, r2
 80030b4:	4619      	mov	r1, r3
 80030b6:	4603      	mov	r3, r0
 80030b8:	4642      	mov	r2, r8
 80030ba:	189b      	adds	r3, r3, r2
 80030bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80030c0:	464b      	mov	r3, r9
 80030c2:	460a      	mov	r2, r1
 80030c4:	eb42 0303 	adc.w	r3, r2, r3
 80030c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80030cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80030d8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80030dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80030e0:	460b      	mov	r3, r1
 80030e2:	18db      	adds	r3, r3, r3
 80030e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030e6:	4613      	mov	r3, r2
 80030e8:	eb42 0303 	adc.w	r3, r2, r3
 80030ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80030f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80030f6:	f7fd f8c3 	bl	8000280 <__aeabi_uldivmod>
 80030fa:	4602      	mov	r2, r0
 80030fc:	460b      	mov	r3, r1
 80030fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003134 <UART_SetConfig+0x2d4>)
 8003100:	fba3 1302 	umull	r1, r3, r3, r2
 8003104:	095b      	lsrs	r3, r3, #5
 8003106:	2164      	movs	r1, #100	@ 0x64
 8003108:	fb01 f303 	mul.w	r3, r1, r3
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	3332      	adds	r3, #50	@ 0x32
 8003112:	4a08      	ldr	r2, [pc, #32]	@ (8003134 <UART_SetConfig+0x2d4>)
 8003114:	fba2 2303 	umull	r2, r3, r2, r3
 8003118:	095b      	lsrs	r3, r3, #5
 800311a:	f003 0207 	and.w	r2, r3, #7
 800311e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4422      	add	r2, r4
 8003126:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003128:	e106      	b.n	8003338 <UART_SetConfig+0x4d8>
 800312a:	bf00      	nop
 800312c:	40011000 	.word	0x40011000
 8003130:	40011400 	.word	0x40011400
 8003134:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003138:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800313c:	2200      	movs	r2, #0
 800313e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003142:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003146:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800314a:	4642      	mov	r2, r8
 800314c:	464b      	mov	r3, r9
 800314e:	1891      	adds	r1, r2, r2
 8003150:	6239      	str	r1, [r7, #32]
 8003152:	415b      	adcs	r3, r3
 8003154:	627b      	str	r3, [r7, #36]	@ 0x24
 8003156:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800315a:	4641      	mov	r1, r8
 800315c:	1854      	adds	r4, r2, r1
 800315e:	4649      	mov	r1, r9
 8003160:	eb43 0501 	adc.w	r5, r3, r1
 8003164:	f04f 0200 	mov.w	r2, #0
 8003168:	f04f 0300 	mov.w	r3, #0
 800316c:	00eb      	lsls	r3, r5, #3
 800316e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003172:	00e2      	lsls	r2, r4, #3
 8003174:	4614      	mov	r4, r2
 8003176:	461d      	mov	r5, r3
 8003178:	4643      	mov	r3, r8
 800317a:	18e3      	adds	r3, r4, r3
 800317c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003180:	464b      	mov	r3, r9
 8003182:	eb45 0303 	adc.w	r3, r5, r3
 8003186:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800318a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003196:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800319a:	f04f 0200 	mov.w	r2, #0
 800319e:	f04f 0300 	mov.w	r3, #0
 80031a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80031a6:	4629      	mov	r1, r5
 80031a8:	008b      	lsls	r3, r1, #2
 80031aa:	4621      	mov	r1, r4
 80031ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031b0:	4621      	mov	r1, r4
 80031b2:	008a      	lsls	r2, r1, #2
 80031b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80031b8:	f7fd f862 	bl	8000280 <__aeabi_uldivmod>
 80031bc:	4602      	mov	r2, r0
 80031be:	460b      	mov	r3, r1
 80031c0:	4b60      	ldr	r3, [pc, #384]	@ (8003344 <UART_SetConfig+0x4e4>)
 80031c2:	fba3 2302 	umull	r2, r3, r3, r2
 80031c6:	095b      	lsrs	r3, r3, #5
 80031c8:	011c      	lsls	r4, r3, #4
 80031ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031ce:	2200      	movs	r2, #0
 80031d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80031d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80031d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80031dc:	4642      	mov	r2, r8
 80031de:	464b      	mov	r3, r9
 80031e0:	1891      	adds	r1, r2, r2
 80031e2:	61b9      	str	r1, [r7, #24]
 80031e4:	415b      	adcs	r3, r3
 80031e6:	61fb      	str	r3, [r7, #28]
 80031e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031ec:	4641      	mov	r1, r8
 80031ee:	1851      	adds	r1, r2, r1
 80031f0:	6139      	str	r1, [r7, #16]
 80031f2:	4649      	mov	r1, r9
 80031f4:	414b      	adcs	r3, r1
 80031f6:	617b      	str	r3, [r7, #20]
 80031f8:	f04f 0200 	mov.w	r2, #0
 80031fc:	f04f 0300 	mov.w	r3, #0
 8003200:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003204:	4659      	mov	r1, fp
 8003206:	00cb      	lsls	r3, r1, #3
 8003208:	4651      	mov	r1, sl
 800320a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800320e:	4651      	mov	r1, sl
 8003210:	00ca      	lsls	r2, r1, #3
 8003212:	4610      	mov	r0, r2
 8003214:	4619      	mov	r1, r3
 8003216:	4603      	mov	r3, r0
 8003218:	4642      	mov	r2, r8
 800321a:	189b      	adds	r3, r3, r2
 800321c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003220:	464b      	mov	r3, r9
 8003222:	460a      	mov	r2, r1
 8003224:	eb42 0303 	adc.w	r3, r2, r3
 8003228:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800322c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003236:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003238:	f04f 0200 	mov.w	r2, #0
 800323c:	f04f 0300 	mov.w	r3, #0
 8003240:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003244:	4649      	mov	r1, r9
 8003246:	008b      	lsls	r3, r1, #2
 8003248:	4641      	mov	r1, r8
 800324a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800324e:	4641      	mov	r1, r8
 8003250:	008a      	lsls	r2, r1, #2
 8003252:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003256:	f7fd f813 	bl	8000280 <__aeabi_uldivmod>
 800325a:	4602      	mov	r2, r0
 800325c:	460b      	mov	r3, r1
 800325e:	4611      	mov	r1, r2
 8003260:	4b38      	ldr	r3, [pc, #224]	@ (8003344 <UART_SetConfig+0x4e4>)
 8003262:	fba3 2301 	umull	r2, r3, r3, r1
 8003266:	095b      	lsrs	r3, r3, #5
 8003268:	2264      	movs	r2, #100	@ 0x64
 800326a:	fb02 f303 	mul.w	r3, r2, r3
 800326e:	1acb      	subs	r3, r1, r3
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	3332      	adds	r3, #50	@ 0x32
 8003274:	4a33      	ldr	r2, [pc, #204]	@ (8003344 <UART_SetConfig+0x4e4>)
 8003276:	fba2 2303 	umull	r2, r3, r2, r3
 800327a:	095b      	lsrs	r3, r3, #5
 800327c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003280:	441c      	add	r4, r3
 8003282:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003286:	2200      	movs	r2, #0
 8003288:	673b      	str	r3, [r7, #112]	@ 0x70
 800328a:	677a      	str	r2, [r7, #116]	@ 0x74
 800328c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003290:	4642      	mov	r2, r8
 8003292:	464b      	mov	r3, r9
 8003294:	1891      	adds	r1, r2, r2
 8003296:	60b9      	str	r1, [r7, #8]
 8003298:	415b      	adcs	r3, r3
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032a0:	4641      	mov	r1, r8
 80032a2:	1851      	adds	r1, r2, r1
 80032a4:	6039      	str	r1, [r7, #0]
 80032a6:	4649      	mov	r1, r9
 80032a8:	414b      	adcs	r3, r1
 80032aa:	607b      	str	r3, [r7, #4]
 80032ac:	f04f 0200 	mov.w	r2, #0
 80032b0:	f04f 0300 	mov.w	r3, #0
 80032b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80032b8:	4659      	mov	r1, fp
 80032ba:	00cb      	lsls	r3, r1, #3
 80032bc:	4651      	mov	r1, sl
 80032be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032c2:	4651      	mov	r1, sl
 80032c4:	00ca      	lsls	r2, r1, #3
 80032c6:	4610      	mov	r0, r2
 80032c8:	4619      	mov	r1, r3
 80032ca:	4603      	mov	r3, r0
 80032cc:	4642      	mov	r2, r8
 80032ce:	189b      	adds	r3, r3, r2
 80032d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80032d2:	464b      	mov	r3, r9
 80032d4:	460a      	mov	r2, r1
 80032d6:	eb42 0303 	adc.w	r3, r2, r3
 80032da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80032dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80032e6:	667a      	str	r2, [r7, #100]	@ 0x64
 80032e8:	f04f 0200 	mov.w	r2, #0
 80032ec:	f04f 0300 	mov.w	r3, #0
 80032f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80032f4:	4649      	mov	r1, r9
 80032f6:	008b      	lsls	r3, r1, #2
 80032f8:	4641      	mov	r1, r8
 80032fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032fe:	4641      	mov	r1, r8
 8003300:	008a      	lsls	r2, r1, #2
 8003302:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003306:	f7fc ffbb 	bl	8000280 <__aeabi_uldivmod>
 800330a:	4602      	mov	r2, r0
 800330c:	460b      	mov	r3, r1
 800330e:	4b0d      	ldr	r3, [pc, #52]	@ (8003344 <UART_SetConfig+0x4e4>)
 8003310:	fba3 1302 	umull	r1, r3, r3, r2
 8003314:	095b      	lsrs	r3, r3, #5
 8003316:	2164      	movs	r1, #100	@ 0x64
 8003318:	fb01 f303 	mul.w	r3, r1, r3
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	011b      	lsls	r3, r3, #4
 8003320:	3332      	adds	r3, #50	@ 0x32
 8003322:	4a08      	ldr	r2, [pc, #32]	@ (8003344 <UART_SetConfig+0x4e4>)
 8003324:	fba2 2303 	umull	r2, r3, r2, r3
 8003328:	095b      	lsrs	r3, r3, #5
 800332a:	f003 020f 	and.w	r2, r3, #15
 800332e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4422      	add	r2, r4
 8003336:	609a      	str	r2, [r3, #8]
}
 8003338:	bf00      	nop
 800333a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800333e:	46bd      	mov	sp, r7
 8003340:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003344:	51eb851f 	.word	0x51eb851f

08003348 <__NVIC_SetPriority>:
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	4603      	mov	r3, r0
 8003350:	6039      	str	r1, [r7, #0]
 8003352:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003358:	2b00      	cmp	r3, #0
 800335a:	db0a      	blt.n	8003372 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	b2da      	uxtb	r2, r3
 8003360:	490c      	ldr	r1, [pc, #48]	@ (8003394 <__NVIC_SetPriority+0x4c>)
 8003362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003366:	0112      	lsls	r2, r2, #4
 8003368:	b2d2      	uxtb	r2, r2
 800336a:	440b      	add	r3, r1
 800336c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003370:	e00a      	b.n	8003388 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	b2da      	uxtb	r2, r3
 8003376:	4908      	ldr	r1, [pc, #32]	@ (8003398 <__NVIC_SetPriority+0x50>)
 8003378:	79fb      	ldrb	r3, [r7, #7]
 800337a:	f003 030f 	and.w	r3, r3, #15
 800337e:	3b04      	subs	r3, #4
 8003380:	0112      	lsls	r2, r2, #4
 8003382:	b2d2      	uxtb	r2, r2
 8003384:	440b      	add	r3, r1
 8003386:	761a      	strb	r2, [r3, #24]
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	e000e100 	.word	0xe000e100
 8003398:	e000ed00 	.word	0xe000ed00

0800339c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80033a0:	4b05      	ldr	r3, [pc, #20]	@ (80033b8 <SysTick_Handler+0x1c>)
 80033a2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80033a4:	f001 fd46 	bl	8004e34 <xTaskGetSchedulerState>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d001      	beq.n	80033b2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80033ae:	f002 fb3b 	bl	8005a28 <xPortSysTickHandler>
  }
}
 80033b2:	bf00      	nop
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	e000e010 	.word	0xe000e010

080033bc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80033c0:	2100      	movs	r1, #0
 80033c2:	f06f 0004 	mvn.w	r0, #4
 80033c6:	f7ff ffbf 	bl	8003348 <__NVIC_SetPriority>
#endif
}
 80033ca:	bf00      	nop
 80033cc:	bd80      	pop	{r7, pc}
	...

080033d0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033d6:	f3ef 8305 	mrs	r3, IPSR
 80033da:	603b      	str	r3, [r7, #0]
  return(result);
 80033dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80033e2:	f06f 0305 	mvn.w	r3, #5
 80033e6:	607b      	str	r3, [r7, #4]
 80033e8:	e00c      	b.n	8003404 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80033ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003414 <osKernelInitialize+0x44>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d105      	bne.n	80033fe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80033f2:	4b08      	ldr	r3, [pc, #32]	@ (8003414 <osKernelInitialize+0x44>)
 80033f4:	2201      	movs	r2, #1
 80033f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80033f8:	2300      	movs	r3, #0
 80033fa:	607b      	str	r3, [r7, #4]
 80033fc:	e002      	b.n	8003404 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80033fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003402:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003404:	687b      	ldr	r3, [r7, #4]
}
 8003406:	4618      	mov	r0, r3
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	2000017c 	.word	0x2000017c

08003418 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800341e:	f3ef 8305 	mrs	r3, IPSR
 8003422:	603b      	str	r3, [r7, #0]
  return(result);
 8003424:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <osKernelStart+0x1a>
    stat = osErrorISR;
 800342a:	f06f 0305 	mvn.w	r3, #5
 800342e:	607b      	str	r3, [r7, #4]
 8003430:	e010      	b.n	8003454 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003432:	4b0b      	ldr	r3, [pc, #44]	@ (8003460 <osKernelStart+0x48>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d109      	bne.n	800344e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800343a:	f7ff ffbf 	bl	80033bc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800343e:	4b08      	ldr	r3, [pc, #32]	@ (8003460 <osKernelStart+0x48>)
 8003440:	2202      	movs	r2, #2
 8003442:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003444:	f001 f892 	bl	800456c <vTaskStartScheduler>
      stat = osOK;
 8003448:	2300      	movs	r3, #0
 800344a:	607b      	str	r3, [r7, #4]
 800344c:	e002      	b.n	8003454 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800344e:	f04f 33ff 	mov.w	r3, #4294967295
 8003452:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003454:	687b      	ldr	r3, [r7, #4]
}
 8003456:	4618      	mov	r0, r3
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	2000017c 	.word	0x2000017c

08003464 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003464:	b580      	push	{r7, lr}
 8003466:	b08e      	sub	sp, #56	@ 0x38
 8003468:	af04      	add	r7, sp, #16
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003470:	2300      	movs	r3, #0
 8003472:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003474:	f3ef 8305 	mrs	r3, IPSR
 8003478:	617b      	str	r3, [r7, #20]
  return(result);
 800347a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800347c:	2b00      	cmp	r3, #0
 800347e:	d17e      	bne.n	800357e <osThreadNew+0x11a>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d07b      	beq.n	800357e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003486:	2380      	movs	r3, #128	@ 0x80
 8003488:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800348a:	2318      	movs	r3, #24
 800348c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800348e:	2300      	movs	r3, #0
 8003490:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003492:	f04f 33ff 	mov.w	r3, #4294967295
 8003496:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d045      	beq.n	800352a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d002      	beq.n	80034ac <osThreadNew+0x48>
        name = attr->name;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d002      	beq.n	80034ba <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d008      	beq.n	80034d2 <osThreadNew+0x6e>
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	2b38      	cmp	r3, #56	@ 0x38
 80034c4:	d805      	bhi.n	80034d2 <osThreadNew+0x6e>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <osThreadNew+0x72>
        return (NULL);
 80034d2:	2300      	movs	r3, #0
 80034d4:	e054      	b.n	8003580 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	089b      	lsrs	r3, r3, #2
 80034e4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00e      	beq.n	800350c <osThreadNew+0xa8>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	2ba7      	cmp	r3, #167	@ 0xa7
 80034f4:	d90a      	bls.n	800350c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d006      	beq.n	800350c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d002      	beq.n	800350c <osThreadNew+0xa8>
        mem = 1;
 8003506:	2301      	movs	r3, #1
 8003508:	61bb      	str	r3, [r7, #24]
 800350a:	e010      	b.n	800352e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d10c      	bne.n	800352e <osThreadNew+0xca>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d108      	bne.n	800352e <osThreadNew+0xca>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d104      	bne.n	800352e <osThreadNew+0xca>
          mem = 0;
 8003524:	2300      	movs	r3, #0
 8003526:	61bb      	str	r3, [r7, #24]
 8003528:	e001      	b.n	800352e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800352a:	2300      	movs	r3, #0
 800352c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d110      	bne.n	8003556 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800353c:	9202      	str	r2, [sp, #8]
 800353e:	9301      	str	r3, [sp, #4]
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	6a3a      	ldr	r2, [r7, #32]
 8003548:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f000 fe1a 	bl	8004184 <xTaskCreateStatic>
 8003550:	4603      	mov	r3, r0
 8003552:	613b      	str	r3, [r7, #16]
 8003554:	e013      	b.n	800357e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d110      	bne.n	800357e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800355c:	6a3b      	ldr	r3, [r7, #32]
 800355e:	b29a      	uxth	r2, r3
 8003560:	f107 0310 	add.w	r3, r7, #16
 8003564:	9301      	str	r3, [sp, #4]
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f000 fe68 	bl	8004244 <xTaskCreate>
 8003574:	4603      	mov	r3, r0
 8003576:	2b01      	cmp	r3, #1
 8003578:	d001      	beq.n	800357e <osThreadNew+0x11a>
            hTask = NULL;
 800357a:	2300      	movs	r3, #0
 800357c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800357e:	693b      	ldr	r3, [r7, #16]
}
 8003580:	4618      	mov	r0, r3
 8003582:	3728      	adds	r7, #40	@ 0x28
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003590:	f3ef 8305 	mrs	r3, IPSR
 8003594:	60bb      	str	r3, [r7, #8]
  return(result);
 8003596:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <osDelay+0x1c>
    stat = osErrorISR;
 800359c:	f06f 0305 	mvn.w	r3, #5
 80035a0:	60fb      	str	r3, [r7, #12]
 80035a2:	e007      	b.n	80035b4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80035a4:	2300      	movs	r3, #0
 80035a6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d002      	beq.n	80035b4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 ffa6 	bl	8004500 <vTaskDelay>
    }
  }

  return (stat);
 80035b4:	68fb      	ldr	r3, [r7, #12]
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
	...

080035c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4a07      	ldr	r2, [pc, #28]	@ (80035ec <vApplicationGetIdleTaskMemory+0x2c>)
 80035d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	4a06      	ldr	r2, [pc, #24]	@ (80035f0 <vApplicationGetIdleTaskMemory+0x30>)
 80035d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2280      	movs	r2, #128	@ 0x80
 80035dc:	601a      	str	r2, [r3, #0]
}
 80035de:	bf00      	nop
 80035e0:	3714      	adds	r7, #20
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	20000180 	.word	0x20000180
 80035f0:	20000228 	.word	0x20000228

080035f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	4a07      	ldr	r2, [pc, #28]	@ (8003620 <vApplicationGetTimerTaskMemory+0x2c>)
 8003604:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	4a06      	ldr	r2, [pc, #24]	@ (8003624 <vApplicationGetTimerTaskMemory+0x30>)
 800360a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003612:	601a      	str	r2, [r3, #0]
}
 8003614:	bf00      	nop
 8003616:	3714      	adds	r7, #20
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr
 8003620:	20000428 	.word	0x20000428
 8003624:	200004d0 	.word	0x200004d0

08003628 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f103 0208 	add.w	r2, r3, #8
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f04f 32ff 	mov.w	r2, #4294967295
 8003640:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f103 0208 	add.w	r2, r3, #8
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f103 0208 	add.w	r2, r3, #8
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003676:	bf00      	nop
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003682:	b480      	push	{r7}
 8003684:	b085      	sub	sp, #20
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
 800368a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	689a      	ldr	r2, [r3, #8]
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	1c5a      	adds	r2, r3, #1
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	601a      	str	r2, [r3, #0]
}
 80036be:	bf00      	nop
 80036c0:	3714      	adds	r7, #20
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036ca:	b480      	push	{r7}
 80036cc:	b085      	sub	sp, #20
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
 80036d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e0:	d103      	bne.n	80036ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	60fb      	str	r3, [r7, #12]
 80036e8:	e00c      	b.n	8003704 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	3308      	adds	r3, #8
 80036ee:	60fb      	str	r3, [r7, #12]
 80036f0:	e002      	b.n	80036f8 <vListInsert+0x2e>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	60fb      	str	r3, [r7, #12]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	429a      	cmp	r2, r3
 8003702:	d2f6      	bcs.n	80036f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	1c5a      	adds	r2, r3, #1
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	601a      	str	r2, [r3, #0]
}
 8003730:	bf00      	nop
 8003732:	3714      	adds	r7, #20
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	6892      	ldr	r2, [r2, #8]
 8003752:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	6852      	ldr	r2, [r2, #4]
 800375c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	429a      	cmp	r2, r3
 8003766:	d103      	bne.n	8003770 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689a      	ldr	r2, [r3, #8]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	1e5a      	subs	r2, r3, #1
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
}
 8003784:	4618      	mov	r0, r3
 8003786:	3714      	adds	r7, #20
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d10b      	bne.n	80037bc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80037a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037a8:	f383 8811 	msr	BASEPRI, r3
 80037ac:	f3bf 8f6f 	isb	sy
 80037b0:	f3bf 8f4f 	dsb	sy
 80037b4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80037b6:	bf00      	nop
 80037b8:	bf00      	nop
 80037ba:	e7fd      	b.n	80037b8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80037bc:	f002 f8a4 	bl	8005908 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037c8:	68f9      	ldr	r1, [r7, #12]
 80037ca:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80037cc:	fb01 f303 	mul.w	r3, r1, r3
 80037d0:	441a      	add	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037ec:	3b01      	subs	r3, #1
 80037ee:	68f9      	ldr	r1, [r7, #12]
 80037f0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80037f2:	fb01 f303 	mul.w	r3, r1, r3
 80037f6:	441a      	add	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	22ff      	movs	r2, #255	@ 0xff
 8003800:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	22ff      	movs	r2, #255	@ 0xff
 8003808:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d114      	bne.n	800383c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d01a      	beq.n	8003850 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	3310      	adds	r3, #16
 800381e:	4618      	mov	r0, r3
 8003820:	f001 f942 	bl	8004aa8 <xTaskRemoveFromEventList>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d012      	beq.n	8003850 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800382a:	4b0d      	ldr	r3, [pc, #52]	@ (8003860 <xQueueGenericReset+0xd0>)
 800382c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003830:	601a      	str	r2, [r3, #0]
 8003832:	f3bf 8f4f 	dsb	sy
 8003836:	f3bf 8f6f 	isb	sy
 800383a:	e009      	b.n	8003850 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	3310      	adds	r3, #16
 8003840:	4618      	mov	r0, r3
 8003842:	f7ff fef1 	bl	8003628 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	3324      	adds	r3, #36	@ 0x24
 800384a:	4618      	mov	r0, r3
 800384c:	f7ff feec 	bl	8003628 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003850:	f002 f88c 	bl	800596c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003854:	2301      	movs	r3, #1
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	e000ed04 	.word	0xe000ed04

08003864 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003864:	b580      	push	{r7, lr}
 8003866:	b08e      	sub	sp, #56	@ 0x38
 8003868:	af02      	add	r7, sp, #8
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
 8003870:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d10b      	bne.n	8003890 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800387c:	f383 8811 	msr	BASEPRI, r3
 8003880:	f3bf 8f6f 	isb	sy
 8003884:	f3bf 8f4f 	dsb	sy
 8003888:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800388a:	bf00      	nop
 800388c:	bf00      	nop
 800388e:	e7fd      	b.n	800388c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10b      	bne.n	80038ae <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800389a:	f383 8811 	msr	BASEPRI, r3
 800389e:	f3bf 8f6f 	isb	sy
 80038a2:	f3bf 8f4f 	dsb	sy
 80038a6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80038a8:	bf00      	nop
 80038aa:	bf00      	nop
 80038ac:	e7fd      	b.n	80038aa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d002      	beq.n	80038ba <xQueueGenericCreateStatic+0x56>
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <xQueueGenericCreateStatic+0x5a>
 80038ba:	2301      	movs	r3, #1
 80038bc:	e000      	b.n	80038c0 <xQueueGenericCreateStatic+0x5c>
 80038be:	2300      	movs	r3, #0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10b      	bne.n	80038dc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80038c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038c8:	f383 8811 	msr	BASEPRI, r3
 80038cc:	f3bf 8f6f 	isb	sy
 80038d0:	f3bf 8f4f 	dsb	sy
 80038d4:	623b      	str	r3, [r7, #32]
}
 80038d6:	bf00      	nop
 80038d8:	bf00      	nop
 80038da:	e7fd      	b.n	80038d8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d102      	bne.n	80038e8 <xQueueGenericCreateStatic+0x84>
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <xQueueGenericCreateStatic+0x88>
 80038e8:	2301      	movs	r3, #1
 80038ea:	e000      	b.n	80038ee <xQueueGenericCreateStatic+0x8a>
 80038ec:	2300      	movs	r3, #0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10b      	bne.n	800390a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80038f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038f6:	f383 8811 	msr	BASEPRI, r3
 80038fa:	f3bf 8f6f 	isb	sy
 80038fe:	f3bf 8f4f 	dsb	sy
 8003902:	61fb      	str	r3, [r7, #28]
}
 8003904:	bf00      	nop
 8003906:	bf00      	nop
 8003908:	e7fd      	b.n	8003906 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800390a:	2350      	movs	r3, #80	@ 0x50
 800390c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	2b50      	cmp	r3, #80	@ 0x50
 8003912:	d00b      	beq.n	800392c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003918:	f383 8811 	msr	BASEPRI, r3
 800391c:	f3bf 8f6f 	isb	sy
 8003920:	f3bf 8f4f 	dsb	sy
 8003924:	61bb      	str	r3, [r7, #24]
}
 8003926:	bf00      	nop
 8003928:	bf00      	nop
 800392a:	e7fd      	b.n	8003928 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800392c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00d      	beq.n	8003954 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003940:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	4613      	mov	r3, r2
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	68b9      	ldr	r1, [r7, #8]
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f000 f805 	bl	800395e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003956:	4618      	mov	r0, r3
 8003958:	3730      	adds	r7, #48	@ 0x30
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b084      	sub	sp, #16
 8003962:	af00      	add	r7, sp, #0
 8003964:	60f8      	str	r0, [r7, #12]
 8003966:	60b9      	str	r1, [r7, #8]
 8003968:	607a      	str	r2, [r7, #4]
 800396a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d103      	bne.n	800397a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	601a      	str	r2, [r3, #0]
 8003978:	e002      	b.n	8003980 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	68ba      	ldr	r2, [r7, #8]
 800398a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800398c:	2101      	movs	r1, #1
 800398e:	69b8      	ldr	r0, [r7, #24]
 8003990:	f7ff fefe 	bl	8003790 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	78fa      	ldrb	r2, [r7, #3]
 8003998:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800399c:	bf00      	nop
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b08e      	sub	sp, #56	@ 0x38
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
 80039b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80039b2:	2300      	movs	r3, #0
 80039b4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80039ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d10b      	bne.n	80039d8 <xQueueGenericSend+0x34>
	__asm volatile
 80039c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039c4:	f383 8811 	msr	BASEPRI, r3
 80039c8:	f3bf 8f6f 	isb	sy
 80039cc:	f3bf 8f4f 	dsb	sy
 80039d0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80039d2:	bf00      	nop
 80039d4:	bf00      	nop
 80039d6:	e7fd      	b.n	80039d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d103      	bne.n	80039e6 <xQueueGenericSend+0x42>
 80039de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <xQueueGenericSend+0x46>
 80039e6:	2301      	movs	r3, #1
 80039e8:	e000      	b.n	80039ec <xQueueGenericSend+0x48>
 80039ea:	2300      	movs	r3, #0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10b      	bne.n	8003a08 <xQueueGenericSend+0x64>
	__asm volatile
 80039f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039f4:	f383 8811 	msr	BASEPRI, r3
 80039f8:	f3bf 8f6f 	isb	sy
 80039fc:	f3bf 8f4f 	dsb	sy
 8003a00:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003a02:	bf00      	nop
 8003a04:	bf00      	nop
 8003a06:	e7fd      	b.n	8003a04 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d103      	bne.n	8003a16 <xQueueGenericSend+0x72>
 8003a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d101      	bne.n	8003a1a <xQueueGenericSend+0x76>
 8003a16:	2301      	movs	r3, #1
 8003a18:	e000      	b.n	8003a1c <xQueueGenericSend+0x78>
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10b      	bne.n	8003a38 <xQueueGenericSend+0x94>
	__asm volatile
 8003a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a24:	f383 8811 	msr	BASEPRI, r3
 8003a28:	f3bf 8f6f 	isb	sy
 8003a2c:	f3bf 8f4f 	dsb	sy
 8003a30:	623b      	str	r3, [r7, #32]
}
 8003a32:	bf00      	nop
 8003a34:	bf00      	nop
 8003a36:	e7fd      	b.n	8003a34 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a38:	f001 f9fc 	bl	8004e34 <xTaskGetSchedulerState>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d102      	bne.n	8003a48 <xQueueGenericSend+0xa4>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d101      	bne.n	8003a4c <xQueueGenericSend+0xa8>
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e000      	b.n	8003a4e <xQueueGenericSend+0xaa>
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10b      	bne.n	8003a6a <xQueueGenericSend+0xc6>
	__asm volatile
 8003a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a56:	f383 8811 	msr	BASEPRI, r3
 8003a5a:	f3bf 8f6f 	isb	sy
 8003a5e:	f3bf 8f4f 	dsb	sy
 8003a62:	61fb      	str	r3, [r7, #28]
}
 8003a64:	bf00      	nop
 8003a66:	bf00      	nop
 8003a68:	e7fd      	b.n	8003a66 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a6a:	f001 ff4d 	bl	8005908 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d302      	bcc.n	8003a80 <xQueueGenericSend+0xdc>
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d129      	bne.n	8003ad4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	68b9      	ldr	r1, [r7, #8]
 8003a84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a86:	f000 fa0f 	bl	8003ea8 <prvCopyDataToQueue>
 8003a8a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d010      	beq.n	8003ab6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a96:	3324      	adds	r3, #36	@ 0x24
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f001 f805 	bl	8004aa8 <xTaskRemoveFromEventList>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d013      	beq.n	8003acc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003aa4:	4b3f      	ldr	r3, [pc, #252]	@ (8003ba4 <xQueueGenericSend+0x200>)
 8003aa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003aaa:	601a      	str	r2, [r3, #0]
 8003aac:	f3bf 8f4f 	dsb	sy
 8003ab0:	f3bf 8f6f 	isb	sy
 8003ab4:	e00a      	b.n	8003acc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d007      	beq.n	8003acc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003abc:	4b39      	ldr	r3, [pc, #228]	@ (8003ba4 <xQueueGenericSend+0x200>)
 8003abe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	f3bf 8f4f 	dsb	sy
 8003ac8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003acc:	f001 ff4e 	bl	800596c <vPortExitCritical>
				return pdPASS;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e063      	b.n	8003b9c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d103      	bne.n	8003ae2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003ada:	f001 ff47 	bl	800596c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	e05c      	b.n	8003b9c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d106      	bne.n	8003af6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ae8:	f107 0314 	add.w	r3, r7, #20
 8003aec:	4618      	mov	r0, r3
 8003aee:	f001 f83f 	bl	8004b70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003af2:	2301      	movs	r3, #1
 8003af4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003af6:	f001 ff39 	bl	800596c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003afa:	f000 fda7 	bl	800464c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003afe:	f001 ff03 	bl	8005908 <vPortEnterCritical>
 8003b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b08:	b25b      	sxtb	r3, r3
 8003b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b0e:	d103      	bne.n	8003b18 <xQueueGenericSend+0x174>
 8003b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b1a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b1e:	b25b      	sxtb	r3, r3
 8003b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b24:	d103      	bne.n	8003b2e <xQueueGenericSend+0x18a>
 8003b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b2e:	f001 ff1d 	bl	800596c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b32:	1d3a      	adds	r2, r7, #4
 8003b34:	f107 0314 	add.w	r3, r7, #20
 8003b38:	4611      	mov	r1, r2
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f001 f82e 	bl	8004b9c <xTaskCheckForTimeOut>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d124      	bne.n	8003b90 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003b46:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003b48:	f000 faa6 	bl	8004098 <prvIsQueueFull>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d018      	beq.n	8003b84 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b54:	3310      	adds	r3, #16
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	4611      	mov	r1, r2
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 ff52 	bl	8004a04 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003b60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003b62:	f000 fa31 	bl	8003fc8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003b66:	f000 fd7f 	bl	8004668 <xTaskResumeAll>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f47f af7c 	bne.w	8003a6a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003b72:	4b0c      	ldr	r3, [pc, #48]	@ (8003ba4 <xQueueGenericSend+0x200>)
 8003b74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	f3bf 8f4f 	dsb	sy
 8003b7e:	f3bf 8f6f 	isb	sy
 8003b82:	e772      	b.n	8003a6a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003b84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003b86:	f000 fa1f 	bl	8003fc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b8a:	f000 fd6d 	bl	8004668 <xTaskResumeAll>
 8003b8e:	e76c      	b.n	8003a6a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003b90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003b92:	f000 fa19 	bl	8003fc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b96:	f000 fd67 	bl	8004668 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003b9a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3738      	adds	r7, #56	@ 0x38
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	e000ed04 	.word	0xe000ed04

08003ba8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b090      	sub	sp, #64	@ 0x40
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
 8003bb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10b      	bne.n	8003bd8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bc4:	f383 8811 	msr	BASEPRI, r3
 8003bc8:	f3bf 8f6f 	isb	sy
 8003bcc:	f3bf 8f4f 	dsb	sy
 8003bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003bd2:	bf00      	nop
 8003bd4:	bf00      	nop
 8003bd6:	e7fd      	b.n	8003bd4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d103      	bne.n	8003be6 <xQueueGenericSendFromISR+0x3e>
 8003bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <xQueueGenericSendFromISR+0x42>
 8003be6:	2301      	movs	r3, #1
 8003be8:	e000      	b.n	8003bec <xQueueGenericSendFromISR+0x44>
 8003bea:	2300      	movs	r3, #0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10b      	bne.n	8003c08 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bf4:	f383 8811 	msr	BASEPRI, r3
 8003bf8:	f3bf 8f6f 	isb	sy
 8003bfc:	f3bf 8f4f 	dsb	sy
 8003c00:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003c02:	bf00      	nop
 8003c04:	bf00      	nop
 8003c06:	e7fd      	b.n	8003c04 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d103      	bne.n	8003c16 <xQueueGenericSendFromISR+0x6e>
 8003c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d101      	bne.n	8003c1a <xQueueGenericSendFromISR+0x72>
 8003c16:	2301      	movs	r3, #1
 8003c18:	e000      	b.n	8003c1c <xQueueGenericSendFromISR+0x74>
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10b      	bne.n	8003c38 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c24:	f383 8811 	msr	BASEPRI, r3
 8003c28:	f3bf 8f6f 	isb	sy
 8003c2c:	f3bf 8f4f 	dsb	sy
 8003c30:	623b      	str	r3, [r7, #32]
}
 8003c32:	bf00      	nop
 8003c34:	bf00      	nop
 8003c36:	e7fd      	b.n	8003c34 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c38:	f001 ff46 	bl	8005ac8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003c3c:	f3ef 8211 	mrs	r2, BASEPRI
 8003c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c44:	f383 8811 	msr	BASEPRI, r3
 8003c48:	f3bf 8f6f 	isb	sy
 8003c4c:	f3bf 8f4f 	dsb	sy
 8003c50:	61fa      	str	r2, [r7, #28]
 8003c52:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003c54:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c56:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d302      	bcc.n	8003c6a <xQueueGenericSendFromISR+0xc2>
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d12f      	bne.n	8003cca <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c6c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003c70:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	68b9      	ldr	r1, [r7, #8]
 8003c7e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003c80:	f000 f912 	bl	8003ea8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003c84:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c8c:	d112      	bne.n	8003cb4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d016      	beq.n	8003cc4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c98:	3324      	adds	r3, #36	@ 0x24
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 ff04 	bl	8004aa8 <xTaskRemoveFromEventList>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00e      	beq.n	8003cc4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00b      	beq.n	8003cc4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	e007      	b.n	8003cc4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003cb4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003cb8:	3301      	adds	r3, #1
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	b25a      	sxtb	r2, r3
 8003cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003cc8:	e001      	b.n	8003cce <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cd0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003cd8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003cda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3740      	adds	r7, #64	@ 0x40
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b08c      	sub	sp, #48	@ 0x30
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10b      	bne.n	8003d16 <xQueueReceive+0x32>
	__asm volatile
 8003cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d02:	f383 8811 	msr	BASEPRI, r3
 8003d06:	f3bf 8f6f 	isb	sy
 8003d0a:	f3bf 8f4f 	dsb	sy
 8003d0e:	623b      	str	r3, [r7, #32]
}
 8003d10:	bf00      	nop
 8003d12:	bf00      	nop
 8003d14:	e7fd      	b.n	8003d12 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d103      	bne.n	8003d24 <xQueueReceive+0x40>
 8003d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d101      	bne.n	8003d28 <xQueueReceive+0x44>
 8003d24:	2301      	movs	r3, #1
 8003d26:	e000      	b.n	8003d2a <xQueueReceive+0x46>
 8003d28:	2300      	movs	r3, #0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10b      	bne.n	8003d46 <xQueueReceive+0x62>
	__asm volatile
 8003d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d32:	f383 8811 	msr	BASEPRI, r3
 8003d36:	f3bf 8f6f 	isb	sy
 8003d3a:	f3bf 8f4f 	dsb	sy
 8003d3e:	61fb      	str	r3, [r7, #28]
}
 8003d40:	bf00      	nop
 8003d42:	bf00      	nop
 8003d44:	e7fd      	b.n	8003d42 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d46:	f001 f875 	bl	8004e34 <xTaskGetSchedulerState>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d102      	bne.n	8003d56 <xQueueReceive+0x72>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <xQueueReceive+0x76>
 8003d56:	2301      	movs	r3, #1
 8003d58:	e000      	b.n	8003d5c <xQueueReceive+0x78>
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10b      	bne.n	8003d78 <xQueueReceive+0x94>
	__asm volatile
 8003d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d64:	f383 8811 	msr	BASEPRI, r3
 8003d68:	f3bf 8f6f 	isb	sy
 8003d6c:	f3bf 8f4f 	dsb	sy
 8003d70:	61bb      	str	r3, [r7, #24]
}
 8003d72:	bf00      	nop
 8003d74:	bf00      	nop
 8003d76:	e7fd      	b.n	8003d74 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d78:	f001 fdc6 	bl	8005908 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d80:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d01f      	beq.n	8003dc8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003d88:	68b9      	ldr	r1, [r7, #8]
 8003d8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d8c:	f000 f8f6 	bl	8003f7c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d92:	1e5a      	subs	r2, r3, #1
 8003d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d96:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00f      	beq.n	8003dc0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003da2:	3310      	adds	r3, #16
 8003da4:	4618      	mov	r0, r3
 8003da6:	f000 fe7f 	bl	8004aa8 <xTaskRemoveFromEventList>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d007      	beq.n	8003dc0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003db0:	4b3c      	ldr	r3, [pc, #240]	@ (8003ea4 <xQueueReceive+0x1c0>)
 8003db2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003db6:	601a      	str	r2, [r3, #0]
 8003db8:	f3bf 8f4f 	dsb	sy
 8003dbc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003dc0:	f001 fdd4 	bl	800596c <vPortExitCritical>
				return pdPASS;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e069      	b.n	8003e9c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d103      	bne.n	8003dd6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003dce:	f001 fdcd 	bl	800596c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	e062      	b.n	8003e9c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d106      	bne.n	8003dea <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ddc:	f107 0310 	add.w	r3, r7, #16
 8003de0:	4618      	mov	r0, r3
 8003de2:	f000 fec5 	bl	8004b70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003de6:	2301      	movs	r3, #1
 8003de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003dea:	f001 fdbf 	bl	800596c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003dee:	f000 fc2d 	bl	800464c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003df2:	f001 fd89 	bl	8005908 <vPortEnterCritical>
 8003df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003df8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003dfc:	b25b      	sxtb	r3, r3
 8003dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e02:	d103      	bne.n	8003e0c <xQueueReceive+0x128>
 8003e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e0e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e12:	b25b      	sxtb	r3, r3
 8003e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e18:	d103      	bne.n	8003e22 <xQueueReceive+0x13e>
 8003e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e22:	f001 fda3 	bl	800596c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e26:	1d3a      	adds	r2, r7, #4
 8003e28:	f107 0310 	add.w	r3, r7, #16
 8003e2c:	4611      	mov	r1, r2
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f000 feb4 	bl	8004b9c <xTaskCheckForTimeOut>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d123      	bne.n	8003e82 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e3c:	f000 f916 	bl	800406c <prvIsQueueEmpty>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d017      	beq.n	8003e76 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e48:	3324      	adds	r3, #36	@ 0x24
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	4611      	mov	r1, r2
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 fdd8 	bl	8004a04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003e54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e56:	f000 f8b7 	bl	8003fc8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003e5a:	f000 fc05 	bl	8004668 <xTaskResumeAll>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d189      	bne.n	8003d78 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003e64:	4b0f      	ldr	r3, [pc, #60]	@ (8003ea4 <xQueueReceive+0x1c0>)
 8003e66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e6a:	601a      	str	r2, [r3, #0]
 8003e6c:	f3bf 8f4f 	dsb	sy
 8003e70:	f3bf 8f6f 	isb	sy
 8003e74:	e780      	b.n	8003d78 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003e76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e78:	f000 f8a6 	bl	8003fc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e7c:	f000 fbf4 	bl	8004668 <xTaskResumeAll>
 8003e80:	e77a      	b.n	8003d78 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003e82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e84:	f000 f8a0 	bl	8003fc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e88:	f000 fbee 	bl	8004668 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e8e:	f000 f8ed 	bl	800406c <prvIsQueueEmpty>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f43f af6f 	beq.w	8003d78 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003e9a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3730      	adds	r7, #48	@ 0x30
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	e000ed04 	.word	0xe000ed04

08003ea8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ebc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10d      	bne.n	8003ee2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d14d      	bne.n	8003f6a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 ffcc 	bl	8004e70 <xTaskPriorityDisinherit>
 8003ed8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2200      	movs	r2, #0
 8003ede:	609a      	str	r2, [r3, #8]
 8003ee0:	e043      	b.n	8003f6a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d119      	bne.n	8003f1c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6858      	ldr	r0, [r3, #4]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	68b9      	ldr	r1, [r7, #8]
 8003ef4:	f002 f8c2 	bl	800607c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f00:	441a      	add	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d32b      	bcc.n	8003f6a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	605a      	str	r2, [r3, #4]
 8003f1a:	e026      	b.n	8003f6a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	68d8      	ldr	r0, [r3, #12]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f24:	461a      	mov	r2, r3
 8003f26:	68b9      	ldr	r1, [r7, #8]
 8003f28:	f002 f8a8 	bl	800607c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	68da      	ldr	r2, [r3, #12]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f34:	425b      	negs	r3, r3
 8003f36:	441a      	add	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	68da      	ldr	r2, [r3, #12]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d207      	bcs.n	8003f58 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	689a      	ldr	r2, [r3, #8]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f50:	425b      	negs	r3, r3
 8003f52:	441a      	add	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d105      	bne.n	8003f6a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d002      	beq.n	8003f6a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	3b01      	subs	r3, #1
 8003f68:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1c5a      	adds	r2, r3, #1
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003f72:	697b      	ldr	r3, [r7, #20]
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3718      	adds	r7, #24
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d018      	beq.n	8003fc0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f96:	441a      	add	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	68da      	ldr	r2, [r3, #12]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d303      	bcc.n	8003fb0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68d9      	ldr	r1, [r3, #12]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb8:	461a      	mov	r2, r3
 8003fba:	6838      	ldr	r0, [r7, #0]
 8003fbc:	f002 f85e 	bl	800607c <memcpy>
	}
}
 8003fc0:	bf00      	nop
 8003fc2:	3708      	adds	r7, #8
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003fd0:	f001 fc9a 	bl	8005908 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003fda:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003fdc:	e011      	b.n	8004002 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d012      	beq.n	800400c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	3324      	adds	r3, #36	@ 0x24
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 fd5c 	bl	8004aa8 <xTaskRemoveFromEventList>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003ff6:	f000 fe35 	bl	8004c64 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003ffa:	7bfb      	ldrb	r3, [r7, #15]
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004006:	2b00      	cmp	r3, #0
 8004008:	dce9      	bgt.n	8003fde <prvUnlockQueue+0x16>
 800400a:	e000      	b.n	800400e <prvUnlockQueue+0x46>
					break;
 800400c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	22ff      	movs	r2, #255	@ 0xff
 8004012:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004016:	f001 fca9 	bl	800596c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800401a:	f001 fc75 	bl	8005908 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004024:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004026:	e011      	b.n	800404c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d012      	beq.n	8004056 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	3310      	adds	r3, #16
 8004034:	4618      	mov	r0, r3
 8004036:	f000 fd37 	bl	8004aa8 <xTaskRemoveFromEventList>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d001      	beq.n	8004044 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004040:	f000 fe10 	bl	8004c64 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004044:	7bbb      	ldrb	r3, [r7, #14]
 8004046:	3b01      	subs	r3, #1
 8004048:	b2db      	uxtb	r3, r3
 800404a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800404c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004050:	2b00      	cmp	r3, #0
 8004052:	dce9      	bgt.n	8004028 <prvUnlockQueue+0x60>
 8004054:	e000      	b.n	8004058 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004056:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	22ff      	movs	r2, #255	@ 0xff
 800405c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004060:	f001 fc84 	bl	800596c <vPortExitCritical>
}
 8004064:	bf00      	nop
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004074:	f001 fc48 	bl	8005908 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800407c:	2b00      	cmp	r3, #0
 800407e:	d102      	bne.n	8004086 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004080:	2301      	movs	r3, #1
 8004082:	60fb      	str	r3, [r7, #12]
 8004084:	e001      	b.n	800408a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004086:	2300      	movs	r3, #0
 8004088:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800408a:	f001 fc6f 	bl	800596c <vPortExitCritical>

	return xReturn;
 800408e:	68fb      	ldr	r3, [r7, #12]
}
 8004090:	4618      	mov	r0, r3
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80040a0:	f001 fc32 	bl	8005908 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d102      	bne.n	80040b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80040b0:	2301      	movs	r3, #1
 80040b2:	60fb      	str	r3, [r7, #12]
 80040b4:	e001      	b.n	80040ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80040b6:	2300      	movs	r3, #0
 80040b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80040ba:	f001 fc57 	bl	800596c <vPortExitCritical>

	return xReturn;
 80040be:	68fb      	ldr	r3, [r7, #12]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80040d2:	2300      	movs	r3, #0
 80040d4:	60fb      	str	r3, [r7, #12]
 80040d6:	e014      	b.n	8004102 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80040d8:	4a0f      	ldr	r2, [pc, #60]	@ (8004118 <vQueueAddToRegistry+0x50>)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d10b      	bne.n	80040fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80040e4:	490c      	ldr	r1, [pc, #48]	@ (8004118 <vQueueAddToRegistry+0x50>)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80040ee:	4a0a      	ldr	r2, [pc, #40]	@ (8004118 <vQueueAddToRegistry+0x50>)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	4413      	add	r3, r2
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80040fa:	e006      	b.n	800410a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	3301      	adds	r3, #1
 8004100:	60fb      	str	r3, [r7, #12]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2b07      	cmp	r3, #7
 8004106:	d9e7      	bls.n	80040d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004108:	bf00      	nop
 800410a:	bf00      	nop
 800410c:	3714      	adds	r7, #20
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	200008d0 	.word	0x200008d0

0800411c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800412c:	f001 fbec 	bl	8005908 <vPortEnterCritical>
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004136:	b25b      	sxtb	r3, r3
 8004138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800413c:	d103      	bne.n	8004146 <vQueueWaitForMessageRestricted+0x2a>
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800414c:	b25b      	sxtb	r3, r3
 800414e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004152:	d103      	bne.n	800415c <vQueueWaitForMessageRestricted+0x40>
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800415c:	f001 fc06 	bl	800596c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004164:	2b00      	cmp	r3, #0
 8004166:	d106      	bne.n	8004176 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	3324      	adds	r3, #36	@ 0x24
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	68b9      	ldr	r1, [r7, #8]
 8004170:	4618      	mov	r0, r3
 8004172:	f000 fc6d 	bl	8004a50 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004176:	6978      	ldr	r0, [r7, #20]
 8004178:	f7ff ff26 	bl	8003fc8 <prvUnlockQueue>
	}
 800417c:	bf00      	nop
 800417e:	3718      	adds	r7, #24
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004184:	b580      	push	{r7, lr}
 8004186:	b08e      	sub	sp, #56	@ 0x38
 8004188:	af04      	add	r7, sp, #16
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
 8004190:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004194:	2b00      	cmp	r3, #0
 8004196:	d10b      	bne.n	80041b0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800419c:	f383 8811 	msr	BASEPRI, r3
 80041a0:	f3bf 8f6f 	isb	sy
 80041a4:	f3bf 8f4f 	dsb	sy
 80041a8:	623b      	str	r3, [r7, #32]
}
 80041aa:	bf00      	nop
 80041ac:	bf00      	nop
 80041ae:	e7fd      	b.n	80041ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80041b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10b      	bne.n	80041ce <xTaskCreateStatic+0x4a>
	__asm volatile
 80041b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ba:	f383 8811 	msr	BASEPRI, r3
 80041be:	f3bf 8f6f 	isb	sy
 80041c2:	f3bf 8f4f 	dsb	sy
 80041c6:	61fb      	str	r3, [r7, #28]
}
 80041c8:	bf00      	nop
 80041ca:	bf00      	nop
 80041cc:	e7fd      	b.n	80041ca <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80041ce:	23a8      	movs	r3, #168	@ 0xa8
 80041d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	2ba8      	cmp	r3, #168	@ 0xa8
 80041d6:	d00b      	beq.n	80041f0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80041d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041dc:	f383 8811 	msr	BASEPRI, r3
 80041e0:	f3bf 8f6f 	isb	sy
 80041e4:	f3bf 8f4f 	dsb	sy
 80041e8:	61bb      	str	r3, [r7, #24]
}
 80041ea:	bf00      	nop
 80041ec:	bf00      	nop
 80041ee:	e7fd      	b.n	80041ec <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80041f0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80041f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d01e      	beq.n	8004236 <xTaskCreateStatic+0xb2>
 80041f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d01b      	beq.n	8004236 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80041fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004200:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004204:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004206:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420a:	2202      	movs	r2, #2
 800420c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004210:	2300      	movs	r3, #0
 8004212:	9303      	str	r3, [sp, #12]
 8004214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004216:	9302      	str	r3, [sp, #8]
 8004218:	f107 0314 	add.w	r3, r7, #20
 800421c:	9301      	str	r3, [sp, #4]
 800421e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004220:	9300      	str	r3, [sp, #0]
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	68b9      	ldr	r1, [r7, #8]
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f000 f851 	bl	80042d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800422e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004230:	f000 f8f6 	bl	8004420 <prvAddNewTaskToReadyList>
 8004234:	e001      	b.n	800423a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004236:	2300      	movs	r3, #0
 8004238:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800423a:	697b      	ldr	r3, [r7, #20]
	}
 800423c:	4618      	mov	r0, r3
 800423e:	3728      	adds	r7, #40	@ 0x28
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004244:	b580      	push	{r7, lr}
 8004246:	b08c      	sub	sp, #48	@ 0x30
 8004248:	af04      	add	r7, sp, #16
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	603b      	str	r3, [r7, #0]
 8004250:	4613      	mov	r3, r2
 8004252:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004254:	88fb      	ldrh	r3, [r7, #6]
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	4618      	mov	r0, r3
 800425a:	f001 fc77 	bl	8005b4c <pvPortMalloc>
 800425e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00e      	beq.n	8004284 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004266:	20a8      	movs	r0, #168	@ 0xa8
 8004268:	f001 fc70 	bl	8005b4c <pvPortMalloc>
 800426c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d003      	beq.n	800427c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	631a      	str	r2, [r3, #48]	@ 0x30
 800427a:	e005      	b.n	8004288 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800427c:	6978      	ldr	r0, [r7, #20]
 800427e:	f001 fd33 	bl	8005ce8 <vPortFree>
 8004282:	e001      	b.n	8004288 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004284:	2300      	movs	r3, #0
 8004286:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d017      	beq.n	80042be <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004296:	88fa      	ldrh	r2, [r7, #6]
 8004298:	2300      	movs	r3, #0
 800429a:	9303      	str	r3, [sp, #12]
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	9302      	str	r3, [sp, #8]
 80042a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042a2:	9301      	str	r3, [sp, #4]
 80042a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042a6:	9300      	str	r3, [sp, #0]
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	68b9      	ldr	r1, [r7, #8]
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f000 f80f 	bl	80042d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042b2:	69f8      	ldr	r0, [r7, #28]
 80042b4:	f000 f8b4 	bl	8004420 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80042b8:	2301      	movs	r3, #1
 80042ba:	61bb      	str	r3, [r7, #24]
 80042bc:	e002      	b.n	80042c4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80042be:	f04f 33ff 	mov.w	r3, #4294967295
 80042c2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80042c4:	69bb      	ldr	r3, [r7, #24]
	}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3720      	adds	r7, #32
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
	...

080042d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b088      	sub	sp, #32
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
 80042dc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80042de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	461a      	mov	r2, r3
 80042e8:	21a5      	movs	r1, #165	@ 0xa5
 80042ea:	f001 fe3d 	bl	8005f68 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80042ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80042f8:	3b01      	subs	r3, #1
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4413      	add	r3, r2
 80042fe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	f023 0307 	bic.w	r3, r3, #7
 8004306:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	f003 0307 	and.w	r3, r3, #7
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00b      	beq.n	800432a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004316:	f383 8811 	msr	BASEPRI, r3
 800431a:	f3bf 8f6f 	isb	sy
 800431e:	f3bf 8f4f 	dsb	sy
 8004322:	617b      	str	r3, [r7, #20]
}
 8004324:	bf00      	nop
 8004326:	bf00      	nop
 8004328:	e7fd      	b.n	8004326 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d01f      	beq.n	8004370 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004330:	2300      	movs	r3, #0
 8004332:	61fb      	str	r3, [r7, #28]
 8004334:	e012      	b.n	800435c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	4413      	add	r3, r2
 800433c:	7819      	ldrb	r1, [r3, #0]
 800433e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	4413      	add	r3, r2
 8004344:	3334      	adds	r3, #52	@ 0x34
 8004346:	460a      	mov	r2, r1
 8004348:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800434a:	68ba      	ldr	r2, [r7, #8]
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	4413      	add	r3, r2
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d006      	beq.n	8004364 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	3301      	adds	r3, #1
 800435a:	61fb      	str	r3, [r7, #28]
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	2b0f      	cmp	r3, #15
 8004360:	d9e9      	bls.n	8004336 <prvInitialiseNewTask+0x66>
 8004362:	e000      	b.n	8004366 <prvInitialiseNewTask+0x96>
			{
				break;
 8004364:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800436e:	e003      	b.n	8004378 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004372:	2200      	movs	r2, #0
 8004374:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800437a:	2b37      	cmp	r3, #55	@ 0x37
 800437c:	d901      	bls.n	8004382 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800437e:	2337      	movs	r3, #55	@ 0x37
 8004380:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004384:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004386:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800438a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800438c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800438e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004390:	2200      	movs	r2, #0
 8004392:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004396:	3304      	adds	r3, #4
 8004398:	4618      	mov	r0, r3
 800439a:	f7ff f965 	bl	8003668 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800439e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043a0:	3318      	adds	r3, #24
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7ff f960 	bl	8003668 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80043a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043ac:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043b0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80043b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80043b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043bc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80043be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c0:	2200      	movs	r2, #0
 80043c2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80043c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80043ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d0:	3354      	adds	r3, #84	@ 0x54
 80043d2:	224c      	movs	r2, #76	@ 0x4c
 80043d4:	2100      	movs	r1, #0
 80043d6:	4618      	mov	r0, r3
 80043d8:	f001 fdc6 	bl	8005f68 <memset>
 80043dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043de:	4a0d      	ldr	r2, [pc, #52]	@ (8004414 <prvInitialiseNewTask+0x144>)
 80043e0:	659a      	str	r2, [r3, #88]	@ 0x58
 80043e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e4:	4a0c      	ldr	r2, [pc, #48]	@ (8004418 <prvInitialiseNewTask+0x148>)
 80043e6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80043e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ea:	4a0c      	ldr	r2, [pc, #48]	@ (800441c <prvInitialiseNewTask+0x14c>)
 80043ec:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80043ee:	683a      	ldr	r2, [r7, #0]
 80043f0:	68f9      	ldr	r1, [r7, #12]
 80043f2:	69b8      	ldr	r0, [r7, #24]
 80043f4:	f001 f95a 	bl	80056ac <pxPortInitialiseStack>
 80043f8:	4602      	mov	r2, r0
 80043fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043fc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80043fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004400:	2b00      	cmp	r3, #0
 8004402:	d002      	beq.n	800440a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004406:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004408:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800440a:	bf00      	nop
 800440c:	3720      	adds	r7, #32
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	20004b64 	.word	0x20004b64
 8004418:	20004bcc 	.word	0x20004bcc
 800441c:	20004c34 	.word	0x20004c34

08004420 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004428:	f001 fa6e 	bl	8005908 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800442c:	4b2d      	ldr	r3, [pc, #180]	@ (80044e4 <prvAddNewTaskToReadyList+0xc4>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	3301      	adds	r3, #1
 8004432:	4a2c      	ldr	r2, [pc, #176]	@ (80044e4 <prvAddNewTaskToReadyList+0xc4>)
 8004434:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004436:	4b2c      	ldr	r3, [pc, #176]	@ (80044e8 <prvAddNewTaskToReadyList+0xc8>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d109      	bne.n	8004452 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800443e:	4a2a      	ldr	r2, [pc, #168]	@ (80044e8 <prvAddNewTaskToReadyList+0xc8>)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004444:	4b27      	ldr	r3, [pc, #156]	@ (80044e4 <prvAddNewTaskToReadyList+0xc4>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d110      	bne.n	800446e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800444c:	f000 fc2e 	bl	8004cac <prvInitialiseTaskLists>
 8004450:	e00d      	b.n	800446e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004452:	4b26      	ldr	r3, [pc, #152]	@ (80044ec <prvAddNewTaskToReadyList+0xcc>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d109      	bne.n	800446e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800445a:	4b23      	ldr	r3, [pc, #140]	@ (80044e8 <prvAddNewTaskToReadyList+0xc8>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004464:	429a      	cmp	r2, r3
 8004466:	d802      	bhi.n	800446e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004468:	4a1f      	ldr	r2, [pc, #124]	@ (80044e8 <prvAddNewTaskToReadyList+0xc8>)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800446e:	4b20      	ldr	r3, [pc, #128]	@ (80044f0 <prvAddNewTaskToReadyList+0xd0>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	3301      	adds	r3, #1
 8004474:	4a1e      	ldr	r2, [pc, #120]	@ (80044f0 <prvAddNewTaskToReadyList+0xd0>)
 8004476:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004478:	4b1d      	ldr	r3, [pc, #116]	@ (80044f0 <prvAddNewTaskToReadyList+0xd0>)
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004484:	4b1b      	ldr	r3, [pc, #108]	@ (80044f4 <prvAddNewTaskToReadyList+0xd4>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	429a      	cmp	r2, r3
 800448a:	d903      	bls.n	8004494 <prvAddNewTaskToReadyList+0x74>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004490:	4a18      	ldr	r2, [pc, #96]	@ (80044f4 <prvAddNewTaskToReadyList+0xd4>)
 8004492:	6013      	str	r3, [r2, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004498:	4613      	mov	r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4413      	add	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	4a15      	ldr	r2, [pc, #84]	@ (80044f8 <prvAddNewTaskToReadyList+0xd8>)
 80044a2:	441a      	add	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	3304      	adds	r3, #4
 80044a8:	4619      	mov	r1, r3
 80044aa:	4610      	mov	r0, r2
 80044ac:	f7ff f8e9 	bl	8003682 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80044b0:	f001 fa5c 	bl	800596c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80044b4:	4b0d      	ldr	r3, [pc, #52]	@ (80044ec <prvAddNewTaskToReadyList+0xcc>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00e      	beq.n	80044da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80044bc:	4b0a      	ldr	r3, [pc, #40]	@ (80044e8 <prvAddNewTaskToReadyList+0xc8>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d207      	bcs.n	80044da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80044ca:	4b0c      	ldr	r3, [pc, #48]	@ (80044fc <prvAddNewTaskToReadyList+0xdc>)
 80044cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044d0:	601a      	str	r2, [r3, #0]
 80044d2:	f3bf 8f4f 	dsb	sy
 80044d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044da:	bf00      	nop
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	20000de4 	.word	0x20000de4
 80044e8:	20000910 	.word	0x20000910
 80044ec:	20000df0 	.word	0x20000df0
 80044f0:	20000e00 	.word	0x20000e00
 80044f4:	20000dec 	.word	0x20000dec
 80044f8:	20000914 	.word	0x20000914
 80044fc:	e000ed04 	.word	0xe000ed04

08004500 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004508:	2300      	movs	r3, #0
 800450a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d018      	beq.n	8004544 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004512:	4b14      	ldr	r3, [pc, #80]	@ (8004564 <vTaskDelay+0x64>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00b      	beq.n	8004532 <vTaskDelay+0x32>
	__asm volatile
 800451a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800451e:	f383 8811 	msr	BASEPRI, r3
 8004522:	f3bf 8f6f 	isb	sy
 8004526:	f3bf 8f4f 	dsb	sy
 800452a:	60bb      	str	r3, [r7, #8]
}
 800452c:	bf00      	nop
 800452e:	bf00      	nop
 8004530:	e7fd      	b.n	800452e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004532:	f000 f88b 	bl	800464c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004536:	2100      	movs	r1, #0
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 fd09 	bl	8004f50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800453e:	f000 f893 	bl	8004668 <xTaskResumeAll>
 8004542:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d107      	bne.n	800455a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800454a:	4b07      	ldr	r3, [pc, #28]	@ (8004568 <vTaskDelay+0x68>)
 800454c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004550:	601a      	str	r2, [r3, #0]
 8004552:	f3bf 8f4f 	dsb	sy
 8004556:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800455a:	bf00      	nop
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	20000e0c 	.word	0x20000e0c
 8004568:	e000ed04 	.word	0xe000ed04

0800456c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b08a      	sub	sp, #40	@ 0x28
 8004570:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004572:	2300      	movs	r3, #0
 8004574:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004576:	2300      	movs	r3, #0
 8004578:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800457a:	463a      	mov	r2, r7
 800457c:	1d39      	adds	r1, r7, #4
 800457e:	f107 0308 	add.w	r3, r7, #8
 8004582:	4618      	mov	r0, r3
 8004584:	f7ff f81c 	bl	80035c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004588:	6839      	ldr	r1, [r7, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	9202      	str	r2, [sp, #8]
 8004590:	9301      	str	r3, [sp, #4]
 8004592:	2300      	movs	r3, #0
 8004594:	9300      	str	r3, [sp, #0]
 8004596:	2300      	movs	r3, #0
 8004598:	460a      	mov	r2, r1
 800459a:	4924      	ldr	r1, [pc, #144]	@ (800462c <vTaskStartScheduler+0xc0>)
 800459c:	4824      	ldr	r0, [pc, #144]	@ (8004630 <vTaskStartScheduler+0xc4>)
 800459e:	f7ff fdf1 	bl	8004184 <xTaskCreateStatic>
 80045a2:	4603      	mov	r3, r0
 80045a4:	4a23      	ldr	r2, [pc, #140]	@ (8004634 <vTaskStartScheduler+0xc8>)
 80045a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80045a8:	4b22      	ldr	r3, [pc, #136]	@ (8004634 <vTaskStartScheduler+0xc8>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d002      	beq.n	80045b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80045b0:	2301      	movs	r3, #1
 80045b2:	617b      	str	r3, [r7, #20]
 80045b4:	e001      	b.n	80045ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80045b6:	2300      	movs	r3, #0
 80045b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d102      	bne.n	80045c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80045c0:	f000 fd1a 	bl	8004ff8 <xTimerCreateTimerTask>
 80045c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d11b      	bne.n	8004604 <vTaskStartScheduler+0x98>
	__asm volatile
 80045cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045d0:	f383 8811 	msr	BASEPRI, r3
 80045d4:	f3bf 8f6f 	isb	sy
 80045d8:	f3bf 8f4f 	dsb	sy
 80045dc:	613b      	str	r3, [r7, #16]
}
 80045de:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80045e0:	4b15      	ldr	r3, [pc, #84]	@ (8004638 <vTaskStartScheduler+0xcc>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	3354      	adds	r3, #84	@ 0x54
 80045e6:	4a15      	ldr	r2, [pc, #84]	@ (800463c <vTaskStartScheduler+0xd0>)
 80045e8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80045ea:	4b15      	ldr	r3, [pc, #84]	@ (8004640 <vTaskStartScheduler+0xd4>)
 80045ec:	f04f 32ff 	mov.w	r2, #4294967295
 80045f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80045f2:	4b14      	ldr	r3, [pc, #80]	@ (8004644 <vTaskStartScheduler+0xd8>)
 80045f4:	2201      	movs	r2, #1
 80045f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80045f8:	4b13      	ldr	r3, [pc, #76]	@ (8004648 <vTaskStartScheduler+0xdc>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80045fe:	f001 f8df 	bl	80057c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004602:	e00f      	b.n	8004624 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800460a:	d10b      	bne.n	8004624 <vTaskStartScheduler+0xb8>
	__asm volatile
 800460c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004610:	f383 8811 	msr	BASEPRI, r3
 8004614:	f3bf 8f6f 	isb	sy
 8004618:	f3bf 8f4f 	dsb	sy
 800461c:	60fb      	str	r3, [r7, #12]
}
 800461e:	bf00      	nop
 8004620:	bf00      	nop
 8004622:	e7fd      	b.n	8004620 <vTaskStartScheduler+0xb4>
}
 8004624:	bf00      	nop
 8004626:	3718      	adds	r7, #24
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	0800699c 	.word	0x0800699c
 8004630:	08004c7d 	.word	0x08004c7d
 8004634:	20000e08 	.word	0x20000e08
 8004638:	20000910 	.word	0x20000910
 800463c:	20000010 	.word	0x20000010
 8004640:	20000e04 	.word	0x20000e04
 8004644:	20000df0 	.word	0x20000df0
 8004648:	20000de8 	.word	0x20000de8

0800464c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800464c:	b480      	push	{r7}
 800464e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004650:	4b04      	ldr	r3, [pc, #16]	@ (8004664 <vTaskSuspendAll+0x18>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	3301      	adds	r3, #1
 8004656:	4a03      	ldr	r2, [pc, #12]	@ (8004664 <vTaskSuspendAll+0x18>)
 8004658:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800465a:	bf00      	nop
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr
 8004664:	20000e0c 	.word	0x20000e0c

08004668 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800466e:	2300      	movs	r3, #0
 8004670:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004672:	2300      	movs	r3, #0
 8004674:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004676:	4b42      	ldr	r3, [pc, #264]	@ (8004780 <xTaskResumeAll+0x118>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10b      	bne.n	8004696 <xTaskResumeAll+0x2e>
	__asm volatile
 800467e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004682:	f383 8811 	msr	BASEPRI, r3
 8004686:	f3bf 8f6f 	isb	sy
 800468a:	f3bf 8f4f 	dsb	sy
 800468e:	603b      	str	r3, [r7, #0]
}
 8004690:	bf00      	nop
 8004692:	bf00      	nop
 8004694:	e7fd      	b.n	8004692 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004696:	f001 f937 	bl	8005908 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800469a:	4b39      	ldr	r3, [pc, #228]	@ (8004780 <xTaskResumeAll+0x118>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	3b01      	subs	r3, #1
 80046a0:	4a37      	ldr	r2, [pc, #220]	@ (8004780 <xTaskResumeAll+0x118>)
 80046a2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046a4:	4b36      	ldr	r3, [pc, #216]	@ (8004780 <xTaskResumeAll+0x118>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d162      	bne.n	8004772 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80046ac:	4b35      	ldr	r3, [pc, #212]	@ (8004784 <xTaskResumeAll+0x11c>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d05e      	beq.n	8004772 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046b4:	e02f      	b.n	8004716 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046b6:	4b34      	ldr	r3, [pc, #208]	@ (8004788 <xTaskResumeAll+0x120>)
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	3318      	adds	r3, #24
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7ff f83a 	bl	800373c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	3304      	adds	r3, #4
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7ff f835 	bl	800373c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046d6:	4b2d      	ldr	r3, [pc, #180]	@ (800478c <xTaskResumeAll+0x124>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d903      	bls.n	80046e6 <xTaskResumeAll+0x7e>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e2:	4a2a      	ldr	r2, [pc, #168]	@ (800478c <xTaskResumeAll+0x124>)
 80046e4:	6013      	str	r3, [r2, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046ea:	4613      	mov	r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	4413      	add	r3, r2
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	4a27      	ldr	r2, [pc, #156]	@ (8004790 <xTaskResumeAll+0x128>)
 80046f4:	441a      	add	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	3304      	adds	r3, #4
 80046fa:	4619      	mov	r1, r3
 80046fc:	4610      	mov	r0, r2
 80046fe:	f7fe ffc0 	bl	8003682 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004706:	4b23      	ldr	r3, [pc, #140]	@ (8004794 <xTaskResumeAll+0x12c>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800470c:	429a      	cmp	r2, r3
 800470e:	d302      	bcc.n	8004716 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004710:	4b21      	ldr	r3, [pc, #132]	@ (8004798 <xTaskResumeAll+0x130>)
 8004712:	2201      	movs	r2, #1
 8004714:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004716:	4b1c      	ldr	r3, [pc, #112]	@ (8004788 <xTaskResumeAll+0x120>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1cb      	bne.n	80046b6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d001      	beq.n	8004728 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004724:	f000 fb66 	bl	8004df4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004728:	4b1c      	ldr	r3, [pc, #112]	@ (800479c <xTaskResumeAll+0x134>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d010      	beq.n	8004756 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004734:	f000 f846 	bl	80047c4 <xTaskIncrementTick>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d002      	beq.n	8004744 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800473e:	4b16      	ldr	r3, [pc, #88]	@ (8004798 <xTaskResumeAll+0x130>)
 8004740:	2201      	movs	r2, #1
 8004742:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	3b01      	subs	r3, #1
 8004748:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1f1      	bne.n	8004734 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004750:	4b12      	ldr	r3, [pc, #72]	@ (800479c <xTaskResumeAll+0x134>)
 8004752:	2200      	movs	r2, #0
 8004754:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004756:	4b10      	ldr	r3, [pc, #64]	@ (8004798 <xTaskResumeAll+0x130>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d009      	beq.n	8004772 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800475e:	2301      	movs	r3, #1
 8004760:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004762:	4b0f      	ldr	r3, [pc, #60]	@ (80047a0 <xTaskResumeAll+0x138>)
 8004764:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004768:	601a      	str	r2, [r3, #0]
 800476a:	f3bf 8f4f 	dsb	sy
 800476e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004772:	f001 f8fb 	bl	800596c <vPortExitCritical>

	return xAlreadyYielded;
 8004776:	68bb      	ldr	r3, [r7, #8]
}
 8004778:	4618      	mov	r0, r3
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	20000e0c 	.word	0x20000e0c
 8004784:	20000de4 	.word	0x20000de4
 8004788:	20000da4 	.word	0x20000da4
 800478c:	20000dec 	.word	0x20000dec
 8004790:	20000914 	.word	0x20000914
 8004794:	20000910 	.word	0x20000910
 8004798:	20000df8 	.word	0x20000df8
 800479c:	20000df4 	.word	0x20000df4
 80047a0:	e000ed04 	.word	0xe000ed04

080047a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80047aa:	4b05      	ldr	r3, [pc, #20]	@ (80047c0 <xTaskGetTickCount+0x1c>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80047b0:	687b      	ldr	r3, [r7, #4]
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	370c      	adds	r7, #12
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	20000de8 	.word	0x20000de8

080047c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80047ca:	2300      	movs	r3, #0
 80047cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047ce:	4b4f      	ldr	r3, [pc, #316]	@ (800490c <xTaskIncrementTick+0x148>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f040 8090 	bne.w	80048f8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80047d8:	4b4d      	ldr	r3, [pc, #308]	@ (8004910 <xTaskIncrementTick+0x14c>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	3301      	adds	r3, #1
 80047de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80047e0:	4a4b      	ldr	r2, [pc, #300]	@ (8004910 <xTaskIncrementTick+0x14c>)
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d121      	bne.n	8004830 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80047ec:	4b49      	ldr	r3, [pc, #292]	@ (8004914 <xTaskIncrementTick+0x150>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00b      	beq.n	800480e <xTaskIncrementTick+0x4a>
	__asm volatile
 80047f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047fa:	f383 8811 	msr	BASEPRI, r3
 80047fe:	f3bf 8f6f 	isb	sy
 8004802:	f3bf 8f4f 	dsb	sy
 8004806:	603b      	str	r3, [r7, #0]
}
 8004808:	bf00      	nop
 800480a:	bf00      	nop
 800480c:	e7fd      	b.n	800480a <xTaskIncrementTick+0x46>
 800480e:	4b41      	ldr	r3, [pc, #260]	@ (8004914 <xTaskIncrementTick+0x150>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	60fb      	str	r3, [r7, #12]
 8004814:	4b40      	ldr	r3, [pc, #256]	@ (8004918 <xTaskIncrementTick+0x154>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a3e      	ldr	r2, [pc, #248]	@ (8004914 <xTaskIncrementTick+0x150>)
 800481a:	6013      	str	r3, [r2, #0]
 800481c:	4a3e      	ldr	r2, [pc, #248]	@ (8004918 <xTaskIncrementTick+0x154>)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6013      	str	r3, [r2, #0]
 8004822:	4b3e      	ldr	r3, [pc, #248]	@ (800491c <xTaskIncrementTick+0x158>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	3301      	adds	r3, #1
 8004828:	4a3c      	ldr	r2, [pc, #240]	@ (800491c <xTaskIncrementTick+0x158>)
 800482a:	6013      	str	r3, [r2, #0]
 800482c:	f000 fae2 	bl	8004df4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004830:	4b3b      	ldr	r3, [pc, #236]	@ (8004920 <xTaskIncrementTick+0x15c>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	429a      	cmp	r2, r3
 8004838:	d349      	bcc.n	80048ce <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800483a:	4b36      	ldr	r3, [pc, #216]	@ (8004914 <xTaskIncrementTick+0x150>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d104      	bne.n	800484e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004844:	4b36      	ldr	r3, [pc, #216]	@ (8004920 <xTaskIncrementTick+0x15c>)
 8004846:	f04f 32ff 	mov.w	r2, #4294967295
 800484a:	601a      	str	r2, [r3, #0]
					break;
 800484c:	e03f      	b.n	80048ce <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800484e:	4b31      	ldr	r3, [pc, #196]	@ (8004914 <xTaskIncrementTick+0x150>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	429a      	cmp	r2, r3
 8004864:	d203      	bcs.n	800486e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004866:	4a2e      	ldr	r2, [pc, #184]	@ (8004920 <xTaskIncrementTick+0x15c>)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800486c:	e02f      	b.n	80048ce <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	3304      	adds	r3, #4
 8004872:	4618      	mov	r0, r3
 8004874:	f7fe ff62 	bl	800373c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800487c:	2b00      	cmp	r3, #0
 800487e:	d004      	beq.n	800488a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	3318      	adds	r3, #24
 8004884:	4618      	mov	r0, r3
 8004886:	f7fe ff59 	bl	800373c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800488e:	4b25      	ldr	r3, [pc, #148]	@ (8004924 <xTaskIncrementTick+0x160>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	429a      	cmp	r2, r3
 8004894:	d903      	bls.n	800489e <xTaskIncrementTick+0xda>
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800489a:	4a22      	ldr	r2, [pc, #136]	@ (8004924 <xTaskIncrementTick+0x160>)
 800489c:	6013      	str	r3, [r2, #0]
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048a2:	4613      	mov	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4413      	add	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4a1f      	ldr	r2, [pc, #124]	@ (8004928 <xTaskIncrementTick+0x164>)
 80048ac:	441a      	add	r2, r3
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	3304      	adds	r3, #4
 80048b2:	4619      	mov	r1, r3
 80048b4:	4610      	mov	r0, r2
 80048b6:	f7fe fee4 	bl	8003682 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048be:	4b1b      	ldr	r3, [pc, #108]	@ (800492c <xTaskIncrementTick+0x168>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d3b8      	bcc.n	800483a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80048c8:	2301      	movs	r3, #1
 80048ca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048cc:	e7b5      	b.n	800483a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80048ce:	4b17      	ldr	r3, [pc, #92]	@ (800492c <xTaskIncrementTick+0x168>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048d4:	4914      	ldr	r1, [pc, #80]	@ (8004928 <xTaskIncrementTick+0x164>)
 80048d6:	4613      	mov	r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	4413      	add	r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	440b      	add	r3, r1
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d901      	bls.n	80048ea <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80048e6:	2301      	movs	r3, #1
 80048e8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80048ea:	4b11      	ldr	r3, [pc, #68]	@ (8004930 <xTaskIncrementTick+0x16c>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d007      	beq.n	8004902 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80048f2:	2301      	movs	r3, #1
 80048f4:	617b      	str	r3, [r7, #20]
 80048f6:	e004      	b.n	8004902 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80048f8:	4b0e      	ldr	r3, [pc, #56]	@ (8004934 <xTaskIncrementTick+0x170>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	3301      	adds	r3, #1
 80048fe:	4a0d      	ldr	r2, [pc, #52]	@ (8004934 <xTaskIncrementTick+0x170>)
 8004900:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004902:	697b      	ldr	r3, [r7, #20]
}
 8004904:	4618      	mov	r0, r3
 8004906:	3718      	adds	r7, #24
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	20000e0c 	.word	0x20000e0c
 8004910:	20000de8 	.word	0x20000de8
 8004914:	20000d9c 	.word	0x20000d9c
 8004918:	20000da0 	.word	0x20000da0
 800491c:	20000dfc 	.word	0x20000dfc
 8004920:	20000e04 	.word	0x20000e04
 8004924:	20000dec 	.word	0x20000dec
 8004928:	20000914 	.word	0x20000914
 800492c:	20000910 	.word	0x20000910
 8004930:	20000df8 	.word	0x20000df8
 8004934:	20000df4 	.word	0x20000df4

08004938 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800493e:	4b2b      	ldr	r3, [pc, #172]	@ (80049ec <vTaskSwitchContext+0xb4>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d003      	beq.n	800494e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004946:	4b2a      	ldr	r3, [pc, #168]	@ (80049f0 <vTaskSwitchContext+0xb8>)
 8004948:	2201      	movs	r2, #1
 800494a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800494c:	e047      	b.n	80049de <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800494e:	4b28      	ldr	r3, [pc, #160]	@ (80049f0 <vTaskSwitchContext+0xb8>)
 8004950:	2200      	movs	r2, #0
 8004952:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004954:	4b27      	ldr	r3, [pc, #156]	@ (80049f4 <vTaskSwitchContext+0xbc>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	60fb      	str	r3, [r7, #12]
 800495a:	e011      	b.n	8004980 <vTaskSwitchContext+0x48>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d10b      	bne.n	800497a <vTaskSwitchContext+0x42>
	__asm volatile
 8004962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004966:	f383 8811 	msr	BASEPRI, r3
 800496a:	f3bf 8f6f 	isb	sy
 800496e:	f3bf 8f4f 	dsb	sy
 8004972:	607b      	str	r3, [r7, #4]
}
 8004974:	bf00      	nop
 8004976:	bf00      	nop
 8004978:	e7fd      	b.n	8004976 <vTaskSwitchContext+0x3e>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	3b01      	subs	r3, #1
 800497e:	60fb      	str	r3, [r7, #12]
 8004980:	491d      	ldr	r1, [pc, #116]	@ (80049f8 <vTaskSwitchContext+0xc0>)
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	4613      	mov	r3, r2
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	4413      	add	r3, r2
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	440b      	add	r3, r1
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d0e3      	beq.n	800495c <vTaskSwitchContext+0x24>
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	4613      	mov	r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	4413      	add	r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	4a16      	ldr	r2, [pc, #88]	@ (80049f8 <vTaskSwitchContext+0xc0>)
 80049a0:	4413      	add	r3, r2
 80049a2:	60bb      	str	r3, [r7, #8]
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	685a      	ldr	r2, [r3, #4]
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	605a      	str	r2, [r3, #4]
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	685a      	ldr	r2, [r3, #4]
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	3308      	adds	r3, #8
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d104      	bne.n	80049c4 <vTaskSwitchContext+0x8c>
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	685a      	ldr	r2, [r3, #4]
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	605a      	str	r2, [r3, #4]
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	4a0c      	ldr	r2, [pc, #48]	@ (80049fc <vTaskSwitchContext+0xc4>)
 80049cc:	6013      	str	r3, [r2, #0]
 80049ce:	4a09      	ldr	r2, [pc, #36]	@ (80049f4 <vTaskSwitchContext+0xbc>)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80049d4:	4b09      	ldr	r3, [pc, #36]	@ (80049fc <vTaskSwitchContext+0xc4>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	3354      	adds	r3, #84	@ 0x54
 80049da:	4a09      	ldr	r2, [pc, #36]	@ (8004a00 <vTaskSwitchContext+0xc8>)
 80049dc:	6013      	str	r3, [r2, #0]
}
 80049de:	bf00      	nop
 80049e0:	3714      	adds	r7, #20
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	20000e0c 	.word	0x20000e0c
 80049f0:	20000df8 	.word	0x20000df8
 80049f4:	20000dec 	.word	0x20000dec
 80049f8:	20000914 	.word	0x20000914
 80049fc:	20000910 	.word	0x20000910
 8004a00:	20000010 	.word	0x20000010

08004a04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d10b      	bne.n	8004a2c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a18:	f383 8811 	msr	BASEPRI, r3
 8004a1c:	f3bf 8f6f 	isb	sy
 8004a20:	f3bf 8f4f 	dsb	sy
 8004a24:	60fb      	str	r3, [r7, #12]
}
 8004a26:	bf00      	nop
 8004a28:	bf00      	nop
 8004a2a:	e7fd      	b.n	8004a28 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a2c:	4b07      	ldr	r3, [pc, #28]	@ (8004a4c <vTaskPlaceOnEventList+0x48>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	3318      	adds	r3, #24
 8004a32:	4619      	mov	r1, r3
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f7fe fe48 	bl	80036ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004a3a:	2101      	movs	r1, #1
 8004a3c:	6838      	ldr	r0, [r7, #0]
 8004a3e:	f000 fa87 	bl	8004f50 <prvAddCurrentTaskToDelayedList>
}
 8004a42:	bf00      	nop
 8004a44:	3710      	adds	r7, #16
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	20000910 	.word	0x20000910

08004a50 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b086      	sub	sp, #24
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10b      	bne.n	8004a7a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a66:	f383 8811 	msr	BASEPRI, r3
 8004a6a:	f3bf 8f6f 	isb	sy
 8004a6e:	f3bf 8f4f 	dsb	sy
 8004a72:	617b      	str	r3, [r7, #20]
}
 8004a74:	bf00      	nop
 8004a76:	bf00      	nop
 8004a78:	e7fd      	b.n	8004a76 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8004aa4 <vTaskPlaceOnEventListRestricted+0x54>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	3318      	adds	r3, #24
 8004a80:	4619      	mov	r1, r3
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f7fe fdfd 	bl	8003682 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d002      	beq.n	8004a94 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8004a92:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004a94:	6879      	ldr	r1, [r7, #4]
 8004a96:	68b8      	ldr	r0, [r7, #8]
 8004a98:	f000 fa5a 	bl	8004f50 <prvAddCurrentTaskToDelayedList>
	}
 8004a9c:	bf00      	nop
 8004a9e:	3718      	adds	r7, #24
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	20000910 	.word	0x20000910

08004aa8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b086      	sub	sp, #24
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d10b      	bne.n	8004ad6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ac2:	f383 8811 	msr	BASEPRI, r3
 8004ac6:	f3bf 8f6f 	isb	sy
 8004aca:	f3bf 8f4f 	dsb	sy
 8004ace:	60fb      	str	r3, [r7, #12]
}
 8004ad0:	bf00      	nop
 8004ad2:	bf00      	nop
 8004ad4:	e7fd      	b.n	8004ad2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	3318      	adds	r3, #24
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7fe fe2e 	bl	800373c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8004b58 <xTaskRemoveFromEventList+0xb0>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d11d      	bne.n	8004b24 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	3304      	adds	r3, #4
 8004aec:	4618      	mov	r0, r3
 8004aee:	f7fe fe25 	bl	800373c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004af6:	4b19      	ldr	r3, [pc, #100]	@ (8004b5c <xTaskRemoveFromEventList+0xb4>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d903      	bls.n	8004b06 <xTaskRemoveFromEventList+0x5e>
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b02:	4a16      	ldr	r2, [pc, #88]	@ (8004b5c <xTaskRemoveFromEventList+0xb4>)
 8004b04:	6013      	str	r3, [r2, #0]
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	4413      	add	r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4a13      	ldr	r2, [pc, #76]	@ (8004b60 <xTaskRemoveFromEventList+0xb8>)
 8004b14:	441a      	add	r2, r3
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	3304      	adds	r3, #4
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	4610      	mov	r0, r2
 8004b1e:	f7fe fdb0 	bl	8003682 <vListInsertEnd>
 8004b22:	e005      	b.n	8004b30 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	3318      	adds	r3, #24
 8004b28:	4619      	mov	r1, r3
 8004b2a:	480e      	ldr	r0, [pc, #56]	@ (8004b64 <xTaskRemoveFromEventList+0xbc>)
 8004b2c:	f7fe fda9 	bl	8003682 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b34:	4b0c      	ldr	r3, [pc, #48]	@ (8004b68 <xTaskRemoveFromEventList+0xc0>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d905      	bls.n	8004b4a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004b42:	4b0a      	ldr	r3, [pc, #40]	@ (8004b6c <xTaskRemoveFromEventList+0xc4>)
 8004b44:	2201      	movs	r2, #1
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	e001      	b.n	8004b4e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004b4e:	697b      	ldr	r3, [r7, #20]
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3718      	adds	r7, #24
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	20000e0c 	.word	0x20000e0c
 8004b5c:	20000dec 	.word	0x20000dec
 8004b60:	20000914 	.word	0x20000914
 8004b64:	20000da4 	.word	0x20000da4
 8004b68:	20000910 	.word	0x20000910
 8004b6c:	20000df8 	.word	0x20000df8

08004b70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004b78:	4b06      	ldr	r3, [pc, #24]	@ (8004b94 <vTaskInternalSetTimeOutState+0x24>)
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004b80:	4b05      	ldr	r3, [pc, #20]	@ (8004b98 <vTaskInternalSetTimeOutState+0x28>)
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	605a      	str	r2, [r3, #4]
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	20000dfc 	.word	0x20000dfc
 8004b98:	20000de8 	.word	0x20000de8

08004b9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b088      	sub	sp, #32
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10b      	bne.n	8004bc4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb0:	f383 8811 	msr	BASEPRI, r3
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	613b      	str	r3, [r7, #16]
}
 8004bbe:	bf00      	nop
 8004bc0:	bf00      	nop
 8004bc2:	e7fd      	b.n	8004bc0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10b      	bne.n	8004be2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bce:	f383 8811 	msr	BASEPRI, r3
 8004bd2:	f3bf 8f6f 	isb	sy
 8004bd6:	f3bf 8f4f 	dsb	sy
 8004bda:	60fb      	str	r3, [r7, #12]
}
 8004bdc:	bf00      	nop
 8004bde:	bf00      	nop
 8004be0:	e7fd      	b.n	8004bde <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004be2:	f000 fe91 	bl	8005908 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004be6:	4b1d      	ldr	r3, [pc, #116]	@ (8004c5c <xTaskCheckForTimeOut+0xc0>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	69ba      	ldr	r2, [r7, #24]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bfe:	d102      	bne.n	8004c06 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004c00:	2300      	movs	r3, #0
 8004c02:	61fb      	str	r3, [r7, #28]
 8004c04:	e023      	b.n	8004c4e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	4b15      	ldr	r3, [pc, #84]	@ (8004c60 <xTaskCheckForTimeOut+0xc4>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d007      	beq.n	8004c22 <xTaskCheckForTimeOut+0x86>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	69ba      	ldr	r2, [r7, #24]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d302      	bcc.n	8004c22 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	61fb      	str	r3, [r7, #28]
 8004c20:	e015      	b.n	8004c4e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d20b      	bcs.n	8004c44 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	1ad2      	subs	r2, r2, r3
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f7ff ff99 	bl	8004b70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	61fb      	str	r3, [r7, #28]
 8004c42:	e004      	b.n	8004c4e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	2200      	movs	r2, #0
 8004c48:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004c4e:	f000 fe8d 	bl	800596c <vPortExitCritical>

	return xReturn;
 8004c52:	69fb      	ldr	r3, [r7, #28]
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3720      	adds	r7, #32
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	20000de8 	.word	0x20000de8
 8004c60:	20000dfc 	.word	0x20000dfc

08004c64 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004c64:	b480      	push	{r7}
 8004c66:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004c68:	4b03      	ldr	r3, [pc, #12]	@ (8004c78 <vTaskMissedYield+0x14>)
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	601a      	str	r2, [r3, #0]
}
 8004c6e:	bf00      	nop
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr
 8004c78:	20000df8 	.word	0x20000df8

08004c7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004c84:	f000 f852 	bl	8004d2c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004c88:	4b06      	ldr	r3, [pc, #24]	@ (8004ca4 <prvIdleTask+0x28>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d9f9      	bls.n	8004c84 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004c90:	4b05      	ldr	r3, [pc, #20]	@ (8004ca8 <prvIdleTask+0x2c>)
 8004c92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c96:	601a      	str	r2, [r3, #0]
 8004c98:	f3bf 8f4f 	dsb	sy
 8004c9c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004ca0:	e7f0      	b.n	8004c84 <prvIdleTask+0x8>
 8004ca2:	bf00      	nop
 8004ca4:	20000914 	.word	0x20000914
 8004ca8:	e000ed04 	.word	0xe000ed04

08004cac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	607b      	str	r3, [r7, #4]
 8004cb6:	e00c      	b.n	8004cd2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	4413      	add	r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	4a12      	ldr	r2, [pc, #72]	@ (8004d0c <prvInitialiseTaskLists+0x60>)
 8004cc4:	4413      	add	r3, r2
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7fe fcae 	bl	8003628 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3301      	adds	r3, #1
 8004cd0:	607b      	str	r3, [r7, #4]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b37      	cmp	r3, #55	@ 0x37
 8004cd6:	d9ef      	bls.n	8004cb8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004cd8:	480d      	ldr	r0, [pc, #52]	@ (8004d10 <prvInitialiseTaskLists+0x64>)
 8004cda:	f7fe fca5 	bl	8003628 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004cde:	480d      	ldr	r0, [pc, #52]	@ (8004d14 <prvInitialiseTaskLists+0x68>)
 8004ce0:	f7fe fca2 	bl	8003628 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004ce4:	480c      	ldr	r0, [pc, #48]	@ (8004d18 <prvInitialiseTaskLists+0x6c>)
 8004ce6:	f7fe fc9f 	bl	8003628 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004cea:	480c      	ldr	r0, [pc, #48]	@ (8004d1c <prvInitialiseTaskLists+0x70>)
 8004cec:	f7fe fc9c 	bl	8003628 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004cf0:	480b      	ldr	r0, [pc, #44]	@ (8004d20 <prvInitialiseTaskLists+0x74>)
 8004cf2:	f7fe fc99 	bl	8003628 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8004d24 <prvInitialiseTaskLists+0x78>)
 8004cf8:	4a05      	ldr	r2, [pc, #20]	@ (8004d10 <prvInitialiseTaskLists+0x64>)
 8004cfa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8004d28 <prvInitialiseTaskLists+0x7c>)
 8004cfe:	4a05      	ldr	r2, [pc, #20]	@ (8004d14 <prvInitialiseTaskLists+0x68>)
 8004d00:	601a      	str	r2, [r3, #0]
}
 8004d02:	bf00      	nop
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	20000914 	.word	0x20000914
 8004d10:	20000d74 	.word	0x20000d74
 8004d14:	20000d88 	.word	0x20000d88
 8004d18:	20000da4 	.word	0x20000da4
 8004d1c:	20000db8 	.word	0x20000db8
 8004d20:	20000dd0 	.word	0x20000dd0
 8004d24:	20000d9c 	.word	0x20000d9c
 8004d28:	20000da0 	.word	0x20000da0

08004d2c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d32:	e019      	b.n	8004d68 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004d34:	f000 fde8 	bl	8005908 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d38:	4b10      	ldr	r3, [pc, #64]	@ (8004d7c <prvCheckTasksWaitingTermination+0x50>)
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	3304      	adds	r3, #4
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7fe fcf9 	bl	800373c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8004d80 <prvCheckTasksWaitingTermination+0x54>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	4a0b      	ldr	r2, [pc, #44]	@ (8004d80 <prvCheckTasksWaitingTermination+0x54>)
 8004d52:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004d54:	4b0b      	ldr	r3, [pc, #44]	@ (8004d84 <prvCheckTasksWaitingTermination+0x58>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8004d84 <prvCheckTasksWaitingTermination+0x58>)
 8004d5c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004d5e:	f000 fe05 	bl	800596c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f810 	bl	8004d88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d68:	4b06      	ldr	r3, [pc, #24]	@ (8004d84 <prvCheckTasksWaitingTermination+0x58>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1e1      	bne.n	8004d34 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004d70:	bf00      	nop
 8004d72:	bf00      	nop
 8004d74:	3708      	adds	r7, #8
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	20000db8 	.word	0x20000db8
 8004d80:	20000de4 	.word	0x20000de4
 8004d84:	20000dcc 	.word	0x20000dcc

08004d88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	3354      	adds	r3, #84	@ 0x54
 8004d94:	4618      	mov	r0, r3
 8004d96:	f001 f8ef 	bl	8005f78 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d108      	bne.n	8004db6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004da8:	4618      	mov	r0, r3
 8004daa:	f000 ff9d 	bl	8005ce8 <vPortFree>
				vPortFree( pxTCB );
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 ff9a 	bl	8005ce8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004db4:	e019      	b.n	8004dea <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d103      	bne.n	8004dc8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 ff91 	bl	8005ce8 <vPortFree>
	}
 8004dc6:	e010      	b.n	8004dea <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d00b      	beq.n	8004dea <prvDeleteTCB+0x62>
	__asm volatile
 8004dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dd6:	f383 8811 	msr	BASEPRI, r3
 8004dda:	f3bf 8f6f 	isb	sy
 8004dde:	f3bf 8f4f 	dsb	sy
 8004de2:	60fb      	str	r3, [r7, #12]
}
 8004de4:	bf00      	nop
 8004de6:	bf00      	nop
 8004de8:	e7fd      	b.n	8004de6 <prvDeleteTCB+0x5e>
	}
 8004dea:	bf00      	nop
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
	...

08004df4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8004e2c <prvResetNextTaskUnblockTime+0x38>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d104      	bne.n	8004e0e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e04:	4b0a      	ldr	r3, [pc, #40]	@ (8004e30 <prvResetNextTaskUnblockTime+0x3c>)
 8004e06:	f04f 32ff 	mov.w	r2, #4294967295
 8004e0a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004e0c:	e008      	b.n	8004e20 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e0e:	4b07      	ldr	r3, [pc, #28]	@ (8004e2c <prvResetNextTaskUnblockTime+0x38>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	4a04      	ldr	r2, [pc, #16]	@ (8004e30 <prvResetNextTaskUnblockTime+0x3c>)
 8004e1e:	6013      	str	r3, [r2, #0]
}
 8004e20:	bf00      	nop
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr
 8004e2c:	20000d9c 	.word	0x20000d9c
 8004e30:	20000e04 	.word	0x20000e04

08004e34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8004e68 <xTaskGetSchedulerState+0x34>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d102      	bne.n	8004e48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004e42:	2301      	movs	r3, #1
 8004e44:	607b      	str	r3, [r7, #4]
 8004e46:	e008      	b.n	8004e5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e48:	4b08      	ldr	r3, [pc, #32]	@ (8004e6c <xTaskGetSchedulerState+0x38>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d102      	bne.n	8004e56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004e50:	2302      	movs	r3, #2
 8004e52:	607b      	str	r3, [r7, #4]
 8004e54:	e001      	b.n	8004e5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004e56:	2300      	movs	r3, #0
 8004e58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004e5a:	687b      	ldr	r3, [r7, #4]
	}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr
 8004e68:	20000df0 	.word	0x20000df0
 8004e6c:	20000e0c 	.word	0x20000e0c

08004e70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b086      	sub	sp, #24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d058      	beq.n	8004f38 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004e86:	4b2f      	ldr	r3, [pc, #188]	@ (8004f44 <xTaskPriorityDisinherit+0xd4>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d00b      	beq.n	8004ea8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e94:	f383 8811 	msr	BASEPRI, r3
 8004e98:	f3bf 8f6f 	isb	sy
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	60fb      	str	r3, [r7, #12]
}
 8004ea2:	bf00      	nop
 8004ea4:	bf00      	nop
 8004ea6:	e7fd      	b.n	8004ea4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d10b      	bne.n	8004ec8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eb4:	f383 8811 	msr	BASEPRI, r3
 8004eb8:	f3bf 8f6f 	isb	sy
 8004ebc:	f3bf 8f4f 	dsb	sy
 8004ec0:	60bb      	str	r3, [r7, #8]
}
 8004ec2:	bf00      	nop
 8004ec4:	bf00      	nop
 8004ec6:	e7fd      	b.n	8004ec4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ecc:	1e5a      	subs	r2, r3, #1
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d02c      	beq.n	8004f38 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d128      	bne.n	8004f38 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	3304      	adds	r3, #4
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7fe fc26 	bl	800373c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004efc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f08:	4b0f      	ldr	r3, [pc, #60]	@ (8004f48 <xTaskPriorityDisinherit+0xd8>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d903      	bls.n	8004f18 <xTaskPriorityDisinherit+0xa8>
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f14:	4a0c      	ldr	r2, [pc, #48]	@ (8004f48 <xTaskPriorityDisinherit+0xd8>)
 8004f16:	6013      	str	r3, [r2, #0]
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4413      	add	r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	4a09      	ldr	r2, [pc, #36]	@ (8004f4c <xTaskPriorityDisinherit+0xdc>)
 8004f26:	441a      	add	r2, r3
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	3304      	adds	r3, #4
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	4610      	mov	r0, r2
 8004f30:	f7fe fba7 	bl	8003682 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004f34:	2301      	movs	r3, #1
 8004f36:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004f38:	697b      	ldr	r3, [r7, #20]
	}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3718      	adds	r7, #24
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	20000910 	.word	0x20000910
 8004f48:	20000dec 	.word	0x20000dec
 8004f4c:	20000914 	.word	0x20000914

08004f50 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004f5a:	4b21      	ldr	r3, [pc, #132]	@ (8004fe0 <prvAddCurrentTaskToDelayedList+0x90>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f60:	4b20      	ldr	r3, [pc, #128]	@ (8004fe4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	3304      	adds	r3, #4
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7fe fbe8 	bl	800373c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f72:	d10a      	bne.n	8004f8a <prvAddCurrentTaskToDelayedList+0x3a>
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d007      	beq.n	8004f8a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f7a:	4b1a      	ldr	r3, [pc, #104]	@ (8004fe4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	3304      	adds	r3, #4
 8004f80:	4619      	mov	r1, r3
 8004f82:	4819      	ldr	r0, [pc, #100]	@ (8004fe8 <prvAddCurrentTaskToDelayedList+0x98>)
 8004f84:	f7fe fb7d 	bl	8003682 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004f88:	e026      	b.n	8004fd8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4413      	add	r3, r2
 8004f90:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004f92:	4b14      	ldr	r3, [pc, #80]	@ (8004fe4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68ba      	ldr	r2, [r7, #8]
 8004f98:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d209      	bcs.n	8004fb6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fa2:	4b12      	ldr	r3, [pc, #72]	@ (8004fec <prvAddCurrentTaskToDelayedList+0x9c>)
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	4b0f      	ldr	r3, [pc, #60]	@ (8004fe4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	3304      	adds	r3, #4
 8004fac:	4619      	mov	r1, r3
 8004fae:	4610      	mov	r0, r2
 8004fb0:	f7fe fb8b 	bl	80036ca <vListInsert>
}
 8004fb4:	e010      	b.n	8004fd8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fb6:	4b0e      	ldr	r3, [pc, #56]	@ (8004ff0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	4b0a      	ldr	r3, [pc, #40]	@ (8004fe4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	3304      	adds	r3, #4
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	4610      	mov	r0, r2
 8004fc4:	f7fe fb81 	bl	80036ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8004ff4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68ba      	ldr	r2, [r7, #8]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d202      	bcs.n	8004fd8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004fd2:	4a08      	ldr	r2, [pc, #32]	@ (8004ff4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	6013      	str	r3, [r2, #0]
}
 8004fd8:	bf00      	nop
 8004fda:	3710      	adds	r7, #16
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	20000de8 	.word	0x20000de8
 8004fe4:	20000910 	.word	0x20000910
 8004fe8:	20000dd0 	.word	0x20000dd0
 8004fec:	20000da0 	.word	0x20000da0
 8004ff0:	20000d9c 	.word	0x20000d9c
 8004ff4:	20000e04 	.word	0x20000e04

08004ff8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b08a      	sub	sp, #40	@ 0x28
 8004ffc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004ffe:	2300      	movs	r3, #0
 8005000:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005002:	f000 fb13 	bl	800562c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005006:	4b1d      	ldr	r3, [pc, #116]	@ (800507c <xTimerCreateTimerTask+0x84>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d021      	beq.n	8005052 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800500e:	2300      	movs	r3, #0
 8005010:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005012:	2300      	movs	r3, #0
 8005014:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005016:	1d3a      	adds	r2, r7, #4
 8005018:	f107 0108 	add.w	r1, r7, #8
 800501c:	f107 030c 	add.w	r3, r7, #12
 8005020:	4618      	mov	r0, r3
 8005022:	f7fe fae7 	bl	80035f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005026:	6879      	ldr	r1, [r7, #4]
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	9202      	str	r2, [sp, #8]
 800502e:	9301      	str	r3, [sp, #4]
 8005030:	2302      	movs	r3, #2
 8005032:	9300      	str	r3, [sp, #0]
 8005034:	2300      	movs	r3, #0
 8005036:	460a      	mov	r2, r1
 8005038:	4911      	ldr	r1, [pc, #68]	@ (8005080 <xTimerCreateTimerTask+0x88>)
 800503a:	4812      	ldr	r0, [pc, #72]	@ (8005084 <xTimerCreateTimerTask+0x8c>)
 800503c:	f7ff f8a2 	bl	8004184 <xTaskCreateStatic>
 8005040:	4603      	mov	r3, r0
 8005042:	4a11      	ldr	r2, [pc, #68]	@ (8005088 <xTimerCreateTimerTask+0x90>)
 8005044:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005046:	4b10      	ldr	r3, [pc, #64]	@ (8005088 <xTimerCreateTimerTask+0x90>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d001      	beq.n	8005052 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800504e:	2301      	movs	r3, #1
 8005050:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d10b      	bne.n	8005070 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800505c:	f383 8811 	msr	BASEPRI, r3
 8005060:	f3bf 8f6f 	isb	sy
 8005064:	f3bf 8f4f 	dsb	sy
 8005068:	613b      	str	r3, [r7, #16]
}
 800506a:	bf00      	nop
 800506c:	bf00      	nop
 800506e:	e7fd      	b.n	800506c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005070:	697b      	ldr	r3, [r7, #20]
}
 8005072:	4618      	mov	r0, r3
 8005074:	3718      	adds	r7, #24
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	20000e40 	.word	0x20000e40
 8005080:	080069a4 	.word	0x080069a4
 8005084:	080051c5 	.word	0x080051c5
 8005088:	20000e44 	.word	0x20000e44

0800508c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b08a      	sub	sp, #40	@ 0x28
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
 8005098:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800509a:	2300      	movs	r3, #0
 800509c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d10b      	bne.n	80050bc <xTimerGenericCommand+0x30>
	__asm volatile
 80050a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050a8:	f383 8811 	msr	BASEPRI, r3
 80050ac:	f3bf 8f6f 	isb	sy
 80050b0:	f3bf 8f4f 	dsb	sy
 80050b4:	623b      	str	r3, [r7, #32]
}
 80050b6:	bf00      	nop
 80050b8:	bf00      	nop
 80050ba:	e7fd      	b.n	80050b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80050bc:	4b19      	ldr	r3, [pc, #100]	@ (8005124 <xTimerGenericCommand+0x98>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d02a      	beq.n	800511a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	2b05      	cmp	r3, #5
 80050d4:	dc18      	bgt.n	8005108 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80050d6:	f7ff fead 	bl	8004e34 <xTaskGetSchedulerState>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d109      	bne.n	80050f4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80050e0:	4b10      	ldr	r3, [pc, #64]	@ (8005124 <xTimerGenericCommand+0x98>)
 80050e2:	6818      	ldr	r0, [r3, #0]
 80050e4:	f107 0110 	add.w	r1, r7, #16
 80050e8:	2300      	movs	r3, #0
 80050ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050ec:	f7fe fc5a 	bl	80039a4 <xQueueGenericSend>
 80050f0:	6278      	str	r0, [r7, #36]	@ 0x24
 80050f2:	e012      	b.n	800511a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80050f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005124 <xTimerGenericCommand+0x98>)
 80050f6:	6818      	ldr	r0, [r3, #0]
 80050f8:	f107 0110 	add.w	r1, r7, #16
 80050fc:	2300      	movs	r3, #0
 80050fe:	2200      	movs	r2, #0
 8005100:	f7fe fc50 	bl	80039a4 <xQueueGenericSend>
 8005104:	6278      	str	r0, [r7, #36]	@ 0x24
 8005106:	e008      	b.n	800511a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005108:	4b06      	ldr	r3, [pc, #24]	@ (8005124 <xTimerGenericCommand+0x98>)
 800510a:	6818      	ldr	r0, [r3, #0]
 800510c:	f107 0110 	add.w	r1, r7, #16
 8005110:	2300      	movs	r3, #0
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	f7fe fd48 	bl	8003ba8 <xQueueGenericSendFromISR>
 8005118:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800511a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800511c:	4618      	mov	r0, r3
 800511e:	3728      	adds	r7, #40	@ 0x28
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	20000e40 	.word	0x20000e40

08005128 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b088      	sub	sp, #32
 800512c:	af02      	add	r7, sp, #8
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005132:	4b23      	ldr	r3, [pc, #140]	@ (80051c0 <prvProcessExpiredTimer+0x98>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	3304      	adds	r3, #4
 8005140:	4618      	mov	r0, r3
 8005142:	f7fe fafb 	bl	800373c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800514c:	f003 0304 	and.w	r3, r3, #4
 8005150:	2b00      	cmp	r3, #0
 8005152:	d023      	beq.n	800519c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	699a      	ldr	r2, [r3, #24]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	18d1      	adds	r1, r2, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	683a      	ldr	r2, [r7, #0]
 8005160:	6978      	ldr	r0, [r7, #20]
 8005162:	f000 f8d5 	bl	8005310 <prvInsertTimerInActiveList>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d020      	beq.n	80051ae <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800516c:	2300      	movs	r3, #0
 800516e:	9300      	str	r3, [sp, #0]
 8005170:	2300      	movs	r3, #0
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	2100      	movs	r1, #0
 8005176:	6978      	ldr	r0, [r7, #20]
 8005178:	f7ff ff88 	bl	800508c <xTimerGenericCommand>
 800517c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d114      	bne.n	80051ae <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005188:	f383 8811 	msr	BASEPRI, r3
 800518c:	f3bf 8f6f 	isb	sy
 8005190:	f3bf 8f4f 	dsb	sy
 8005194:	60fb      	str	r3, [r7, #12]
}
 8005196:	bf00      	nop
 8005198:	bf00      	nop
 800519a:	e7fd      	b.n	8005198 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80051a2:	f023 0301 	bic.w	r3, r3, #1
 80051a6:	b2da      	uxtb	r2, r3
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	6978      	ldr	r0, [r7, #20]
 80051b4:	4798      	blx	r3
}
 80051b6:	bf00      	nop
 80051b8:	3718      	adds	r7, #24
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	20000e38 	.word	0x20000e38

080051c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80051cc:	f107 0308 	add.w	r3, r7, #8
 80051d0:	4618      	mov	r0, r3
 80051d2:	f000 f859 	bl	8005288 <prvGetNextExpireTime>
 80051d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	4619      	mov	r1, r3
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f000 f805 	bl	80051ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80051e2:	f000 f8d7 	bl	8005394 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80051e6:	bf00      	nop
 80051e8:	e7f0      	b.n	80051cc <prvTimerTask+0x8>
	...

080051ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80051f6:	f7ff fa29 	bl	800464c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80051fa:	f107 0308 	add.w	r3, r7, #8
 80051fe:	4618      	mov	r0, r3
 8005200:	f000 f866 	bl	80052d0 <prvSampleTimeNow>
 8005204:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d130      	bne.n	800526e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10a      	bne.n	8005228 <prvProcessTimerOrBlockTask+0x3c>
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	429a      	cmp	r2, r3
 8005218:	d806      	bhi.n	8005228 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800521a:	f7ff fa25 	bl	8004668 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800521e:	68f9      	ldr	r1, [r7, #12]
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f7ff ff81 	bl	8005128 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005226:	e024      	b.n	8005272 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d008      	beq.n	8005240 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800522e:	4b13      	ldr	r3, [pc, #76]	@ (800527c <prvProcessTimerOrBlockTask+0x90>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <prvProcessTimerOrBlockTask+0x50>
 8005238:	2301      	movs	r3, #1
 800523a:	e000      	b.n	800523e <prvProcessTimerOrBlockTask+0x52>
 800523c:	2300      	movs	r3, #0
 800523e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005240:	4b0f      	ldr	r3, [pc, #60]	@ (8005280 <prvProcessTimerOrBlockTask+0x94>)
 8005242:	6818      	ldr	r0, [r3, #0]
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	683a      	ldr	r2, [r7, #0]
 800524c:	4619      	mov	r1, r3
 800524e:	f7fe ff65 	bl	800411c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005252:	f7ff fa09 	bl	8004668 <xTaskResumeAll>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d10a      	bne.n	8005272 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800525c:	4b09      	ldr	r3, [pc, #36]	@ (8005284 <prvProcessTimerOrBlockTask+0x98>)
 800525e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005262:	601a      	str	r2, [r3, #0]
 8005264:	f3bf 8f4f 	dsb	sy
 8005268:	f3bf 8f6f 	isb	sy
}
 800526c:	e001      	b.n	8005272 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800526e:	f7ff f9fb 	bl	8004668 <xTaskResumeAll>
}
 8005272:	bf00      	nop
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	20000e3c 	.word	0x20000e3c
 8005280:	20000e40 	.word	0x20000e40
 8005284:	e000ed04 	.word	0xe000ed04

08005288 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005290:	4b0e      	ldr	r3, [pc, #56]	@ (80052cc <prvGetNextExpireTime+0x44>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d101      	bne.n	800529e <prvGetNextExpireTime+0x16>
 800529a:	2201      	movs	r2, #1
 800529c:	e000      	b.n	80052a0 <prvGetNextExpireTime+0x18>
 800529e:	2200      	movs	r2, #0
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d105      	bne.n	80052b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80052ac:	4b07      	ldr	r3, [pc, #28]	@ (80052cc <prvGetNextExpireTime+0x44>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	60fb      	str	r3, [r7, #12]
 80052b6:	e001      	b.n	80052bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80052b8:	2300      	movs	r3, #0
 80052ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80052bc:	68fb      	ldr	r3, [r7, #12]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3714      	adds	r7, #20
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	20000e38 	.word	0x20000e38

080052d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80052d8:	f7ff fa64 	bl	80047a4 <xTaskGetTickCount>
 80052dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80052de:	4b0b      	ldr	r3, [pc, #44]	@ (800530c <prvSampleTimeNow+0x3c>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d205      	bcs.n	80052f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80052e8:	f000 f93a 	bl	8005560 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	601a      	str	r2, [r3, #0]
 80052f2:	e002      	b.n	80052fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80052fa:	4a04      	ldr	r2, [pc, #16]	@ (800530c <prvSampleTimeNow+0x3c>)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005300:	68fb      	ldr	r3, [r7, #12]
}
 8005302:	4618      	mov	r0, r3
 8005304:	3710      	adds	r7, #16
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	20000e48 	.word	0x20000e48

08005310 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
 800531c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800531e:	2300      	movs	r3, #0
 8005320:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	429a      	cmp	r2, r3
 8005334:	d812      	bhi.n	800535c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	1ad2      	subs	r2, r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	699b      	ldr	r3, [r3, #24]
 8005340:	429a      	cmp	r2, r3
 8005342:	d302      	bcc.n	800534a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005344:	2301      	movs	r3, #1
 8005346:	617b      	str	r3, [r7, #20]
 8005348:	e01b      	b.n	8005382 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800534a:	4b10      	ldr	r3, [pc, #64]	@ (800538c <prvInsertTimerInActiveList+0x7c>)
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	3304      	adds	r3, #4
 8005352:	4619      	mov	r1, r3
 8005354:	4610      	mov	r0, r2
 8005356:	f7fe f9b8 	bl	80036ca <vListInsert>
 800535a:	e012      	b.n	8005382 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	429a      	cmp	r2, r3
 8005362:	d206      	bcs.n	8005372 <prvInsertTimerInActiveList+0x62>
 8005364:	68ba      	ldr	r2, [r7, #8]
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	429a      	cmp	r2, r3
 800536a:	d302      	bcc.n	8005372 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800536c:	2301      	movs	r3, #1
 800536e:	617b      	str	r3, [r7, #20]
 8005370:	e007      	b.n	8005382 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005372:	4b07      	ldr	r3, [pc, #28]	@ (8005390 <prvInsertTimerInActiveList+0x80>)
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	3304      	adds	r3, #4
 800537a:	4619      	mov	r1, r3
 800537c:	4610      	mov	r0, r2
 800537e:	f7fe f9a4 	bl	80036ca <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005382:	697b      	ldr	r3, [r7, #20]
}
 8005384:	4618      	mov	r0, r3
 8005386:	3718      	adds	r7, #24
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	20000e3c 	.word	0x20000e3c
 8005390:	20000e38 	.word	0x20000e38

08005394 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b08e      	sub	sp, #56	@ 0x38
 8005398:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800539a:	e0ce      	b.n	800553a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	da19      	bge.n	80053d6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80053a2:	1d3b      	adds	r3, r7, #4
 80053a4:	3304      	adds	r3, #4
 80053a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80053a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10b      	bne.n	80053c6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80053ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	61fb      	str	r3, [r7, #28]
}
 80053c0:	bf00      	nop
 80053c2:	bf00      	nop
 80053c4:	e7fd      	b.n	80053c2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80053c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053cc:	6850      	ldr	r0, [r2, #4]
 80053ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053d0:	6892      	ldr	r2, [r2, #8]
 80053d2:	4611      	mov	r1, r2
 80053d4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f2c0 80ae 	blt.w	800553a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80053e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d004      	beq.n	80053f4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80053ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ec:	3304      	adds	r3, #4
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7fe f9a4 	bl	800373c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80053f4:	463b      	mov	r3, r7
 80053f6:	4618      	mov	r0, r3
 80053f8:	f7ff ff6a 	bl	80052d0 <prvSampleTimeNow>
 80053fc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2b09      	cmp	r3, #9
 8005402:	f200 8097 	bhi.w	8005534 <prvProcessReceivedCommands+0x1a0>
 8005406:	a201      	add	r2, pc, #4	@ (adr r2, 800540c <prvProcessReceivedCommands+0x78>)
 8005408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800540c:	08005435 	.word	0x08005435
 8005410:	08005435 	.word	0x08005435
 8005414:	08005435 	.word	0x08005435
 8005418:	080054ab 	.word	0x080054ab
 800541c:	080054bf 	.word	0x080054bf
 8005420:	0800550b 	.word	0x0800550b
 8005424:	08005435 	.word	0x08005435
 8005428:	08005435 	.word	0x08005435
 800542c:	080054ab 	.word	0x080054ab
 8005430:	080054bf 	.word	0x080054bf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005436:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800543a:	f043 0301 	orr.w	r3, r3, #1
 800543e:	b2da      	uxtb	r2, r3
 8005440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005442:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	18d1      	adds	r1, r2, r3
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005452:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005454:	f7ff ff5c 	bl	8005310 <prvInsertTimerInActiveList>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d06c      	beq.n	8005538 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800545e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005464:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005468:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800546c:	f003 0304 	and.w	r3, r3, #4
 8005470:	2b00      	cmp	r3, #0
 8005472:	d061      	beq.n	8005538 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005474:	68ba      	ldr	r2, [r7, #8]
 8005476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	441a      	add	r2, r3
 800547c:	2300      	movs	r3, #0
 800547e:	9300      	str	r3, [sp, #0]
 8005480:	2300      	movs	r3, #0
 8005482:	2100      	movs	r1, #0
 8005484:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005486:	f7ff fe01 	bl	800508c <xTimerGenericCommand>
 800548a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800548c:	6a3b      	ldr	r3, [r7, #32]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d152      	bne.n	8005538 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005496:	f383 8811 	msr	BASEPRI, r3
 800549a:	f3bf 8f6f 	isb	sy
 800549e:	f3bf 8f4f 	dsb	sy
 80054a2:	61bb      	str	r3, [r7, #24]
}
 80054a4:	bf00      	nop
 80054a6:	bf00      	nop
 80054a8:	e7fd      	b.n	80054a6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80054aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80054b0:	f023 0301 	bic.w	r3, r3, #1
 80054b4:	b2da      	uxtb	r2, r3
 80054b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054b8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80054bc:	e03d      	b.n	800553a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80054be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80054c4:	f043 0301 	orr.w	r3, r3, #1
 80054c8:	b2da      	uxtb	r2, r3
 80054ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054cc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80054d0:	68ba      	ldr	r2, [r7, #8]
 80054d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80054d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10b      	bne.n	80054f6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80054de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e2:	f383 8811 	msr	BASEPRI, r3
 80054e6:	f3bf 8f6f 	isb	sy
 80054ea:	f3bf 8f4f 	dsb	sy
 80054ee:	617b      	str	r3, [r7, #20]
}
 80054f0:	bf00      	nop
 80054f2:	bf00      	nop
 80054f4:	e7fd      	b.n	80054f2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80054f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054f8:	699a      	ldr	r2, [r3, #24]
 80054fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fc:	18d1      	adds	r1, r2, r3
 80054fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005500:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005502:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005504:	f7ff ff04 	bl	8005310 <prvInsertTimerInActiveList>
					break;
 8005508:	e017      	b.n	800553a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800550a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800550c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005510:	f003 0302 	and.w	r3, r3, #2
 8005514:	2b00      	cmp	r3, #0
 8005516:	d103      	bne.n	8005520 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005518:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800551a:	f000 fbe5 	bl	8005ce8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800551e:	e00c      	b.n	800553a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005522:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005526:	f023 0301 	bic.w	r3, r3, #1
 800552a:	b2da      	uxtb	r2, r3
 800552c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800552e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005532:	e002      	b.n	800553a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005534:	bf00      	nop
 8005536:	e000      	b.n	800553a <prvProcessReceivedCommands+0x1a6>
					break;
 8005538:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800553a:	4b08      	ldr	r3, [pc, #32]	@ (800555c <prvProcessReceivedCommands+0x1c8>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	1d39      	adds	r1, r7, #4
 8005540:	2200      	movs	r2, #0
 8005542:	4618      	mov	r0, r3
 8005544:	f7fe fbce 	bl	8003ce4 <xQueueReceive>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	f47f af26 	bne.w	800539c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005550:	bf00      	nop
 8005552:	bf00      	nop
 8005554:	3730      	adds	r7, #48	@ 0x30
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	20000e40 	.word	0x20000e40

08005560 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b088      	sub	sp, #32
 8005564:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005566:	e049      	b.n	80055fc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005568:	4b2e      	ldr	r3, [pc, #184]	@ (8005624 <prvSwitchTimerLists+0xc4>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005572:	4b2c      	ldr	r3, [pc, #176]	@ (8005624 <prvSwitchTimerLists+0xc4>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	3304      	adds	r3, #4
 8005580:	4618      	mov	r0, r3
 8005582:	f7fe f8db 	bl	800373c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	68f8      	ldr	r0, [r7, #12]
 800558c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005594:	f003 0304 	and.w	r3, r3, #4
 8005598:	2b00      	cmp	r3, #0
 800559a:	d02f      	beq.n	80055fc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	4413      	add	r3, r2
 80055a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80055a6:	68ba      	ldr	r2, [r7, #8]
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d90e      	bls.n	80055cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	68ba      	ldr	r2, [r7, #8]
 80055b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80055ba:	4b1a      	ldr	r3, [pc, #104]	@ (8005624 <prvSwitchTimerLists+0xc4>)
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	3304      	adds	r3, #4
 80055c2:	4619      	mov	r1, r3
 80055c4:	4610      	mov	r0, r2
 80055c6:	f7fe f880 	bl	80036ca <vListInsert>
 80055ca:	e017      	b.n	80055fc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80055cc:	2300      	movs	r3, #0
 80055ce:	9300      	str	r3, [sp, #0]
 80055d0:	2300      	movs	r3, #0
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	2100      	movs	r1, #0
 80055d6:	68f8      	ldr	r0, [r7, #12]
 80055d8:	f7ff fd58 	bl	800508c <xTimerGenericCommand>
 80055dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d10b      	bne.n	80055fc <prvSwitchTimerLists+0x9c>
	__asm volatile
 80055e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e8:	f383 8811 	msr	BASEPRI, r3
 80055ec:	f3bf 8f6f 	isb	sy
 80055f0:	f3bf 8f4f 	dsb	sy
 80055f4:	603b      	str	r3, [r7, #0]
}
 80055f6:	bf00      	nop
 80055f8:	bf00      	nop
 80055fa:	e7fd      	b.n	80055f8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80055fc:	4b09      	ldr	r3, [pc, #36]	@ (8005624 <prvSwitchTimerLists+0xc4>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1b0      	bne.n	8005568 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005606:	4b07      	ldr	r3, [pc, #28]	@ (8005624 <prvSwitchTimerLists+0xc4>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800560c:	4b06      	ldr	r3, [pc, #24]	@ (8005628 <prvSwitchTimerLists+0xc8>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a04      	ldr	r2, [pc, #16]	@ (8005624 <prvSwitchTimerLists+0xc4>)
 8005612:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005614:	4a04      	ldr	r2, [pc, #16]	@ (8005628 <prvSwitchTimerLists+0xc8>)
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	6013      	str	r3, [r2, #0]
}
 800561a:	bf00      	nop
 800561c:	3718      	adds	r7, #24
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	20000e38 	.word	0x20000e38
 8005628:	20000e3c 	.word	0x20000e3c

0800562c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005632:	f000 f969 	bl	8005908 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005636:	4b15      	ldr	r3, [pc, #84]	@ (800568c <prvCheckForValidListAndQueue+0x60>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d120      	bne.n	8005680 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800563e:	4814      	ldr	r0, [pc, #80]	@ (8005690 <prvCheckForValidListAndQueue+0x64>)
 8005640:	f7fd fff2 	bl	8003628 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005644:	4813      	ldr	r0, [pc, #76]	@ (8005694 <prvCheckForValidListAndQueue+0x68>)
 8005646:	f7fd ffef 	bl	8003628 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800564a:	4b13      	ldr	r3, [pc, #76]	@ (8005698 <prvCheckForValidListAndQueue+0x6c>)
 800564c:	4a10      	ldr	r2, [pc, #64]	@ (8005690 <prvCheckForValidListAndQueue+0x64>)
 800564e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005650:	4b12      	ldr	r3, [pc, #72]	@ (800569c <prvCheckForValidListAndQueue+0x70>)
 8005652:	4a10      	ldr	r2, [pc, #64]	@ (8005694 <prvCheckForValidListAndQueue+0x68>)
 8005654:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005656:	2300      	movs	r3, #0
 8005658:	9300      	str	r3, [sp, #0]
 800565a:	4b11      	ldr	r3, [pc, #68]	@ (80056a0 <prvCheckForValidListAndQueue+0x74>)
 800565c:	4a11      	ldr	r2, [pc, #68]	@ (80056a4 <prvCheckForValidListAndQueue+0x78>)
 800565e:	2110      	movs	r1, #16
 8005660:	200a      	movs	r0, #10
 8005662:	f7fe f8ff 	bl	8003864 <xQueueGenericCreateStatic>
 8005666:	4603      	mov	r3, r0
 8005668:	4a08      	ldr	r2, [pc, #32]	@ (800568c <prvCheckForValidListAndQueue+0x60>)
 800566a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800566c:	4b07      	ldr	r3, [pc, #28]	@ (800568c <prvCheckForValidListAndQueue+0x60>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d005      	beq.n	8005680 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005674:	4b05      	ldr	r3, [pc, #20]	@ (800568c <prvCheckForValidListAndQueue+0x60>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	490b      	ldr	r1, [pc, #44]	@ (80056a8 <prvCheckForValidListAndQueue+0x7c>)
 800567a:	4618      	mov	r0, r3
 800567c:	f7fe fd24 	bl	80040c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005680:	f000 f974 	bl	800596c <vPortExitCritical>
}
 8005684:	bf00      	nop
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	20000e40 	.word	0x20000e40
 8005690:	20000e10 	.word	0x20000e10
 8005694:	20000e24 	.word	0x20000e24
 8005698:	20000e38 	.word	0x20000e38
 800569c:	20000e3c 	.word	0x20000e3c
 80056a0:	20000eec 	.word	0x20000eec
 80056a4:	20000e4c 	.word	0x20000e4c
 80056a8:	080069ac 	.word	0x080069ac

080056ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80056ac:	b480      	push	{r7}
 80056ae:	b085      	sub	sp, #20
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	3b04      	subs	r3, #4
 80056bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80056c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	3b04      	subs	r3, #4
 80056ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	f023 0201 	bic.w	r2, r3, #1
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	3b04      	subs	r3, #4
 80056da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80056dc:	4a0c      	ldr	r2, [pc, #48]	@ (8005710 <pxPortInitialiseStack+0x64>)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	3b14      	subs	r3, #20
 80056e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	3b04      	subs	r3, #4
 80056f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f06f 0202 	mvn.w	r2, #2
 80056fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	3b20      	subs	r3, #32
 8005700:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005702:	68fb      	ldr	r3, [r7, #12]
}
 8005704:	4618      	mov	r0, r3
 8005706:	3714      	adds	r7, #20
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr
 8005710:	08005715 	.word	0x08005715

08005714 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005714:	b480      	push	{r7}
 8005716:	b085      	sub	sp, #20
 8005718:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800571a:	2300      	movs	r3, #0
 800571c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800571e:	4b13      	ldr	r3, [pc, #76]	@ (800576c <prvTaskExitError+0x58>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005726:	d00b      	beq.n	8005740 <prvTaskExitError+0x2c>
	__asm volatile
 8005728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800572c:	f383 8811 	msr	BASEPRI, r3
 8005730:	f3bf 8f6f 	isb	sy
 8005734:	f3bf 8f4f 	dsb	sy
 8005738:	60fb      	str	r3, [r7, #12]
}
 800573a:	bf00      	nop
 800573c:	bf00      	nop
 800573e:	e7fd      	b.n	800573c <prvTaskExitError+0x28>
	__asm volatile
 8005740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005744:	f383 8811 	msr	BASEPRI, r3
 8005748:	f3bf 8f6f 	isb	sy
 800574c:	f3bf 8f4f 	dsb	sy
 8005750:	60bb      	str	r3, [r7, #8]
}
 8005752:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005754:	bf00      	nop
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d0fc      	beq.n	8005756 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800575c:	bf00      	nop
 800575e:	bf00      	nop
 8005760:	3714      	adds	r7, #20
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	2000000c 	.word	0x2000000c

08005770 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005770:	4b07      	ldr	r3, [pc, #28]	@ (8005790 <pxCurrentTCBConst2>)
 8005772:	6819      	ldr	r1, [r3, #0]
 8005774:	6808      	ldr	r0, [r1, #0]
 8005776:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800577a:	f380 8809 	msr	PSP, r0
 800577e:	f3bf 8f6f 	isb	sy
 8005782:	f04f 0000 	mov.w	r0, #0
 8005786:	f380 8811 	msr	BASEPRI, r0
 800578a:	4770      	bx	lr
 800578c:	f3af 8000 	nop.w

08005790 <pxCurrentTCBConst2>:
 8005790:	20000910 	.word	0x20000910
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005794:	bf00      	nop
 8005796:	bf00      	nop

08005798 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005798:	4808      	ldr	r0, [pc, #32]	@ (80057bc <prvPortStartFirstTask+0x24>)
 800579a:	6800      	ldr	r0, [r0, #0]
 800579c:	6800      	ldr	r0, [r0, #0]
 800579e:	f380 8808 	msr	MSP, r0
 80057a2:	f04f 0000 	mov.w	r0, #0
 80057a6:	f380 8814 	msr	CONTROL, r0
 80057aa:	b662      	cpsie	i
 80057ac:	b661      	cpsie	f
 80057ae:	f3bf 8f4f 	dsb	sy
 80057b2:	f3bf 8f6f 	isb	sy
 80057b6:	df00      	svc	0
 80057b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80057ba:	bf00      	nop
 80057bc:	e000ed08 	.word	0xe000ed08

080057c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b086      	sub	sp, #24
 80057c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80057c6:	4b47      	ldr	r3, [pc, #284]	@ (80058e4 <xPortStartScheduler+0x124>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a47      	ldr	r2, [pc, #284]	@ (80058e8 <xPortStartScheduler+0x128>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d10b      	bne.n	80057e8 <xPortStartScheduler+0x28>
	__asm volatile
 80057d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057d4:	f383 8811 	msr	BASEPRI, r3
 80057d8:	f3bf 8f6f 	isb	sy
 80057dc:	f3bf 8f4f 	dsb	sy
 80057e0:	613b      	str	r3, [r7, #16]
}
 80057e2:	bf00      	nop
 80057e4:	bf00      	nop
 80057e6:	e7fd      	b.n	80057e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80057e8:	4b3e      	ldr	r3, [pc, #248]	@ (80058e4 <xPortStartScheduler+0x124>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a3f      	ldr	r2, [pc, #252]	@ (80058ec <xPortStartScheduler+0x12c>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d10b      	bne.n	800580a <xPortStartScheduler+0x4a>
	__asm volatile
 80057f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057f6:	f383 8811 	msr	BASEPRI, r3
 80057fa:	f3bf 8f6f 	isb	sy
 80057fe:	f3bf 8f4f 	dsb	sy
 8005802:	60fb      	str	r3, [r7, #12]
}
 8005804:	bf00      	nop
 8005806:	bf00      	nop
 8005808:	e7fd      	b.n	8005806 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800580a:	4b39      	ldr	r3, [pc, #228]	@ (80058f0 <xPortStartScheduler+0x130>)
 800580c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	b2db      	uxtb	r3, r3
 8005814:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	22ff      	movs	r2, #255	@ 0xff
 800581a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	b2db      	uxtb	r3, r3
 8005822:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005824:	78fb      	ldrb	r3, [r7, #3]
 8005826:	b2db      	uxtb	r3, r3
 8005828:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800582c:	b2da      	uxtb	r2, r3
 800582e:	4b31      	ldr	r3, [pc, #196]	@ (80058f4 <xPortStartScheduler+0x134>)
 8005830:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005832:	4b31      	ldr	r3, [pc, #196]	@ (80058f8 <xPortStartScheduler+0x138>)
 8005834:	2207      	movs	r2, #7
 8005836:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005838:	e009      	b.n	800584e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800583a:	4b2f      	ldr	r3, [pc, #188]	@ (80058f8 <xPortStartScheduler+0x138>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	3b01      	subs	r3, #1
 8005840:	4a2d      	ldr	r2, [pc, #180]	@ (80058f8 <xPortStartScheduler+0x138>)
 8005842:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005844:	78fb      	ldrb	r3, [r7, #3]
 8005846:	b2db      	uxtb	r3, r3
 8005848:	005b      	lsls	r3, r3, #1
 800584a:	b2db      	uxtb	r3, r3
 800584c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800584e:	78fb      	ldrb	r3, [r7, #3]
 8005850:	b2db      	uxtb	r3, r3
 8005852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005856:	2b80      	cmp	r3, #128	@ 0x80
 8005858:	d0ef      	beq.n	800583a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800585a:	4b27      	ldr	r3, [pc, #156]	@ (80058f8 <xPortStartScheduler+0x138>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f1c3 0307 	rsb	r3, r3, #7
 8005862:	2b04      	cmp	r3, #4
 8005864:	d00b      	beq.n	800587e <xPortStartScheduler+0xbe>
	__asm volatile
 8005866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800586a:	f383 8811 	msr	BASEPRI, r3
 800586e:	f3bf 8f6f 	isb	sy
 8005872:	f3bf 8f4f 	dsb	sy
 8005876:	60bb      	str	r3, [r7, #8]
}
 8005878:	bf00      	nop
 800587a:	bf00      	nop
 800587c:	e7fd      	b.n	800587a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800587e:	4b1e      	ldr	r3, [pc, #120]	@ (80058f8 <xPortStartScheduler+0x138>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	021b      	lsls	r3, r3, #8
 8005884:	4a1c      	ldr	r2, [pc, #112]	@ (80058f8 <xPortStartScheduler+0x138>)
 8005886:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005888:	4b1b      	ldr	r3, [pc, #108]	@ (80058f8 <xPortStartScheduler+0x138>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005890:	4a19      	ldr	r2, [pc, #100]	@ (80058f8 <xPortStartScheduler+0x138>)
 8005892:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	b2da      	uxtb	r2, r3
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800589c:	4b17      	ldr	r3, [pc, #92]	@ (80058fc <xPortStartScheduler+0x13c>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a16      	ldr	r2, [pc, #88]	@ (80058fc <xPortStartScheduler+0x13c>)
 80058a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80058a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80058a8:	4b14      	ldr	r3, [pc, #80]	@ (80058fc <xPortStartScheduler+0x13c>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a13      	ldr	r2, [pc, #76]	@ (80058fc <xPortStartScheduler+0x13c>)
 80058ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80058b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80058b4:	f000 f8da 	bl	8005a6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80058b8:	4b11      	ldr	r3, [pc, #68]	@ (8005900 <xPortStartScheduler+0x140>)
 80058ba:	2200      	movs	r2, #0
 80058bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80058be:	f000 f8f9 	bl	8005ab4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80058c2:	4b10      	ldr	r3, [pc, #64]	@ (8005904 <xPortStartScheduler+0x144>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a0f      	ldr	r2, [pc, #60]	@ (8005904 <xPortStartScheduler+0x144>)
 80058c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80058cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80058ce:	f7ff ff63 	bl	8005798 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80058d2:	f7ff f831 	bl	8004938 <vTaskSwitchContext>
	prvTaskExitError();
 80058d6:	f7ff ff1d 	bl	8005714 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3718      	adds	r7, #24
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	e000ed00 	.word	0xe000ed00
 80058e8:	410fc271 	.word	0x410fc271
 80058ec:	410fc270 	.word	0x410fc270
 80058f0:	e000e400 	.word	0xe000e400
 80058f4:	20000f3c 	.word	0x20000f3c
 80058f8:	20000f40 	.word	0x20000f40
 80058fc:	e000ed20 	.word	0xe000ed20
 8005900:	2000000c 	.word	0x2000000c
 8005904:	e000ef34 	.word	0xe000ef34

08005908 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
	__asm volatile
 800590e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005912:	f383 8811 	msr	BASEPRI, r3
 8005916:	f3bf 8f6f 	isb	sy
 800591a:	f3bf 8f4f 	dsb	sy
 800591e:	607b      	str	r3, [r7, #4]
}
 8005920:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005922:	4b10      	ldr	r3, [pc, #64]	@ (8005964 <vPortEnterCritical+0x5c>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	3301      	adds	r3, #1
 8005928:	4a0e      	ldr	r2, [pc, #56]	@ (8005964 <vPortEnterCritical+0x5c>)
 800592a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800592c:	4b0d      	ldr	r3, [pc, #52]	@ (8005964 <vPortEnterCritical+0x5c>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d110      	bne.n	8005956 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005934:	4b0c      	ldr	r3, [pc, #48]	@ (8005968 <vPortEnterCritical+0x60>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	b2db      	uxtb	r3, r3
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00b      	beq.n	8005956 <vPortEnterCritical+0x4e>
	__asm volatile
 800593e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005942:	f383 8811 	msr	BASEPRI, r3
 8005946:	f3bf 8f6f 	isb	sy
 800594a:	f3bf 8f4f 	dsb	sy
 800594e:	603b      	str	r3, [r7, #0]
}
 8005950:	bf00      	nop
 8005952:	bf00      	nop
 8005954:	e7fd      	b.n	8005952 <vPortEnterCritical+0x4a>
	}
}
 8005956:	bf00      	nop
 8005958:	370c      	adds	r7, #12
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	2000000c 	.word	0x2000000c
 8005968:	e000ed04 	.word	0xe000ed04

0800596c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005972:	4b12      	ldr	r3, [pc, #72]	@ (80059bc <vPortExitCritical+0x50>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10b      	bne.n	8005992 <vPortExitCritical+0x26>
	__asm volatile
 800597a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800597e:	f383 8811 	msr	BASEPRI, r3
 8005982:	f3bf 8f6f 	isb	sy
 8005986:	f3bf 8f4f 	dsb	sy
 800598a:	607b      	str	r3, [r7, #4]
}
 800598c:	bf00      	nop
 800598e:	bf00      	nop
 8005990:	e7fd      	b.n	800598e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005992:	4b0a      	ldr	r3, [pc, #40]	@ (80059bc <vPortExitCritical+0x50>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	3b01      	subs	r3, #1
 8005998:	4a08      	ldr	r2, [pc, #32]	@ (80059bc <vPortExitCritical+0x50>)
 800599a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800599c:	4b07      	ldr	r3, [pc, #28]	@ (80059bc <vPortExitCritical+0x50>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d105      	bne.n	80059b0 <vPortExitCritical+0x44>
 80059a4:	2300      	movs	r3, #0
 80059a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	f383 8811 	msr	BASEPRI, r3
}
 80059ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80059b0:	bf00      	nop
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr
 80059bc:	2000000c 	.word	0x2000000c

080059c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80059c0:	f3ef 8009 	mrs	r0, PSP
 80059c4:	f3bf 8f6f 	isb	sy
 80059c8:	4b15      	ldr	r3, [pc, #84]	@ (8005a20 <pxCurrentTCBConst>)
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	f01e 0f10 	tst.w	lr, #16
 80059d0:	bf08      	it	eq
 80059d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80059d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059da:	6010      	str	r0, [r2, #0]
 80059dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80059e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80059e4:	f380 8811 	msr	BASEPRI, r0
 80059e8:	f3bf 8f4f 	dsb	sy
 80059ec:	f3bf 8f6f 	isb	sy
 80059f0:	f7fe ffa2 	bl	8004938 <vTaskSwitchContext>
 80059f4:	f04f 0000 	mov.w	r0, #0
 80059f8:	f380 8811 	msr	BASEPRI, r0
 80059fc:	bc09      	pop	{r0, r3}
 80059fe:	6819      	ldr	r1, [r3, #0]
 8005a00:	6808      	ldr	r0, [r1, #0]
 8005a02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a06:	f01e 0f10 	tst.w	lr, #16
 8005a0a:	bf08      	it	eq
 8005a0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005a10:	f380 8809 	msr	PSP, r0
 8005a14:	f3bf 8f6f 	isb	sy
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	f3af 8000 	nop.w

08005a20 <pxCurrentTCBConst>:
 8005a20:	20000910 	.word	0x20000910
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005a24:	bf00      	nop
 8005a26:	bf00      	nop

08005a28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a32:	f383 8811 	msr	BASEPRI, r3
 8005a36:	f3bf 8f6f 	isb	sy
 8005a3a:	f3bf 8f4f 	dsb	sy
 8005a3e:	607b      	str	r3, [r7, #4]
}
 8005a40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005a42:	f7fe febf 	bl	80047c4 <xTaskIncrementTick>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d003      	beq.n	8005a54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a4c:	4b06      	ldr	r3, [pc, #24]	@ (8005a68 <xPortSysTickHandler+0x40>)
 8005a4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a52:	601a      	str	r2, [r3, #0]
 8005a54:	2300      	movs	r3, #0
 8005a56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	f383 8811 	msr	BASEPRI, r3
}
 8005a5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005a60:	bf00      	nop
 8005a62:	3708      	adds	r7, #8
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	e000ed04 	.word	0xe000ed04

08005a6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005a70:	4b0b      	ldr	r3, [pc, #44]	@ (8005aa0 <vPortSetupTimerInterrupt+0x34>)
 8005a72:	2200      	movs	r2, #0
 8005a74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005a76:	4b0b      	ldr	r3, [pc, #44]	@ (8005aa4 <vPortSetupTimerInterrupt+0x38>)
 8005a78:	2200      	movs	r2, #0
 8005a7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8005aa8 <vPortSetupTimerInterrupt+0x3c>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a0a      	ldr	r2, [pc, #40]	@ (8005aac <vPortSetupTimerInterrupt+0x40>)
 8005a82:	fba2 2303 	umull	r2, r3, r2, r3
 8005a86:	099b      	lsrs	r3, r3, #6
 8005a88:	4a09      	ldr	r2, [pc, #36]	@ (8005ab0 <vPortSetupTimerInterrupt+0x44>)
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a8e:	4b04      	ldr	r3, [pc, #16]	@ (8005aa0 <vPortSetupTimerInterrupt+0x34>)
 8005a90:	2207      	movs	r2, #7
 8005a92:	601a      	str	r2, [r3, #0]
}
 8005a94:	bf00      	nop
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	e000e010 	.word	0xe000e010
 8005aa4:	e000e018 	.word	0xe000e018
 8005aa8:	20000000 	.word	0x20000000
 8005aac:	10624dd3 	.word	0x10624dd3
 8005ab0:	e000e014 	.word	0xe000e014

08005ab4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005ab4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005ac4 <vPortEnableVFP+0x10>
 8005ab8:	6801      	ldr	r1, [r0, #0]
 8005aba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005abe:	6001      	str	r1, [r0, #0]
 8005ac0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005ac2:	bf00      	nop
 8005ac4:	e000ed88 	.word	0xe000ed88

08005ac8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005ace:	f3ef 8305 	mrs	r3, IPSR
 8005ad2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2b0f      	cmp	r3, #15
 8005ad8:	d915      	bls.n	8005b06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005ada:	4a18      	ldr	r2, [pc, #96]	@ (8005b3c <vPortValidateInterruptPriority+0x74>)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	4413      	add	r3, r2
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005ae4:	4b16      	ldr	r3, [pc, #88]	@ (8005b40 <vPortValidateInterruptPriority+0x78>)
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	7afa      	ldrb	r2, [r7, #11]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d20b      	bcs.n	8005b06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005af2:	f383 8811 	msr	BASEPRI, r3
 8005af6:	f3bf 8f6f 	isb	sy
 8005afa:	f3bf 8f4f 	dsb	sy
 8005afe:	607b      	str	r3, [r7, #4]
}
 8005b00:	bf00      	nop
 8005b02:	bf00      	nop
 8005b04:	e7fd      	b.n	8005b02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005b06:	4b0f      	ldr	r3, [pc, #60]	@ (8005b44 <vPortValidateInterruptPriority+0x7c>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8005b48 <vPortValidateInterruptPriority+0x80>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d90b      	bls.n	8005b2e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b1a:	f383 8811 	msr	BASEPRI, r3
 8005b1e:	f3bf 8f6f 	isb	sy
 8005b22:	f3bf 8f4f 	dsb	sy
 8005b26:	603b      	str	r3, [r7, #0]
}
 8005b28:	bf00      	nop
 8005b2a:	bf00      	nop
 8005b2c:	e7fd      	b.n	8005b2a <vPortValidateInterruptPriority+0x62>
	}
 8005b2e:	bf00      	nop
 8005b30:	3714      	adds	r7, #20
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	e000e3f0 	.word	0xe000e3f0
 8005b40:	20000f3c 	.word	0x20000f3c
 8005b44:	e000ed0c 	.word	0xe000ed0c
 8005b48:	20000f40 	.word	0x20000f40

08005b4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b08a      	sub	sp, #40	@ 0x28
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005b54:	2300      	movs	r3, #0
 8005b56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005b58:	f7fe fd78 	bl	800464c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005b5c:	4b5c      	ldr	r3, [pc, #368]	@ (8005cd0 <pvPortMalloc+0x184>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d101      	bne.n	8005b68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005b64:	f000 f924 	bl	8005db0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005b68:	4b5a      	ldr	r3, [pc, #360]	@ (8005cd4 <pvPortMalloc+0x188>)
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4013      	ands	r3, r2
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f040 8095 	bne.w	8005ca0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d01e      	beq.n	8005bba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005b7c:	2208      	movs	r2, #8
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4413      	add	r3, r2
 8005b82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f003 0307 	and.w	r3, r3, #7
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d015      	beq.n	8005bba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f023 0307 	bic.w	r3, r3, #7
 8005b94:	3308      	adds	r3, #8
 8005b96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f003 0307 	and.w	r3, r3, #7
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00b      	beq.n	8005bba <pvPortMalloc+0x6e>
	__asm volatile
 8005ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ba6:	f383 8811 	msr	BASEPRI, r3
 8005baa:	f3bf 8f6f 	isb	sy
 8005bae:	f3bf 8f4f 	dsb	sy
 8005bb2:	617b      	str	r3, [r7, #20]
}
 8005bb4:	bf00      	nop
 8005bb6:	bf00      	nop
 8005bb8:	e7fd      	b.n	8005bb6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d06f      	beq.n	8005ca0 <pvPortMalloc+0x154>
 8005bc0:	4b45      	ldr	r3, [pc, #276]	@ (8005cd8 <pvPortMalloc+0x18c>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d86a      	bhi.n	8005ca0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005bca:	4b44      	ldr	r3, [pc, #272]	@ (8005cdc <pvPortMalloc+0x190>)
 8005bcc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005bce:	4b43      	ldr	r3, [pc, #268]	@ (8005cdc <pvPortMalloc+0x190>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005bd4:	e004      	b.n	8005be0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d903      	bls.n	8005bf2 <pvPortMalloc+0xa6>
 8005bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1f1      	bne.n	8005bd6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005bf2:	4b37      	ldr	r3, [pc, #220]	@ (8005cd0 <pvPortMalloc+0x184>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d051      	beq.n	8005ca0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005bfc:	6a3b      	ldr	r3, [r7, #32]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2208      	movs	r2, #8
 8005c02:	4413      	add	r3, r2
 8005c04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	6a3b      	ldr	r3, [r7, #32]
 8005c0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c10:	685a      	ldr	r2, [r3, #4]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	1ad2      	subs	r2, r2, r3
 8005c16:	2308      	movs	r3, #8
 8005c18:	005b      	lsls	r3, r3, #1
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d920      	bls.n	8005c60 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005c1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4413      	add	r3, r2
 8005c24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	f003 0307 	and.w	r3, r3, #7
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00b      	beq.n	8005c48 <pvPortMalloc+0xfc>
	__asm volatile
 8005c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c34:	f383 8811 	msr	BASEPRI, r3
 8005c38:	f3bf 8f6f 	isb	sy
 8005c3c:	f3bf 8f4f 	dsb	sy
 8005c40:	613b      	str	r3, [r7, #16]
}
 8005c42:	bf00      	nop
 8005c44:	bf00      	nop
 8005c46:	e7fd      	b.n	8005c44 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c4a:	685a      	ldr	r2, [r3, #4]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	1ad2      	subs	r2, r2, r3
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c5a:	69b8      	ldr	r0, [r7, #24]
 8005c5c:	f000 f90a 	bl	8005e74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c60:	4b1d      	ldr	r3, [pc, #116]	@ (8005cd8 <pvPortMalloc+0x18c>)
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	4a1b      	ldr	r2, [pc, #108]	@ (8005cd8 <pvPortMalloc+0x18c>)
 8005c6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8005cd8 <pvPortMalloc+0x18c>)
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	4b1b      	ldr	r3, [pc, #108]	@ (8005ce0 <pvPortMalloc+0x194>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d203      	bcs.n	8005c82 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005c7a:	4b17      	ldr	r3, [pc, #92]	@ (8005cd8 <pvPortMalloc+0x18c>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a18      	ldr	r2, [pc, #96]	@ (8005ce0 <pvPortMalloc+0x194>)
 8005c80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c84:	685a      	ldr	r2, [r3, #4]
 8005c86:	4b13      	ldr	r3, [pc, #76]	@ (8005cd4 <pvPortMalloc+0x188>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	431a      	orrs	r2, r3
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c92:	2200      	movs	r2, #0
 8005c94:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005c96:	4b13      	ldr	r3, [pc, #76]	@ (8005ce4 <pvPortMalloc+0x198>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	4a11      	ldr	r2, [pc, #68]	@ (8005ce4 <pvPortMalloc+0x198>)
 8005c9e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005ca0:	f7fe fce2 	bl	8004668 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	f003 0307 	and.w	r3, r3, #7
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00b      	beq.n	8005cc6 <pvPortMalloc+0x17a>
	__asm volatile
 8005cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb2:	f383 8811 	msr	BASEPRI, r3
 8005cb6:	f3bf 8f6f 	isb	sy
 8005cba:	f3bf 8f4f 	dsb	sy
 8005cbe:	60fb      	str	r3, [r7, #12]
}
 8005cc0:	bf00      	nop
 8005cc2:	bf00      	nop
 8005cc4:	e7fd      	b.n	8005cc2 <pvPortMalloc+0x176>
	return pvReturn;
 8005cc6:	69fb      	ldr	r3, [r7, #28]
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3728      	adds	r7, #40	@ 0x28
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	20004b4c 	.word	0x20004b4c
 8005cd4:	20004b60 	.word	0x20004b60
 8005cd8:	20004b50 	.word	0x20004b50
 8005cdc:	20004b44 	.word	0x20004b44
 8005ce0:	20004b54 	.word	0x20004b54
 8005ce4:	20004b58 	.word	0x20004b58

08005ce8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b086      	sub	sp, #24
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d04f      	beq.n	8005d9a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005cfa:	2308      	movs	r3, #8
 8005cfc:	425b      	negs	r3, r3
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	4413      	add	r3, r2
 8005d02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	685a      	ldr	r2, [r3, #4]
 8005d0c:	4b25      	ldr	r3, [pc, #148]	@ (8005da4 <vPortFree+0xbc>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4013      	ands	r3, r2
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d10b      	bne.n	8005d2e <vPortFree+0x46>
	__asm volatile
 8005d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d1a:	f383 8811 	msr	BASEPRI, r3
 8005d1e:	f3bf 8f6f 	isb	sy
 8005d22:	f3bf 8f4f 	dsb	sy
 8005d26:	60fb      	str	r3, [r7, #12]
}
 8005d28:	bf00      	nop
 8005d2a:	bf00      	nop
 8005d2c:	e7fd      	b.n	8005d2a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00b      	beq.n	8005d4e <vPortFree+0x66>
	__asm volatile
 8005d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d3a:	f383 8811 	msr	BASEPRI, r3
 8005d3e:	f3bf 8f6f 	isb	sy
 8005d42:	f3bf 8f4f 	dsb	sy
 8005d46:	60bb      	str	r3, [r7, #8]
}
 8005d48:	bf00      	nop
 8005d4a:	bf00      	nop
 8005d4c:	e7fd      	b.n	8005d4a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	685a      	ldr	r2, [r3, #4]
 8005d52:	4b14      	ldr	r3, [pc, #80]	@ (8005da4 <vPortFree+0xbc>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4013      	ands	r3, r2
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d01e      	beq.n	8005d9a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d11a      	bne.n	8005d9a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	685a      	ldr	r2, [r3, #4]
 8005d68:	4b0e      	ldr	r3, [pc, #56]	@ (8005da4 <vPortFree+0xbc>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	43db      	mvns	r3, r3
 8005d6e:	401a      	ands	r2, r3
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005d74:	f7fe fc6a 	bl	800464c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	685a      	ldr	r2, [r3, #4]
 8005d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8005da8 <vPortFree+0xc0>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4413      	add	r3, r2
 8005d82:	4a09      	ldr	r2, [pc, #36]	@ (8005da8 <vPortFree+0xc0>)
 8005d84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005d86:	6938      	ldr	r0, [r7, #16]
 8005d88:	f000 f874 	bl	8005e74 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005d8c:	4b07      	ldr	r3, [pc, #28]	@ (8005dac <vPortFree+0xc4>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	3301      	adds	r3, #1
 8005d92:	4a06      	ldr	r2, [pc, #24]	@ (8005dac <vPortFree+0xc4>)
 8005d94:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005d96:	f7fe fc67 	bl	8004668 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005d9a:	bf00      	nop
 8005d9c:	3718      	adds	r7, #24
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	20004b60 	.word	0x20004b60
 8005da8:	20004b50 	.word	0x20004b50
 8005dac:	20004b5c 	.word	0x20004b5c

08005db0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005db0:	b480      	push	{r7}
 8005db2:	b085      	sub	sp, #20
 8005db4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005db6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005dba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005dbc:	4b27      	ldr	r3, [pc, #156]	@ (8005e5c <prvHeapInit+0xac>)
 8005dbe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f003 0307 	and.w	r3, r3, #7
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00c      	beq.n	8005de4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	3307      	adds	r3, #7
 8005dce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f023 0307 	bic.w	r3, r3, #7
 8005dd6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005dd8:	68ba      	ldr	r2, [r7, #8]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	4a1f      	ldr	r2, [pc, #124]	@ (8005e5c <prvHeapInit+0xac>)
 8005de0:	4413      	add	r3, r2
 8005de2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005de8:	4a1d      	ldr	r2, [pc, #116]	@ (8005e60 <prvHeapInit+0xb0>)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005dee:	4b1c      	ldr	r3, [pc, #112]	@ (8005e60 <prvHeapInit+0xb0>)
 8005df0:	2200      	movs	r2, #0
 8005df2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	68ba      	ldr	r2, [r7, #8]
 8005df8:	4413      	add	r3, r2
 8005dfa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005dfc:	2208      	movs	r2, #8
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	1a9b      	subs	r3, r3, r2
 8005e02:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f023 0307 	bic.w	r3, r3, #7
 8005e0a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	4a15      	ldr	r2, [pc, #84]	@ (8005e64 <prvHeapInit+0xb4>)
 8005e10:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005e12:	4b14      	ldr	r3, [pc, #80]	@ (8005e64 <prvHeapInit+0xb4>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2200      	movs	r2, #0
 8005e18:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005e1a:	4b12      	ldr	r3, [pc, #72]	@ (8005e64 <prvHeapInit+0xb4>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	1ad2      	subs	r2, r2, r3
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005e30:	4b0c      	ldr	r3, [pc, #48]	@ (8005e64 <prvHeapInit+0xb4>)
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	4a0a      	ldr	r2, [pc, #40]	@ (8005e68 <prvHeapInit+0xb8>)
 8005e3e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	4a09      	ldr	r2, [pc, #36]	@ (8005e6c <prvHeapInit+0xbc>)
 8005e46:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005e48:	4b09      	ldr	r3, [pc, #36]	@ (8005e70 <prvHeapInit+0xc0>)
 8005e4a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005e4e:	601a      	str	r2, [r3, #0]
}
 8005e50:	bf00      	nop
 8005e52:	3714      	adds	r7, #20
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr
 8005e5c:	20000f44 	.word	0x20000f44
 8005e60:	20004b44 	.word	0x20004b44
 8005e64:	20004b4c 	.word	0x20004b4c
 8005e68:	20004b54 	.word	0x20004b54
 8005e6c:	20004b50 	.word	0x20004b50
 8005e70:	20004b60 	.word	0x20004b60

08005e74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005e7c:	4b28      	ldr	r3, [pc, #160]	@ (8005f20 <prvInsertBlockIntoFreeList+0xac>)
 8005e7e:	60fb      	str	r3, [r7, #12]
 8005e80:	e002      	b.n	8005e88 <prvInsertBlockIntoFreeList+0x14>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	60fb      	str	r3, [r7, #12]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d8f7      	bhi.n	8005e82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	68ba      	ldr	r2, [r7, #8]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d108      	bne.n	8005eb6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	685a      	ldr	r2, [r3, #4]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	441a      	add	r2, r3
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	68ba      	ldr	r2, [r7, #8]
 8005ec0:	441a      	add	r2, r3
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d118      	bne.n	8005efc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	4b15      	ldr	r3, [pc, #84]	@ (8005f24 <prvInsertBlockIntoFreeList+0xb0>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d00d      	beq.n	8005ef2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	685a      	ldr	r2, [r3, #4]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	441a      	add	r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	601a      	str	r2, [r3, #0]
 8005ef0:	e008      	b.n	8005f04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8005f24 <prvInsertBlockIntoFreeList+0xb0>)
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	601a      	str	r2, [r3, #0]
 8005efa:	e003      	b.n	8005f04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d002      	beq.n	8005f12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f12:	bf00      	nop
 8005f14:	3714      	adds	r7, #20
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	20004b44 	.word	0x20004b44
 8005f24:	20004b4c 	.word	0x20004b4c

08005f28 <siprintf>:
 8005f28:	b40e      	push	{r1, r2, r3}
 8005f2a:	b500      	push	{lr}
 8005f2c:	b09c      	sub	sp, #112	@ 0x70
 8005f2e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005f30:	9002      	str	r0, [sp, #8]
 8005f32:	9006      	str	r0, [sp, #24]
 8005f34:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005f38:	4809      	ldr	r0, [pc, #36]	@ (8005f60 <siprintf+0x38>)
 8005f3a:	9107      	str	r1, [sp, #28]
 8005f3c:	9104      	str	r1, [sp, #16]
 8005f3e:	4909      	ldr	r1, [pc, #36]	@ (8005f64 <siprintf+0x3c>)
 8005f40:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f44:	9105      	str	r1, [sp, #20]
 8005f46:	6800      	ldr	r0, [r0, #0]
 8005f48:	9301      	str	r3, [sp, #4]
 8005f4a:	a902      	add	r1, sp, #8
 8005f4c:	f000 f9f8 	bl	8006340 <_svfiprintf_r>
 8005f50:	9b02      	ldr	r3, [sp, #8]
 8005f52:	2200      	movs	r2, #0
 8005f54:	701a      	strb	r2, [r3, #0]
 8005f56:	b01c      	add	sp, #112	@ 0x70
 8005f58:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f5c:	b003      	add	sp, #12
 8005f5e:	4770      	bx	lr
 8005f60:	20000010 	.word	0x20000010
 8005f64:	ffff0208 	.word	0xffff0208

08005f68 <memset>:
 8005f68:	4402      	add	r2, r0
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d100      	bne.n	8005f72 <memset+0xa>
 8005f70:	4770      	bx	lr
 8005f72:	f803 1b01 	strb.w	r1, [r3], #1
 8005f76:	e7f9      	b.n	8005f6c <memset+0x4>

08005f78 <_reclaim_reent>:
 8005f78:	4b29      	ldr	r3, [pc, #164]	@ (8006020 <_reclaim_reent+0xa8>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4283      	cmp	r3, r0
 8005f7e:	b570      	push	{r4, r5, r6, lr}
 8005f80:	4604      	mov	r4, r0
 8005f82:	d04b      	beq.n	800601c <_reclaim_reent+0xa4>
 8005f84:	69c3      	ldr	r3, [r0, #28]
 8005f86:	b1ab      	cbz	r3, 8005fb4 <_reclaim_reent+0x3c>
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	b16b      	cbz	r3, 8005fa8 <_reclaim_reent+0x30>
 8005f8c:	2500      	movs	r5, #0
 8005f8e:	69e3      	ldr	r3, [r4, #28]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	5959      	ldr	r1, [r3, r5]
 8005f94:	2900      	cmp	r1, #0
 8005f96:	d13b      	bne.n	8006010 <_reclaim_reent+0x98>
 8005f98:	3504      	adds	r5, #4
 8005f9a:	2d80      	cmp	r5, #128	@ 0x80
 8005f9c:	d1f7      	bne.n	8005f8e <_reclaim_reent+0x16>
 8005f9e:	69e3      	ldr	r3, [r4, #28]
 8005fa0:	4620      	mov	r0, r4
 8005fa2:	68d9      	ldr	r1, [r3, #12]
 8005fa4:	f000 f878 	bl	8006098 <_free_r>
 8005fa8:	69e3      	ldr	r3, [r4, #28]
 8005faa:	6819      	ldr	r1, [r3, #0]
 8005fac:	b111      	cbz	r1, 8005fb4 <_reclaim_reent+0x3c>
 8005fae:	4620      	mov	r0, r4
 8005fb0:	f000 f872 	bl	8006098 <_free_r>
 8005fb4:	6961      	ldr	r1, [r4, #20]
 8005fb6:	b111      	cbz	r1, 8005fbe <_reclaim_reent+0x46>
 8005fb8:	4620      	mov	r0, r4
 8005fba:	f000 f86d 	bl	8006098 <_free_r>
 8005fbe:	69e1      	ldr	r1, [r4, #28]
 8005fc0:	b111      	cbz	r1, 8005fc8 <_reclaim_reent+0x50>
 8005fc2:	4620      	mov	r0, r4
 8005fc4:	f000 f868 	bl	8006098 <_free_r>
 8005fc8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005fca:	b111      	cbz	r1, 8005fd2 <_reclaim_reent+0x5a>
 8005fcc:	4620      	mov	r0, r4
 8005fce:	f000 f863 	bl	8006098 <_free_r>
 8005fd2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005fd4:	b111      	cbz	r1, 8005fdc <_reclaim_reent+0x64>
 8005fd6:	4620      	mov	r0, r4
 8005fd8:	f000 f85e 	bl	8006098 <_free_r>
 8005fdc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005fde:	b111      	cbz	r1, 8005fe6 <_reclaim_reent+0x6e>
 8005fe0:	4620      	mov	r0, r4
 8005fe2:	f000 f859 	bl	8006098 <_free_r>
 8005fe6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005fe8:	b111      	cbz	r1, 8005ff0 <_reclaim_reent+0x78>
 8005fea:	4620      	mov	r0, r4
 8005fec:	f000 f854 	bl	8006098 <_free_r>
 8005ff0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005ff2:	b111      	cbz	r1, 8005ffa <_reclaim_reent+0x82>
 8005ff4:	4620      	mov	r0, r4
 8005ff6:	f000 f84f 	bl	8006098 <_free_r>
 8005ffa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005ffc:	b111      	cbz	r1, 8006004 <_reclaim_reent+0x8c>
 8005ffe:	4620      	mov	r0, r4
 8006000:	f000 f84a 	bl	8006098 <_free_r>
 8006004:	6a23      	ldr	r3, [r4, #32]
 8006006:	b14b      	cbz	r3, 800601c <_reclaim_reent+0xa4>
 8006008:	4620      	mov	r0, r4
 800600a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800600e:	4718      	bx	r3
 8006010:	680e      	ldr	r6, [r1, #0]
 8006012:	4620      	mov	r0, r4
 8006014:	f000 f840 	bl	8006098 <_free_r>
 8006018:	4631      	mov	r1, r6
 800601a:	e7bb      	b.n	8005f94 <_reclaim_reent+0x1c>
 800601c:	bd70      	pop	{r4, r5, r6, pc}
 800601e:	bf00      	nop
 8006020:	20000010 	.word	0x20000010

08006024 <__errno>:
 8006024:	4b01      	ldr	r3, [pc, #4]	@ (800602c <__errno+0x8>)
 8006026:	6818      	ldr	r0, [r3, #0]
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	20000010 	.word	0x20000010

08006030 <__libc_init_array>:
 8006030:	b570      	push	{r4, r5, r6, lr}
 8006032:	4d0d      	ldr	r5, [pc, #52]	@ (8006068 <__libc_init_array+0x38>)
 8006034:	4c0d      	ldr	r4, [pc, #52]	@ (800606c <__libc_init_array+0x3c>)
 8006036:	1b64      	subs	r4, r4, r5
 8006038:	10a4      	asrs	r4, r4, #2
 800603a:	2600      	movs	r6, #0
 800603c:	42a6      	cmp	r6, r4
 800603e:	d109      	bne.n	8006054 <__libc_init_array+0x24>
 8006040:	4d0b      	ldr	r5, [pc, #44]	@ (8006070 <__libc_init_array+0x40>)
 8006042:	4c0c      	ldr	r4, [pc, #48]	@ (8006074 <__libc_init_array+0x44>)
 8006044:	f000 fc66 	bl	8006914 <_init>
 8006048:	1b64      	subs	r4, r4, r5
 800604a:	10a4      	asrs	r4, r4, #2
 800604c:	2600      	movs	r6, #0
 800604e:	42a6      	cmp	r6, r4
 8006050:	d105      	bne.n	800605e <__libc_init_array+0x2e>
 8006052:	bd70      	pop	{r4, r5, r6, pc}
 8006054:	f855 3b04 	ldr.w	r3, [r5], #4
 8006058:	4798      	blx	r3
 800605a:	3601      	adds	r6, #1
 800605c:	e7ee      	b.n	800603c <__libc_init_array+0xc>
 800605e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006062:	4798      	blx	r3
 8006064:	3601      	adds	r6, #1
 8006066:	e7f2      	b.n	800604e <__libc_init_array+0x1e>
 8006068:	08006abc 	.word	0x08006abc
 800606c:	08006abc 	.word	0x08006abc
 8006070:	08006abc 	.word	0x08006abc
 8006074:	08006ac0 	.word	0x08006ac0

08006078 <__retarget_lock_acquire_recursive>:
 8006078:	4770      	bx	lr

0800607a <__retarget_lock_release_recursive>:
 800607a:	4770      	bx	lr

0800607c <memcpy>:
 800607c:	440a      	add	r2, r1
 800607e:	4291      	cmp	r1, r2
 8006080:	f100 33ff 	add.w	r3, r0, #4294967295
 8006084:	d100      	bne.n	8006088 <memcpy+0xc>
 8006086:	4770      	bx	lr
 8006088:	b510      	push	{r4, lr}
 800608a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800608e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006092:	4291      	cmp	r1, r2
 8006094:	d1f9      	bne.n	800608a <memcpy+0xe>
 8006096:	bd10      	pop	{r4, pc}

08006098 <_free_r>:
 8006098:	b538      	push	{r3, r4, r5, lr}
 800609a:	4605      	mov	r5, r0
 800609c:	2900      	cmp	r1, #0
 800609e:	d041      	beq.n	8006124 <_free_r+0x8c>
 80060a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060a4:	1f0c      	subs	r4, r1, #4
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	bfb8      	it	lt
 80060aa:	18e4      	addlt	r4, r4, r3
 80060ac:	f000 f8e0 	bl	8006270 <__malloc_lock>
 80060b0:	4a1d      	ldr	r2, [pc, #116]	@ (8006128 <_free_r+0x90>)
 80060b2:	6813      	ldr	r3, [r2, #0]
 80060b4:	b933      	cbnz	r3, 80060c4 <_free_r+0x2c>
 80060b6:	6063      	str	r3, [r4, #4]
 80060b8:	6014      	str	r4, [r2, #0]
 80060ba:	4628      	mov	r0, r5
 80060bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060c0:	f000 b8dc 	b.w	800627c <__malloc_unlock>
 80060c4:	42a3      	cmp	r3, r4
 80060c6:	d908      	bls.n	80060da <_free_r+0x42>
 80060c8:	6820      	ldr	r0, [r4, #0]
 80060ca:	1821      	adds	r1, r4, r0
 80060cc:	428b      	cmp	r3, r1
 80060ce:	bf01      	itttt	eq
 80060d0:	6819      	ldreq	r1, [r3, #0]
 80060d2:	685b      	ldreq	r3, [r3, #4]
 80060d4:	1809      	addeq	r1, r1, r0
 80060d6:	6021      	streq	r1, [r4, #0]
 80060d8:	e7ed      	b.n	80060b6 <_free_r+0x1e>
 80060da:	461a      	mov	r2, r3
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	b10b      	cbz	r3, 80060e4 <_free_r+0x4c>
 80060e0:	42a3      	cmp	r3, r4
 80060e2:	d9fa      	bls.n	80060da <_free_r+0x42>
 80060e4:	6811      	ldr	r1, [r2, #0]
 80060e6:	1850      	adds	r0, r2, r1
 80060e8:	42a0      	cmp	r0, r4
 80060ea:	d10b      	bne.n	8006104 <_free_r+0x6c>
 80060ec:	6820      	ldr	r0, [r4, #0]
 80060ee:	4401      	add	r1, r0
 80060f0:	1850      	adds	r0, r2, r1
 80060f2:	4283      	cmp	r3, r0
 80060f4:	6011      	str	r1, [r2, #0]
 80060f6:	d1e0      	bne.n	80060ba <_free_r+0x22>
 80060f8:	6818      	ldr	r0, [r3, #0]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	6053      	str	r3, [r2, #4]
 80060fe:	4408      	add	r0, r1
 8006100:	6010      	str	r0, [r2, #0]
 8006102:	e7da      	b.n	80060ba <_free_r+0x22>
 8006104:	d902      	bls.n	800610c <_free_r+0x74>
 8006106:	230c      	movs	r3, #12
 8006108:	602b      	str	r3, [r5, #0]
 800610a:	e7d6      	b.n	80060ba <_free_r+0x22>
 800610c:	6820      	ldr	r0, [r4, #0]
 800610e:	1821      	adds	r1, r4, r0
 8006110:	428b      	cmp	r3, r1
 8006112:	bf04      	itt	eq
 8006114:	6819      	ldreq	r1, [r3, #0]
 8006116:	685b      	ldreq	r3, [r3, #4]
 8006118:	6063      	str	r3, [r4, #4]
 800611a:	bf04      	itt	eq
 800611c:	1809      	addeq	r1, r1, r0
 800611e:	6021      	streq	r1, [r4, #0]
 8006120:	6054      	str	r4, [r2, #4]
 8006122:	e7ca      	b.n	80060ba <_free_r+0x22>
 8006124:	bd38      	pop	{r3, r4, r5, pc}
 8006126:	bf00      	nop
 8006128:	20004ca8 	.word	0x20004ca8

0800612c <sbrk_aligned>:
 800612c:	b570      	push	{r4, r5, r6, lr}
 800612e:	4e0f      	ldr	r6, [pc, #60]	@ (800616c <sbrk_aligned+0x40>)
 8006130:	460c      	mov	r4, r1
 8006132:	6831      	ldr	r1, [r6, #0]
 8006134:	4605      	mov	r5, r0
 8006136:	b911      	cbnz	r1, 800613e <sbrk_aligned+0x12>
 8006138:	f000 fba6 	bl	8006888 <_sbrk_r>
 800613c:	6030      	str	r0, [r6, #0]
 800613e:	4621      	mov	r1, r4
 8006140:	4628      	mov	r0, r5
 8006142:	f000 fba1 	bl	8006888 <_sbrk_r>
 8006146:	1c43      	adds	r3, r0, #1
 8006148:	d103      	bne.n	8006152 <sbrk_aligned+0x26>
 800614a:	f04f 34ff 	mov.w	r4, #4294967295
 800614e:	4620      	mov	r0, r4
 8006150:	bd70      	pop	{r4, r5, r6, pc}
 8006152:	1cc4      	adds	r4, r0, #3
 8006154:	f024 0403 	bic.w	r4, r4, #3
 8006158:	42a0      	cmp	r0, r4
 800615a:	d0f8      	beq.n	800614e <sbrk_aligned+0x22>
 800615c:	1a21      	subs	r1, r4, r0
 800615e:	4628      	mov	r0, r5
 8006160:	f000 fb92 	bl	8006888 <_sbrk_r>
 8006164:	3001      	adds	r0, #1
 8006166:	d1f2      	bne.n	800614e <sbrk_aligned+0x22>
 8006168:	e7ef      	b.n	800614a <sbrk_aligned+0x1e>
 800616a:	bf00      	nop
 800616c:	20004ca4 	.word	0x20004ca4

08006170 <_malloc_r>:
 8006170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006174:	1ccd      	adds	r5, r1, #3
 8006176:	f025 0503 	bic.w	r5, r5, #3
 800617a:	3508      	adds	r5, #8
 800617c:	2d0c      	cmp	r5, #12
 800617e:	bf38      	it	cc
 8006180:	250c      	movcc	r5, #12
 8006182:	2d00      	cmp	r5, #0
 8006184:	4606      	mov	r6, r0
 8006186:	db01      	blt.n	800618c <_malloc_r+0x1c>
 8006188:	42a9      	cmp	r1, r5
 800618a:	d904      	bls.n	8006196 <_malloc_r+0x26>
 800618c:	230c      	movs	r3, #12
 800618e:	6033      	str	r3, [r6, #0]
 8006190:	2000      	movs	r0, #0
 8006192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006196:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800626c <_malloc_r+0xfc>
 800619a:	f000 f869 	bl	8006270 <__malloc_lock>
 800619e:	f8d8 3000 	ldr.w	r3, [r8]
 80061a2:	461c      	mov	r4, r3
 80061a4:	bb44      	cbnz	r4, 80061f8 <_malloc_r+0x88>
 80061a6:	4629      	mov	r1, r5
 80061a8:	4630      	mov	r0, r6
 80061aa:	f7ff ffbf 	bl	800612c <sbrk_aligned>
 80061ae:	1c43      	adds	r3, r0, #1
 80061b0:	4604      	mov	r4, r0
 80061b2:	d158      	bne.n	8006266 <_malloc_r+0xf6>
 80061b4:	f8d8 4000 	ldr.w	r4, [r8]
 80061b8:	4627      	mov	r7, r4
 80061ba:	2f00      	cmp	r7, #0
 80061bc:	d143      	bne.n	8006246 <_malloc_r+0xd6>
 80061be:	2c00      	cmp	r4, #0
 80061c0:	d04b      	beq.n	800625a <_malloc_r+0xea>
 80061c2:	6823      	ldr	r3, [r4, #0]
 80061c4:	4639      	mov	r1, r7
 80061c6:	4630      	mov	r0, r6
 80061c8:	eb04 0903 	add.w	r9, r4, r3
 80061cc:	f000 fb5c 	bl	8006888 <_sbrk_r>
 80061d0:	4581      	cmp	r9, r0
 80061d2:	d142      	bne.n	800625a <_malloc_r+0xea>
 80061d4:	6821      	ldr	r1, [r4, #0]
 80061d6:	1a6d      	subs	r5, r5, r1
 80061d8:	4629      	mov	r1, r5
 80061da:	4630      	mov	r0, r6
 80061dc:	f7ff ffa6 	bl	800612c <sbrk_aligned>
 80061e0:	3001      	adds	r0, #1
 80061e2:	d03a      	beq.n	800625a <_malloc_r+0xea>
 80061e4:	6823      	ldr	r3, [r4, #0]
 80061e6:	442b      	add	r3, r5
 80061e8:	6023      	str	r3, [r4, #0]
 80061ea:	f8d8 3000 	ldr.w	r3, [r8]
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	bb62      	cbnz	r2, 800624c <_malloc_r+0xdc>
 80061f2:	f8c8 7000 	str.w	r7, [r8]
 80061f6:	e00f      	b.n	8006218 <_malloc_r+0xa8>
 80061f8:	6822      	ldr	r2, [r4, #0]
 80061fa:	1b52      	subs	r2, r2, r5
 80061fc:	d420      	bmi.n	8006240 <_malloc_r+0xd0>
 80061fe:	2a0b      	cmp	r2, #11
 8006200:	d917      	bls.n	8006232 <_malloc_r+0xc2>
 8006202:	1961      	adds	r1, r4, r5
 8006204:	42a3      	cmp	r3, r4
 8006206:	6025      	str	r5, [r4, #0]
 8006208:	bf18      	it	ne
 800620a:	6059      	strne	r1, [r3, #4]
 800620c:	6863      	ldr	r3, [r4, #4]
 800620e:	bf08      	it	eq
 8006210:	f8c8 1000 	streq.w	r1, [r8]
 8006214:	5162      	str	r2, [r4, r5]
 8006216:	604b      	str	r3, [r1, #4]
 8006218:	4630      	mov	r0, r6
 800621a:	f000 f82f 	bl	800627c <__malloc_unlock>
 800621e:	f104 000b 	add.w	r0, r4, #11
 8006222:	1d23      	adds	r3, r4, #4
 8006224:	f020 0007 	bic.w	r0, r0, #7
 8006228:	1ac2      	subs	r2, r0, r3
 800622a:	bf1c      	itt	ne
 800622c:	1a1b      	subne	r3, r3, r0
 800622e:	50a3      	strne	r3, [r4, r2]
 8006230:	e7af      	b.n	8006192 <_malloc_r+0x22>
 8006232:	6862      	ldr	r2, [r4, #4]
 8006234:	42a3      	cmp	r3, r4
 8006236:	bf0c      	ite	eq
 8006238:	f8c8 2000 	streq.w	r2, [r8]
 800623c:	605a      	strne	r2, [r3, #4]
 800623e:	e7eb      	b.n	8006218 <_malloc_r+0xa8>
 8006240:	4623      	mov	r3, r4
 8006242:	6864      	ldr	r4, [r4, #4]
 8006244:	e7ae      	b.n	80061a4 <_malloc_r+0x34>
 8006246:	463c      	mov	r4, r7
 8006248:	687f      	ldr	r7, [r7, #4]
 800624a:	e7b6      	b.n	80061ba <_malloc_r+0x4a>
 800624c:	461a      	mov	r2, r3
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	42a3      	cmp	r3, r4
 8006252:	d1fb      	bne.n	800624c <_malloc_r+0xdc>
 8006254:	2300      	movs	r3, #0
 8006256:	6053      	str	r3, [r2, #4]
 8006258:	e7de      	b.n	8006218 <_malloc_r+0xa8>
 800625a:	230c      	movs	r3, #12
 800625c:	6033      	str	r3, [r6, #0]
 800625e:	4630      	mov	r0, r6
 8006260:	f000 f80c 	bl	800627c <__malloc_unlock>
 8006264:	e794      	b.n	8006190 <_malloc_r+0x20>
 8006266:	6005      	str	r5, [r0, #0]
 8006268:	e7d6      	b.n	8006218 <_malloc_r+0xa8>
 800626a:	bf00      	nop
 800626c:	20004ca8 	.word	0x20004ca8

08006270 <__malloc_lock>:
 8006270:	4801      	ldr	r0, [pc, #4]	@ (8006278 <__malloc_lock+0x8>)
 8006272:	f7ff bf01 	b.w	8006078 <__retarget_lock_acquire_recursive>
 8006276:	bf00      	nop
 8006278:	20004ca0 	.word	0x20004ca0

0800627c <__malloc_unlock>:
 800627c:	4801      	ldr	r0, [pc, #4]	@ (8006284 <__malloc_unlock+0x8>)
 800627e:	f7ff befc 	b.w	800607a <__retarget_lock_release_recursive>
 8006282:	bf00      	nop
 8006284:	20004ca0 	.word	0x20004ca0

08006288 <__ssputs_r>:
 8006288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800628c:	688e      	ldr	r6, [r1, #8]
 800628e:	461f      	mov	r7, r3
 8006290:	42be      	cmp	r6, r7
 8006292:	680b      	ldr	r3, [r1, #0]
 8006294:	4682      	mov	sl, r0
 8006296:	460c      	mov	r4, r1
 8006298:	4690      	mov	r8, r2
 800629a:	d82d      	bhi.n	80062f8 <__ssputs_r+0x70>
 800629c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80062a0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80062a4:	d026      	beq.n	80062f4 <__ssputs_r+0x6c>
 80062a6:	6965      	ldr	r5, [r4, #20]
 80062a8:	6909      	ldr	r1, [r1, #16]
 80062aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80062ae:	eba3 0901 	sub.w	r9, r3, r1
 80062b2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80062b6:	1c7b      	adds	r3, r7, #1
 80062b8:	444b      	add	r3, r9
 80062ba:	106d      	asrs	r5, r5, #1
 80062bc:	429d      	cmp	r5, r3
 80062be:	bf38      	it	cc
 80062c0:	461d      	movcc	r5, r3
 80062c2:	0553      	lsls	r3, r2, #21
 80062c4:	d527      	bpl.n	8006316 <__ssputs_r+0x8e>
 80062c6:	4629      	mov	r1, r5
 80062c8:	f7ff ff52 	bl	8006170 <_malloc_r>
 80062cc:	4606      	mov	r6, r0
 80062ce:	b360      	cbz	r0, 800632a <__ssputs_r+0xa2>
 80062d0:	6921      	ldr	r1, [r4, #16]
 80062d2:	464a      	mov	r2, r9
 80062d4:	f7ff fed2 	bl	800607c <memcpy>
 80062d8:	89a3      	ldrh	r3, [r4, #12]
 80062da:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80062de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062e2:	81a3      	strh	r3, [r4, #12]
 80062e4:	6126      	str	r6, [r4, #16]
 80062e6:	6165      	str	r5, [r4, #20]
 80062e8:	444e      	add	r6, r9
 80062ea:	eba5 0509 	sub.w	r5, r5, r9
 80062ee:	6026      	str	r6, [r4, #0]
 80062f0:	60a5      	str	r5, [r4, #8]
 80062f2:	463e      	mov	r6, r7
 80062f4:	42be      	cmp	r6, r7
 80062f6:	d900      	bls.n	80062fa <__ssputs_r+0x72>
 80062f8:	463e      	mov	r6, r7
 80062fa:	6820      	ldr	r0, [r4, #0]
 80062fc:	4632      	mov	r2, r6
 80062fe:	4641      	mov	r1, r8
 8006300:	f000 faa8 	bl	8006854 <memmove>
 8006304:	68a3      	ldr	r3, [r4, #8]
 8006306:	1b9b      	subs	r3, r3, r6
 8006308:	60a3      	str	r3, [r4, #8]
 800630a:	6823      	ldr	r3, [r4, #0]
 800630c:	4433      	add	r3, r6
 800630e:	6023      	str	r3, [r4, #0]
 8006310:	2000      	movs	r0, #0
 8006312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006316:	462a      	mov	r2, r5
 8006318:	f000 fac6 	bl	80068a8 <_realloc_r>
 800631c:	4606      	mov	r6, r0
 800631e:	2800      	cmp	r0, #0
 8006320:	d1e0      	bne.n	80062e4 <__ssputs_r+0x5c>
 8006322:	6921      	ldr	r1, [r4, #16]
 8006324:	4650      	mov	r0, sl
 8006326:	f7ff feb7 	bl	8006098 <_free_r>
 800632a:	230c      	movs	r3, #12
 800632c:	f8ca 3000 	str.w	r3, [sl]
 8006330:	89a3      	ldrh	r3, [r4, #12]
 8006332:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006336:	81a3      	strh	r3, [r4, #12]
 8006338:	f04f 30ff 	mov.w	r0, #4294967295
 800633c:	e7e9      	b.n	8006312 <__ssputs_r+0x8a>
	...

08006340 <_svfiprintf_r>:
 8006340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006344:	4698      	mov	r8, r3
 8006346:	898b      	ldrh	r3, [r1, #12]
 8006348:	061b      	lsls	r3, r3, #24
 800634a:	b09d      	sub	sp, #116	@ 0x74
 800634c:	4607      	mov	r7, r0
 800634e:	460d      	mov	r5, r1
 8006350:	4614      	mov	r4, r2
 8006352:	d510      	bpl.n	8006376 <_svfiprintf_r+0x36>
 8006354:	690b      	ldr	r3, [r1, #16]
 8006356:	b973      	cbnz	r3, 8006376 <_svfiprintf_r+0x36>
 8006358:	2140      	movs	r1, #64	@ 0x40
 800635a:	f7ff ff09 	bl	8006170 <_malloc_r>
 800635e:	6028      	str	r0, [r5, #0]
 8006360:	6128      	str	r0, [r5, #16]
 8006362:	b930      	cbnz	r0, 8006372 <_svfiprintf_r+0x32>
 8006364:	230c      	movs	r3, #12
 8006366:	603b      	str	r3, [r7, #0]
 8006368:	f04f 30ff 	mov.w	r0, #4294967295
 800636c:	b01d      	add	sp, #116	@ 0x74
 800636e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006372:	2340      	movs	r3, #64	@ 0x40
 8006374:	616b      	str	r3, [r5, #20]
 8006376:	2300      	movs	r3, #0
 8006378:	9309      	str	r3, [sp, #36]	@ 0x24
 800637a:	2320      	movs	r3, #32
 800637c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006380:	f8cd 800c 	str.w	r8, [sp, #12]
 8006384:	2330      	movs	r3, #48	@ 0x30
 8006386:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006524 <_svfiprintf_r+0x1e4>
 800638a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800638e:	f04f 0901 	mov.w	r9, #1
 8006392:	4623      	mov	r3, r4
 8006394:	469a      	mov	sl, r3
 8006396:	f813 2b01 	ldrb.w	r2, [r3], #1
 800639a:	b10a      	cbz	r2, 80063a0 <_svfiprintf_r+0x60>
 800639c:	2a25      	cmp	r2, #37	@ 0x25
 800639e:	d1f9      	bne.n	8006394 <_svfiprintf_r+0x54>
 80063a0:	ebba 0b04 	subs.w	fp, sl, r4
 80063a4:	d00b      	beq.n	80063be <_svfiprintf_r+0x7e>
 80063a6:	465b      	mov	r3, fp
 80063a8:	4622      	mov	r2, r4
 80063aa:	4629      	mov	r1, r5
 80063ac:	4638      	mov	r0, r7
 80063ae:	f7ff ff6b 	bl	8006288 <__ssputs_r>
 80063b2:	3001      	adds	r0, #1
 80063b4:	f000 80a7 	beq.w	8006506 <_svfiprintf_r+0x1c6>
 80063b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80063ba:	445a      	add	r2, fp
 80063bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80063be:	f89a 3000 	ldrb.w	r3, [sl]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	f000 809f 	beq.w	8006506 <_svfiprintf_r+0x1c6>
 80063c8:	2300      	movs	r3, #0
 80063ca:	f04f 32ff 	mov.w	r2, #4294967295
 80063ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063d2:	f10a 0a01 	add.w	sl, sl, #1
 80063d6:	9304      	str	r3, [sp, #16]
 80063d8:	9307      	str	r3, [sp, #28]
 80063da:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80063de:	931a      	str	r3, [sp, #104]	@ 0x68
 80063e0:	4654      	mov	r4, sl
 80063e2:	2205      	movs	r2, #5
 80063e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063e8:	484e      	ldr	r0, [pc, #312]	@ (8006524 <_svfiprintf_r+0x1e4>)
 80063ea:	f7f9 fef9 	bl	80001e0 <memchr>
 80063ee:	9a04      	ldr	r2, [sp, #16]
 80063f0:	b9d8      	cbnz	r0, 800642a <_svfiprintf_r+0xea>
 80063f2:	06d0      	lsls	r0, r2, #27
 80063f4:	bf44      	itt	mi
 80063f6:	2320      	movmi	r3, #32
 80063f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80063fc:	0711      	lsls	r1, r2, #28
 80063fe:	bf44      	itt	mi
 8006400:	232b      	movmi	r3, #43	@ 0x2b
 8006402:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006406:	f89a 3000 	ldrb.w	r3, [sl]
 800640a:	2b2a      	cmp	r3, #42	@ 0x2a
 800640c:	d015      	beq.n	800643a <_svfiprintf_r+0xfa>
 800640e:	9a07      	ldr	r2, [sp, #28]
 8006410:	4654      	mov	r4, sl
 8006412:	2000      	movs	r0, #0
 8006414:	f04f 0c0a 	mov.w	ip, #10
 8006418:	4621      	mov	r1, r4
 800641a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800641e:	3b30      	subs	r3, #48	@ 0x30
 8006420:	2b09      	cmp	r3, #9
 8006422:	d94b      	bls.n	80064bc <_svfiprintf_r+0x17c>
 8006424:	b1b0      	cbz	r0, 8006454 <_svfiprintf_r+0x114>
 8006426:	9207      	str	r2, [sp, #28]
 8006428:	e014      	b.n	8006454 <_svfiprintf_r+0x114>
 800642a:	eba0 0308 	sub.w	r3, r0, r8
 800642e:	fa09 f303 	lsl.w	r3, r9, r3
 8006432:	4313      	orrs	r3, r2
 8006434:	9304      	str	r3, [sp, #16]
 8006436:	46a2      	mov	sl, r4
 8006438:	e7d2      	b.n	80063e0 <_svfiprintf_r+0xa0>
 800643a:	9b03      	ldr	r3, [sp, #12]
 800643c:	1d19      	adds	r1, r3, #4
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	9103      	str	r1, [sp, #12]
 8006442:	2b00      	cmp	r3, #0
 8006444:	bfbb      	ittet	lt
 8006446:	425b      	neglt	r3, r3
 8006448:	f042 0202 	orrlt.w	r2, r2, #2
 800644c:	9307      	strge	r3, [sp, #28]
 800644e:	9307      	strlt	r3, [sp, #28]
 8006450:	bfb8      	it	lt
 8006452:	9204      	strlt	r2, [sp, #16]
 8006454:	7823      	ldrb	r3, [r4, #0]
 8006456:	2b2e      	cmp	r3, #46	@ 0x2e
 8006458:	d10a      	bne.n	8006470 <_svfiprintf_r+0x130>
 800645a:	7863      	ldrb	r3, [r4, #1]
 800645c:	2b2a      	cmp	r3, #42	@ 0x2a
 800645e:	d132      	bne.n	80064c6 <_svfiprintf_r+0x186>
 8006460:	9b03      	ldr	r3, [sp, #12]
 8006462:	1d1a      	adds	r2, r3, #4
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	9203      	str	r2, [sp, #12]
 8006468:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800646c:	3402      	adds	r4, #2
 800646e:	9305      	str	r3, [sp, #20]
 8006470:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006534 <_svfiprintf_r+0x1f4>
 8006474:	7821      	ldrb	r1, [r4, #0]
 8006476:	2203      	movs	r2, #3
 8006478:	4650      	mov	r0, sl
 800647a:	f7f9 feb1 	bl	80001e0 <memchr>
 800647e:	b138      	cbz	r0, 8006490 <_svfiprintf_r+0x150>
 8006480:	9b04      	ldr	r3, [sp, #16]
 8006482:	eba0 000a 	sub.w	r0, r0, sl
 8006486:	2240      	movs	r2, #64	@ 0x40
 8006488:	4082      	lsls	r2, r0
 800648a:	4313      	orrs	r3, r2
 800648c:	3401      	adds	r4, #1
 800648e:	9304      	str	r3, [sp, #16]
 8006490:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006494:	4824      	ldr	r0, [pc, #144]	@ (8006528 <_svfiprintf_r+0x1e8>)
 8006496:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800649a:	2206      	movs	r2, #6
 800649c:	f7f9 fea0 	bl	80001e0 <memchr>
 80064a0:	2800      	cmp	r0, #0
 80064a2:	d036      	beq.n	8006512 <_svfiprintf_r+0x1d2>
 80064a4:	4b21      	ldr	r3, [pc, #132]	@ (800652c <_svfiprintf_r+0x1ec>)
 80064a6:	bb1b      	cbnz	r3, 80064f0 <_svfiprintf_r+0x1b0>
 80064a8:	9b03      	ldr	r3, [sp, #12]
 80064aa:	3307      	adds	r3, #7
 80064ac:	f023 0307 	bic.w	r3, r3, #7
 80064b0:	3308      	adds	r3, #8
 80064b2:	9303      	str	r3, [sp, #12]
 80064b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064b6:	4433      	add	r3, r6
 80064b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80064ba:	e76a      	b.n	8006392 <_svfiprintf_r+0x52>
 80064bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80064c0:	460c      	mov	r4, r1
 80064c2:	2001      	movs	r0, #1
 80064c4:	e7a8      	b.n	8006418 <_svfiprintf_r+0xd8>
 80064c6:	2300      	movs	r3, #0
 80064c8:	3401      	adds	r4, #1
 80064ca:	9305      	str	r3, [sp, #20]
 80064cc:	4619      	mov	r1, r3
 80064ce:	f04f 0c0a 	mov.w	ip, #10
 80064d2:	4620      	mov	r0, r4
 80064d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064d8:	3a30      	subs	r2, #48	@ 0x30
 80064da:	2a09      	cmp	r2, #9
 80064dc:	d903      	bls.n	80064e6 <_svfiprintf_r+0x1a6>
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d0c6      	beq.n	8006470 <_svfiprintf_r+0x130>
 80064e2:	9105      	str	r1, [sp, #20]
 80064e4:	e7c4      	b.n	8006470 <_svfiprintf_r+0x130>
 80064e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80064ea:	4604      	mov	r4, r0
 80064ec:	2301      	movs	r3, #1
 80064ee:	e7f0      	b.n	80064d2 <_svfiprintf_r+0x192>
 80064f0:	ab03      	add	r3, sp, #12
 80064f2:	9300      	str	r3, [sp, #0]
 80064f4:	462a      	mov	r2, r5
 80064f6:	4b0e      	ldr	r3, [pc, #56]	@ (8006530 <_svfiprintf_r+0x1f0>)
 80064f8:	a904      	add	r1, sp, #16
 80064fa:	4638      	mov	r0, r7
 80064fc:	f3af 8000 	nop.w
 8006500:	1c42      	adds	r2, r0, #1
 8006502:	4606      	mov	r6, r0
 8006504:	d1d6      	bne.n	80064b4 <_svfiprintf_r+0x174>
 8006506:	89ab      	ldrh	r3, [r5, #12]
 8006508:	065b      	lsls	r3, r3, #25
 800650a:	f53f af2d 	bmi.w	8006368 <_svfiprintf_r+0x28>
 800650e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006510:	e72c      	b.n	800636c <_svfiprintf_r+0x2c>
 8006512:	ab03      	add	r3, sp, #12
 8006514:	9300      	str	r3, [sp, #0]
 8006516:	462a      	mov	r2, r5
 8006518:	4b05      	ldr	r3, [pc, #20]	@ (8006530 <_svfiprintf_r+0x1f0>)
 800651a:	a904      	add	r1, sp, #16
 800651c:	4638      	mov	r0, r7
 800651e:	f000 f879 	bl	8006614 <_printf_i>
 8006522:	e7ed      	b.n	8006500 <_svfiprintf_r+0x1c0>
 8006524:	08006a80 	.word	0x08006a80
 8006528:	08006a8a 	.word	0x08006a8a
 800652c:	00000000 	.word	0x00000000
 8006530:	08006289 	.word	0x08006289
 8006534:	08006a86 	.word	0x08006a86

08006538 <_printf_common>:
 8006538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800653c:	4616      	mov	r6, r2
 800653e:	4698      	mov	r8, r3
 8006540:	688a      	ldr	r2, [r1, #8]
 8006542:	690b      	ldr	r3, [r1, #16]
 8006544:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006548:	4293      	cmp	r3, r2
 800654a:	bfb8      	it	lt
 800654c:	4613      	movlt	r3, r2
 800654e:	6033      	str	r3, [r6, #0]
 8006550:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006554:	4607      	mov	r7, r0
 8006556:	460c      	mov	r4, r1
 8006558:	b10a      	cbz	r2, 800655e <_printf_common+0x26>
 800655a:	3301      	adds	r3, #1
 800655c:	6033      	str	r3, [r6, #0]
 800655e:	6823      	ldr	r3, [r4, #0]
 8006560:	0699      	lsls	r1, r3, #26
 8006562:	bf42      	ittt	mi
 8006564:	6833      	ldrmi	r3, [r6, #0]
 8006566:	3302      	addmi	r3, #2
 8006568:	6033      	strmi	r3, [r6, #0]
 800656a:	6825      	ldr	r5, [r4, #0]
 800656c:	f015 0506 	ands.w	r5, r5, #6
 8006570:	d106      	bne.n	8006580 <_printf_common+0x48>
 8006572:	f104 0a19 	add.w	sl, r4, #25
 8006576:	68e3      	ldr	r3, [r4, #12]
 8006578:	6832      	ldr	r2, [r6, #0]
 800657a:	1a9b      	subs	r3, r3, r2
 800657c:	42ab      	cmp	r3, r5
 800657e:	dc26      	bgt.n	80065ce <_printf_common+0x96>
 8006580:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006584:	6822      	ldr	r2, [r4, #0]
 8006586:	3b00      	subs	r3, #0
 8006588:	bf18      	it	ne
 800658a:	2301      	movne	r3, #1
 800658c:	0692      	lsls	r2, r2, #26
 800658e:	d42b      	bmi.n	80065e8 <_printf_common+0xb0>
 8006590:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006594:	4641      	mov	r1, r8
 8006596:	4638      	mov	r0, r7
 8006598:	47c8      	blx	r9
 800659a:	3001      	adds	r0, #1
 800659c:	d01e      	beq.n	80065dc <_printf_common+0xa4>
 800659e:	6823      	ldr	r3, [r4, #0]
 80065a0:	6922      	ldr	r2, [r4, #16]
 80065a2:	f003 0306 	and.w	r3, r3, #6
 80065a6:	2b04      	cmp	r3, #4
 80065a8:	bf02      	ittt	eq
 80065aa:	68e5      	ldreq	r5, [r4, #12]
 80065ac:	6833      	ldreq	r3, [r6, #0]
 80065ae:	1aed      	subeq	r5, r5, r3
 80065b0:	68a3      	ldr	r3, [r4, #8]
 80065b2:	bf0c      	ite	eq
 80065b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065b8:	2500      	movne	r5, #0
 80065ba:	4293      	cmp	r3, r2
 80065bc:	bfc4      	itt	gt
 80065be:	1a9b      	subgt	r3, r3, r2
 80065c0:	18ed      	addgt	r5, r5, r3
 80065c2:	2600      	movs	r6, #0
 80065c4:	341a      	adds	r4, #26
 80065c6:	42b5      	cmp	r5, r6
 80065c8:	d11a      	bne.n	8006600 <_printf_common+0xc8>
 80065ca:	2000      	movs	r0, #0
 80065cc:	e008      	b.n	80065e0 <_printf_common+0xa8>
 80065ce:	2301      	movs	r3, #1
 80065d0:	4652      	mov	r2, sl
 80065d2:	4641      	mov	r1, r8
 80065d4:	4638      	mov	r0, r7
 80065d6:	47c8      	blx	r9
 80065d8:	3001      	adds	r0, #1
 80065da:	d103      	bne.n	80065e4 <_printf_common+0xac>
 80065dc:	f04f 30ff 	mov.w	r0, #4294967295
 80065e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065e4:	3501      	adds	r5, #1
 80065e6:	e7c6      	b.n	8006576 <_printf_common+0x3e>
 80065e8:	18e1      	adds	r1, r4, r3
 80065ea:	1c5a      	adds	r2, r3, #1
 80065ec:	2030      	movs	r0, #48	@ 0x30
 80065ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80065f2:	4422      	add	r2, r4
 80065f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80065f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80065fc:	3302      	adds	r3, #2
 80065fe:	e7c7      	b.n	8006590 <_printf_common+0x58>
 8006600:	2301      	movs	r3, #1
 8006602:	4622      	mov	r2, r4
 8006604:	4641      	mov	r1, r8
 8006606:	4638      	mov	r0, r7
 8006608:	47c8      	blx	r9
 800660a:	3001      	adds	r0, #1
 800660c:	d0e6      	beq.n	80065dc <_printf_common+0xa4>
 800660e:	3601      	adds	r6, #1
 8006610:	e7d9      	b.n	80065c6 <_printf_common+0x8e>
	...

08006614 <_printf_i>:
 8006614:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006618:	7e0f      	ldrb	r7, [r1, #24]
 800661a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800661c:	2f78      	cmp	r7, #120	@ 0x78
 800661e:	4691      	mov	r9, r2
 8006620:	4680      	mov	r8, r0
 8006622:	460c      	mov	r4, r1
 8006624:	469a      	mov	sl, r3
 8006626:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800662a:	d807      	bhi.n	800663c <_printf_i+0x28>
 800662c:	2f62      	cmp	r7, #98	@ 0x62
 800662e:	d80a      	bhi.n	8006646 <_printf_i+0x32>
 8006630:	2f00      	cmp	r7, #0
 8006632:	f000 80d2 	beq.w	80067da <_printf_i+0x1c6>
 8006636:	2f58      	cmp	r7, #88	@ 0x58
 8006638:	f000 80b9 	beq.w	80067ae <_printf_i+0x19a>
 800663c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006640:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006644:	e03a      	b.n	80066bc <_printf_i+0xa8>
 8006646:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800664a:	2b15      	cmp	r3, #21
 800664c:	d8f6      	bhi.n	800663c <_printf_i+0x28>
 800664e:	a101      	add	r1, pc, #4	@ (adr r1, 8006654 <_printf_i+0x40>)
 8006650:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006654:	080066ad 	.word	0x080066ad
 8006658:	080066c1 	.word	0x080066c1
 800665c:	0800663d 	.word	0x0800663d
 8006660:	0800663d 	.word	0x0800663d
 8006664:	0800663d 	.word	0x0800663d
 8006668:	0800663d 	.word	0x0800663d
 800666c:	080066c1 	.word	0x080066c1
 8006670:	0800663d 	.word	0x0800663d
 8006674:	0800663d 	.word	0x0800663d
 8006678:	0800663d 	.word	0x0800663d
 800667c:	0800663d 	.word	0x0800663d
 8006680:	080067c1 	.word	0x080067c1
 8006684:	080066eb 	.word	0x080066eb
 8006688:	0800677b 	.word	0x0800677b
 800668c:	0800663d 	.word	0x0800663d
 8006690:	0800663d 	.word	0x0800663d
 8006694:	080067e3 	.word	0x080067e3
 8006698:	0800663d 	.word	0x0800663d
 800669c:	080066eb 	.word	0x080066eb
 80066a0:	0800663d 	.word	0x0800663d
 80066a4:	0800663d 	.word	0x0800663d
 80066a8:	08006783 	.word	0x08006783
 80066ac:	6833      	ldr	r3, [r6, #0]
 80066ae:	1d1a      	adds	r2, r3, #4
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	6032      	str	r2, [r6, #0]
 80066b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80066b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80066bc:	2301      	movs	r3, #1
 80066be:	e09d      	b.n	80067fc <_printf_i+0x1e8>
 80066c0:	6833      	ldr	r3, [r6, #0]
 80066c2:	6820      	ldr	r0, [r4, #0]
 80066c4:	1d19      	adds	r1, r3, #4
 80066c6:	6031      	str	r1, [r6, #0]
 80066c8:	0606      	lsls	r6, r0, #24
 80066ca:	d501      	bpl.n	80066d0 <_printf_i+0xbc>
 80066cc:	681d      	ldr	r5, [r3, #0]
 80066ce:	e003      	b.n	80066d8 <_printf_i+0xc4>
 80066d0:	0645      	lsls	r5, r0, #25
 80066d2:	d5fb      	bpl.n	80066cc <_printf_i+0xb8>
 80066d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80066d8:	2d00      	cmp	r5, #0
 80066da:	da03      	bge.n	80066e4 <_printf_i+0xd0>
 80066dc:	232d      	movs	r3, #45	@ 0x2d
 80066de:	426d      	negs	r5, r5
 80066e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066e4:	4859      	ldr	r0, [pc, #356]	@ (800684c <_printf_i+0x238>)
 80066e6:	230a      	movs	r3, #10
 80066e8:	e011      	b.n	800670e <_printf_i+0xfa>
 80066ea:	6821      	ldr	r1, [r4, #0]
 80066ec:	6833      	ldr	r3, [r6, #0]
 80066ee:	0608      	lsls	r0, r1, #24
 80066f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80066f4:	d402      	bmi.n	80066fc <_printf_i+0xe8>
 80066f6:	0649      	lsls	r1, r1, #25
 80066f8:	bf48      	it	mi
 80066fa:	b2ad      	uxthmi	r5, r5
 80066fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80066fe:	4853      	ldr	r0, [pc, #332]	@ (800684c <_printf_i+0x238>)
 8006700:	6033      	str	r3, [r6, #0]
 8006702:	bf14      	ite	ne
 8006704:	230a      	movne	r3, #10
 8006706:	2308      	moveq	r3, #8
 8006708:	2100      	movs	r1, #0
 800670a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800670e:	6866      	ldr	r6, [r4, #4]
 8006710:	60a6      	str	r6, [r4, #8]
 8006712:	2e00      	cmp	r6, #0
 8006714:	bfa2      	ittt	ge
 8006716:	6821      	ldrge	r1, [r4, #0]
 8006718:	f021 0104 	bicge.w	r1, r1, #4
 800671c:	6021      	strge	r1, [r4, #0]
 800671e:	b90d      	cbnz	r5, 8006724 <_printf_i+0x110>
 8006720:	2e00      	cmp	r6, #0
 8006722:	d04b      	beq.n	80067bc <_printf_i+0x1a8>
 8006724:	4616      	mov	r6, r2
 8006726:	fbb5 f1f3 	udiv	r1, r5, r3
 800672a:	fb03 5711 	mls	r7, r3, r1, r5
 800672e:	5dc7      	ldrb	r7, [r0, r7]
 8006730:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006734:	462f      	mov	r7, r5
 8006736:	42bb      	cmp	r3, r7
 8006738:	460d      	mov	r5, r1
 800673a:	d9f4      	bls.n	8006726 <_printf_i+0x112>
 800673c:	2b08      	cmp	r3, #8
 800673e:	d10b      	bne.n	8006758 <_printf_i+0x144>
 8006740:	6823      	ldr	r3, [r4, #0]
 8006742:	07df      	lsls	r7, r3, #31
 8006744:	d508      	bpl.n	8006758 <_printf_i+0x144>
 8006746:	6923      	ldr	r3, [r4, #16]
 8006748:	6861      	ldr	r1, [r4, #4]
 800674a:	4299      	cmp	r1, r3
 800674c:	bfde      	ittt	le
 800674e:	2330      	movle	r3, #48	@ 0x30
 8006750:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006754:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006758:	1b92      	subs	r2, r2, r6
 800675a:	6122      	str	r2, [r4, #16]
 800675c:	f8cd a000 	str.w	sl, [sp]
 8006760:	464b      	mov	r3, r9
 8006762:	aa03      	add	r2, sp, #12
 8006764:	4621      	mov	r1, r4
 8006766:	4640      	mov	r0, r8
 8006768:	f7ff fee6 	bl	8006538 <_printf_common>
 800676c:	3001      	adds	r0, #1
 800676e:	d14a      	bne.n	8006806 <_printf_i+0x1f2>
 8006770:	f04f 30ff 	mov.w	r0, #4294967295
 8006774:	b004      	add	sp, #16
 8006776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800677a:	6823      	ldr	r3, [r4, #0]
 800677c:	f043 0320 	orr.w	r3, r3, #32
 8006780:	6023      	str	r3, [r4, #0]
 8006782:	4833      	ldr	r0, [pc, #204]	@ (8006850 <_printf_i+0x23c>)
 8006784:	2778      	movs	r7, #120	@ 0x78
 8006786:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800678a:	6823      	ldr	r3, [r4, #0]
 800678c:	6831      	ldr	r1, [r6, #0]
 800678e:	061f      	lsls	r7, r3, #24
 8006790:	f851 5b04 	ldr.w	r5, [r1], #4
 8006794:	d402      	bmi.n	800679c <_printf_i+0x188>
 8006796:	065f      	lsls	r7, r3, #25
 8006798:	bf48      	it	mi
 800679a:	b2ad      	uxthmi	r5, r5
 800679c:	6031      	str	r1, [r6, #0]
 800679e:	07d9      	lsls	r1, r3, #31
 80067a0:	bf44      	itt	mi
 80067a2:	f043 0320 	orrmi.w	r3, r3, #32
 80067a6:	6023      	strmi	r3, [r4, #0]
 80067a8:	b11d      	cbz	r5, 80067b2 <_printf_i+0x19e>
 80067aa:	2310      	movs	r3, #16
 80067ac:	e7ac      	b.n	8006708 <_printf_i+0xf4>
 80067ae:	4827      	ldr	r0, [pc, #156]	@ (800684c <_printf_i+0x238>)
 80067b0:	e7e9      	b.n	8006786 <_printf_i+0x172>
 80067b2:	6823      	ldr	r3, [r4, #0]
 80067b4:	f023 0320 	bic.w	r3, r3, #32
 80067b8:	6023      	str	r3, [r4, #0]
 80067ba:	e7f6      	b.n	80067aa <_printf_i+0x196>
 80067bc:	4616      	mov	r6, r2
 80067be:	e7bd      	b.n	800673c <_printf_i+0x128>
 80067c0:	6833      	ldr	r3, [r6, #0]
 80067c2:	6825      	ldr	r5, [r4, #0]
 80067c4:	6961      	ldr	r1, [r4, #20]
 80067c6:	1d18      	adds	r0, r3, #4
 80067c8:	6030      	str	r0, [r6, #0]
 80067ca:	062e      	lsls	r6, r5, #24
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	d501      	bpl.n	80067d4 <_printf_i+0x1c0>
 80067d0:	6019      	str	r1, [r3, #0]
 80067d2:	e002      	b.n	80067da <_printf_i+0x1c6>
 80067d4:	0668      	lsls	r0, r5, #25
 80067d6:	d5fb      	bpl.n	80067d0 <_printf_i+0x1bc>
 80067d8:	8019      	strh	r1, [r3, #0]
 80067da:	2300      	movs	r3, #0
 80067dc:	6123      	str	r3, [r4, #16]
 80067de:	4616      	mov	r6, r2
 80067e0:	e7bc      	b.n	800675c <_printf_i+0x148>
 80067e2:	6833      	ldr	r3, [r6, #0]
 80067e4:	1d1a      	adds	r2, r3, #4
 80067e6:	6032      	str	r2, [r6, #0]
 80067e8:	681e      	ldr	r6, [r3, #0]
 80067ea:	6862      	ldr	r2, [r4, #4]
 80067ec:	2100      	movs	r1, #0
 80067ee:	4630      	mov	r0, r6
 80067f0:	f7f9 fcf6 	bl	80001e0 <memchr>
 80067f4:	b108      	cbz	r0, 80067fa <_printf_i+0x1e6>
 80067f6:	1b80      	subs	r0, r0, r6
 80067f8:	6060      	str	r0, [r4, #4]
 80067fa:	6863      	ldr	r3, [r4, #4]
 80067fc:	6123      	str	r3, [r4, #16]
 80067fe:	2300      	movs	r3, #0
 8006800:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006804:	e7aa      	b.n	800675c <_printf_i+0x148>
 8006806:	6923      	ldr	r3, [r4, #16]
 8006808:	4632      	mov	r2, r6
 800680a:	4649      	mov	r1, r9
 800680c:	4640      	mov	r0, r8
 800680e:	47d0      	blx	sl
 8006810:	3001      	adds	r0, #1
 8006812:	d0ad      	beq.n	8006770 <_printf_i+0x15c>
 8006814:	6823      	ldr	r3, [r4, #0]
 8006816:	079b      	lsls	r3, r3, #30
 8006818:	d413      	bmi.n	8006842 <_printf_i+0x22e>
 800681a:	68e0      	ldr	r0, [r4, #12]
 800681c:	9b03      	ldr	r3, [sp, #12]
 800681e:	4298      	cmp	r0, r3
 8006820:	bfb8      	it	lt
 8006822:	4618      	movlt	r0, r3
 8006824:	e7a6      	b.n	8006774 <_printf_i+0x160>
 8006826:	2301      	movs	r3, #1
 8006828:	4632      	mov	r2, r6
 800682a:	4649      	mov	r1, r9
 800682c:	4640      	mov	r0, r8
 800682e:	47d0      	blx	sl
 8006830:	3001      	adds	r0, #1
 8006832:	d09d      	beq.n	8006770 <_printf_i+0x15c>
 8006834:	3501      	adds	r5, #1
 8006836:	68e3      	ldr	r3, [r4, #12]
 8006838:	9903      	ldr	r1, [sp, #12]
 800683a:	1a5b      	subs	r3, r3, r1
 800683c:	42ab      	cmp	r3, r5
 800683e:	dcf2      	bgt.n	8006826 <_printf_i+0x212>
 8006840:	e7eb      	b.n	800681a <_printf_i+0x206>
 8006842:	2500      	movs	r5, #0
 8006844:	f104 0619 	add.w	r6, r4, #25
 8006848:	e7f5      	b.n	8006836 <_printf_i+0x222>
 800684a:	bf00      	nop
 800684c:	08006a91 	.word	0x08006a91
 8006850:	08006aa2 	.word	0x08006aa2

08006854 <memmove>:
 8006854:	4288      	cmp	r0, r1
 8006856:	b510      	push	{r4, lr}
 8006858:	eb01 0402 	add.w	r4, r1, r2
 800685c:	d902      	bls.n	8006864 <memmove+0x10>
 800685e:	4284      	cmp	r4, r0
 8006860:	4623      	mov	r3, r4
 8006862:	d807      	bhi.n	8006874 <memmove+0x20>
 8006864:	1e43      	subs	r3, r0, #1
 8006866:	42a1      	cmp	r1, r4
 8006868:	d008      	beq.n	800687c <memmove+0x28>
 800686a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800686e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006872:	e7f8      	b.n	8006866 <memmove+0x12>
 8006874:	4402      	add	r2, r0
 8006876:	4601      	mov	r1, r0
 8006878:	428a      	cmp	r2, r1
 800687a:	d100      	bne.n	800687e <memmove+0x2a>
 800687c:	bd10      	pop	{r4, pc}
 800687e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006882:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006886:	e7f7      	b.n	8006878 <memmove+0x24>

08006888 <_sbrk_r>:
 8006888:	b538      	push	{r3, r4, r5, lr}
 800688a:	4d06      	ldr	r5, [pc, #24]	@ (80068a4 <_sbrk_r+0x1c>)
 800688c:	2300      	movs	r3, #0
 800688e:	4604      	mov	r4, r0
 8006890:	4608      	mov	r0, r1
 8006892:	602b      	str	r3, [r5, #0]
 8006894:	f7fa fa7a 	bl	8000d8c <_sbrk>
 8006898:	1c43      	adds	r3, r0, #1
 800689a:	d102      	bne.n	80068a2 <_sbrk_r+0x1a>
 800689c:	682b      	ldr	r3, [r5, #0]
 800689e:	b103      	cbz	r3, 80068a2 <_sbrk_r+0x1a>
 80068a0:	6023      	str	r3, [r4, #0]
 80068a2:	bd38      	pop	{r3, r4, r5, pc}
 80068a4:	20004c9c 	.word	0x20004c9c

080068a8 <_realloc_r>:
 80068a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068ac:	4680      	mov	r8, r0
 80068ae:	4615      	mov	r5, r2
 80068b0:	460c      	mov	r4, r1
 80068b2:	b921      	cbnz	r1, 80068be <_realloc_r+0x16>
 80068b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068b8:	4611      	mov	r1, r2
 80068ba:	f7ff bc59 	b.w	8006170 <_malloc_r>
 80068be:	b92a      	cbnz	r2, 80068cc <_realloc_r+0x24>
 80068c0:	f7ff fbea 	bl	8006098 <_free_r>
 80068c4:	2400      	movs	r4, #0
 80068c6:	4620      	mov	r0, r4
 80068c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068cc:	f000 f81a 	bl	8006904 <_malloc_usable_size_r>
 80068d0:	4285      	cmp	r5, r0
 80068d2:	4606      	mov	r6, r0
 80068d4:	d802      	bhi.n	80068dc <_realloc_r+0x34>
 80068d6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80068da:	d8f4      	bhi.n	80068c6 <_realloc_r+0x1e>
 80068dc:	4629      	mov	r1, r5
 80068de:	4640      	mov	r0, r8
 80068e0:	f7ff fc46 	bl	8006170 <_malloc_r>
 80068e4:	4607      	mov	r7, r0
 80068e6:	2800      	cmp	r0, #0
 80068e8:	d0ec      	beq.n	80068c4 <_realloc_r+0x1c>
 80068ea:	42b5      	cmp	r5, r6
 80068ec:	462a      	mov	r2, r5
 80068ee:	4621      	mov	r1, r4
 80068f0:	bf28      	it	cs
 80068f2:	4632      	movcs	r2, r6
 80068f4:	f7ff fbc2 	bl	800607c <memcpy>
 80068f8:	4621      	mov	r1, r4
 80068fa:	4640      	mov	r0, r8
 80068fc:	f7ff fbcc 	bl	8006098 <_free_r>
 8006900:	463c      	mov	r4, r7
 8006902:	e7e0      	b.n	80068c6 <_realloc_r+0x1e>

08006904 <_malloc_usable_size_r>:
 8006904:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006908:	1f18      	subs	r0, r3, #4
 800690a:	2b00      	cmp	r3, #0
 800690c:	bfbc      	itt	lt
 800690e:	580b      	ldrlt	r3, [r1, r0]
 8006910:	18c0      	addlt	r0, r0, r3
 8006912:	4770      	bx	lr

08006914 <_init>:
 8006914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006916:	bf00      	nop
 8006918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800691a:	bc08      	pop	{r3}
 800691c:	469e      	mov	lr, r3
 800691e:	4770      	bx	lr

08006920 <_fini>:
 8006920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006922:	bf00      	nop
 8006924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006926:	bc08      	pop	{r3}
 8006928:	469e      	mov	lr, r3
 800692a:	4770      	bx	lr
